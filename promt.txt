Задача: Интеграция API Remotive в проект GlobalJobHunter
Создать новый модуль-агрегатор remotive_aggregator.py для интеграции API поиска удаленной работы Remotive в существующий проект GlobalJobHunter. Код должен быть оптимальным, переиспользовать существующие компоненты и органично вписываться в архитектуру проекта.

1. Описание проекта (Контекст)
GlobalJobHunter — это веб-приложение на Python (Flask), предназначенное для помощи украинским беженцам в поиске работы.

Основной функционал: Пользователи через веб-интерфейс выбирают профессии, страны и город для поиска. Система агрегирует вакансии с нескольких внешних API (Adzuna, Jobicy, Careerjet) и отображает их в удобном виде.

Ключевая особенность: Система умеет определять вакансии, подходящие для беженцев (refugee_friendly) и не требующие знания местного языка (no_language_required).

Архитектура:

Backend: app.py (Flask).

Агрегаторы: Существуют модули adzuna_aggregator.py, jobicy_aggregator.py, careerjet_aggregator.py.

Стандартизация: Все агрегаторы приводят данные к единому формату — объекту JobVacancy.

Общие модули для переиспользования:

CacheManager: Система кеширования (Redis + файловый кеш).

RateLimiter: Ограничитель частоты запросов.

JobVacancy: Стандартная структура данных (dataclass).

specific_jobs: Словарь с русскими названиями профессий и их переводами на другие языки (находится в adzuna_aggregator.py).

2. Особенности API Remotive
URL: https://remotive.com/api/remote-jobs

Тип: Только удаленные вакансии (Remote).

Фильтрация: API позволяет фильтровать результаты по ключевому слову (search=...) или по категории (category=...).

География: API не имеет фильтрации по странам, так как все вакансии удаленные. Локация часто указывается в текстовом формате (e.g., "USA Only", "Europe", "Worldwide").

Аутентификация: API не требует ключей.

3. План действий по интеграции Remotive
Создание файла: Разработать код для нового файла remotive_aggregator.py.

Класс RemotiveAggregator:

Создать класс RemotiveAggregator, унаследованный от BaseJobAggregator.

За основу взять структуру и логику careerjet_aggregator.py.

Переиспользование компонентов:

Импортировать JobVacancy, CacheManager, RateLimiter из adzuna_aggregator.py.

Использовать CacheManager для кеширования запросов.

Взаимодействие с API Remotive:

Реализовать логику запросов к API.

Преобразовать русские названия профессий из preferences в английские ключевые слова, используя specific_jobs_map (как это сделано в careerjet_aggregator.py).

Выполнять отдельные запросы для каждой выбранной профессии для большей точности.

Нормализация данных:

Для каждой вакансии, полученной от Remotive, создать экземпляр JobVacancy.

Сопоставить поля ответа (title, company_name, publication_date, url, candidate_required_location и т.д.) с полями JobVacancy.

Поле source должно иметь значение 'Remotive'.

Поле country должно иметь значение 'Remote' или 'Удаленно'.

Интеграция в app.py:

Предоставить краткую и ясную инструкцию, как в файле app.py инициализировать RemotiveAggregator и добавить его в словарь additional_aggregators.

4. Необходимые файлы для загрузки
Для выполнения задачи мне понадобятся следующие файлы, чтобы понять архитектуру и переиспользовать существующий код:

app.py — Главный файл Flask-приложения. Нужен, чтобы увидеть, как вызываются и объединяются результаты от текущих агрегаторов.

adzuna_aggregator.py — (Самый важный файл). Содержит JobVacancy, CacheManager, RateLimiter и словарь specific_jobs.

base_aggregator.py — Базовый класс, от которого должен наследоваться новый агрегатор.

careerjet_aggregator.py — Как самый свежий и релевантный пример для создания нового агрегатора.

email_service.py — Чтобы убедиться, что новый источник будет корректно работать с системой email-подписок.