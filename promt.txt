PROMPT ДЛЯ МЕНЯ (ассистента) НА ЗАВТРА

Ты продолжаешь отладку мини-версии GlobalJobHunter для Telegram WebApp и связки с основным сайтом. Цель — чтобы язык корректно прокидывался и переключался (из бота → в webapp → в результаты), а поиск, стоп и открытие результатов работали стабильно в той же webview без потери сессии. Не фантазируй, ничего не упрощай, опирайся строго на предоставленные файлы. Любое предложение по коду — давай полный файл или точный diff с позициями «куда вставить/что заменить».

Текущее состояние (фиксировать как baseline)

Деплой на Railway: есть минимум два сервиса — web (Flask) и worker (бот на aiogram).

Бот уже стартует, даёт кнопку WebApp. Язык в боте переключается, но в мини-апп он не всегда попадает/не применяется.

В WebApp есть кнопки EN/UA/RU (в правом верхнем углу), но переключение на UI не отражается (либо отражается частично, потому что мало data-i18n).

Поиск в мини-аппе запускается, прогресс идёт, вакансий много, но при открытии результатов ранее терялась сессия (внешний браузер). Нужно и дальше открывать результаты в той же webview, плюс прокидывать ?lang.

На странице results локаль применяется при загрузке (если есть ?lang или сохранённый язык). Live-переключения там пока нет (и не требуется).

Что нужно получить «на выходе»

Язык из бота гарантированно уходит в WebApp (…/webapp.html?lang=ru|uk|en).

В WebApp язык применяется (JSON подгружается, все ключевые элементы с data-i18n меняются). Кнопки EN/UA/RU мгновенно переключают язык и обновляют ?lang в URL без перезагрузки.

Поиск → Прогресс → Результаты: редирект на /results происходит внутри той же webview; в ссылке есть ?lang= (и, опционально, ?rid=), контент отображается.

Страница результатов отображает тексты на выбранном языке (те элементы, что помечены data-i18n).

Логи понятные: в боте (aiogram) и в webapp (console) всё размечено префиксами, чтобы быстро локализовать проблему.

Что проверять/чинить в первую очередь

Порядок скриптов в webapp.html: localization_tg.js перед webapp_tg.js.

В bot.py: генерация WebAppInfo(url=WEBAPP_URL?lang=XX) именно с параметром.

В localization_tg.js: инициализация (чтение ?lang, localStorage, навешивание обработчиков на .lang-btn и [data-lang], перезапись ?lang через history.replaceState, загрузка /static/{lang}.json, применение data-i18n + attr=placeholder:key).

В webapp_tg.js: при получении redirect_url — добавлять ?lang= к ссылке и открывать в той же webview (window.location.href), без tg.openLink/target="_blank".

В app.py: (опционально) поддержка rid → results_id = session.get("results_id") or request.args.get("rid"); а в /search/progress|stop отдавать redirect_url уже с ?rid= (если требуется).

В results.html: подключён localization_tg.js и на DOMContentLoaded вызывается loadLanguage(langFromUrlOrStorage).

ЧТО ТЫ ДОЛЖЕН МНЕ ЗАГРУЗИТЬ (полный список артефактов)
Telegram-бот (worker)

telegram_bot/bot.py — актуальная версия, где формируется кнопка WebApp.

(Если есть) прочие файлы бота, в которых выносились константы: config.py, __init__.py, middleware/logging конфиг.

Web (Flask)

app.py — актуальная версия с роутами:

/search/start

/search/progress

/search/stop

/results
(нужно видеть, как формируется redirect_url и читается results_id).

templates/results.html — актуальная версия (чтобы проверить подключение локализации и data-i18n).

templates/layout.html — если на него завязаны скрипты/локализация/футер (на всякий случай).

Мини-апп (статическая часть)

static/tg/webapp.html — актуальная версия (проверим структуру DOM, кнопки языка, порядок скриптов).

static/tg/localization_tg.js — актуальная версия.

static/tg/webapp_tg.js — актуальная версия.

JSON-переводы: static/en.json, static/ru.json, static/uk.json — актуальные версии.

Поисковая логика (для контекста редиректа/кэша)

base_aggregator.py, adzuna_aggregator.py, careerjet_aggregator.py, jobicy_aggregator.py, remotive_aggregator.py — не для правок, а чтобы помнить форматы статусов и поля sites_status/jobs_found.

database.py (если в нём хранится кэш или завязки на results_id).

scheduler.py (если он участвует в запуске поиска).

Статика общего сайта (если влияет)

static/js/localization.js (если вдруг он конфликтует).

Любые скрипты, которые переопределяют history.replaceState/fetch/console (вдруг ломают поведение).

Railway настройки (скрины/текст)

Список Variables по сервисам web и worker:

BOT_TOKEN

WEBAPP_URL (должен указывать на https://<твой-домен>/static/tg/webapp.html)

SECRET_KEY (Flask сессии)

API-ключи для источников (Adzuna и пр.)

Procfile или настройка типов процессов (что именно запускает web, что запускает worker).

Логи web и worker за момент старта и при попытке переключения языка + нажатии кнопок.

ПРОВЕРОЧНЫЕ СЦЕНАРИИ (я их прогоню по готовому коду)
A. Язык из бота → в WebApp

В боте выбираю RU → жму «Open Mini-App».

URL открывается как …/webapp.html?lang=ru.

В консоли страницы есть лог [i18n] Loaded ru.

Все элементы с data-i18n меняются на RU (кнопки «Найти/Стоп», заголовки «Профессии/Страны», подсказки, статус).

B. Переключение в правом верхнем углу

Жму EN → URL обновляется до ?lang=en (без reload).

В консоли: [i18n] Loaded en.

Те же элементы переключаются на EN.

C. Поиск → результаты (с сохранением языка и сессии)

Запускаю поиск, вижу прогресс и счётчик.

Появляется «Открыть результаты» → клик.

Переход идёт в той же webview (без внешнего браузера).

URL …/results?lang=en (или RU/UA).

На results язык применён (ключевые data-i18n в нужной локали).

Вакансии видны (сессия не потерялась).

D. Рестарт бота → язык помнится

Открываю мини-апп напрямую …/webapp.html без ?lang — берётся язык из localStorage → проверяю лог [i18n] Loaded xx.

ЛОГИ, КОТОРЫЕ Я ХОЧУ ВИДЕТЬ
В консоли WebApp (F12 → Console)

[i18n] Loaded ru|uk|en

[i18n] loadLanguage failed … (если будет ошибка загрузки JSON)

[WebApp] Init language = … (если оставим в webapp_tg.js)

[WebApp] Switch language → … при клике на EN/UA/RU

[WebApp] Search started … / ошибки при fetch

В логах бота (worker)

START from @username (id=…, lang=…)

Set lang for id=… -> ru|uk|en

URL, который отдаёт кнопка WebApp (WEBAPP_URL=?lang=…)

В логах web (Flask)

Запросы на /search/start, /search/progress, /search/stop

Что кладём в сессию (results_id)

Что отдаём в redirect_url (лучше логировать строкой)

ЧТО Я СДЕЛАЮ ПО ПОЛУЧЕНИЮ ФАЙЛОВ

Проверю порядок скриптов и инициализацию локализации.

Расширю data-i18n в webapp.html на все ключевые элементы (если ты не против), или дам точный список вставок, чтобы ты сам проставил.

Убедюсь, что webapp_tg.js правильно добавляет ?lang к redirect_url и открывает результаты в той же webview.

При необходимости дам минимальные правки app.py для rid и чтения lang на /results.

Настрою понятные логи и предложу короткий чек-лист «что сломалось, где смотреть».

С этим брифом мы без боли продолжим. Скинь артефакты из списка (особенно актуальные версии webapp.html, localization_tg.js, webapp_tg.js, bot.py, app.py, results.html) + скриншоты Railway Variables и свежие логи при кликах по языку.



PROMPT ДЛЯ МЕНЯ (НАЧИНАТЬ С ЭТОГО)
0) Контекст проекта (кратко)

Бэкенд: Flask (файл app.py). Роуты:
/search/start → запускает агрегацию;
/search/progress → отдаёт статус и redirect_url (к /results) по готовности;
/search/stop → останавливает и тоже может вернуть redirect_url;
/results → рендерит найденные вакансии из кэша по results_id (через сессию; поддержка ?rid= может быть добавлена).

Агрегаторы: adzuna_aggregator.py, careerjet_aggregator.py, jobicy_aggregator.py, remotive_aggregator.py, общий base_aggregator.py, вспомогательные database.py, scheduler.py, debug_api.py.

Веб-сайт (Jinja): templates/layout.html, templates/index.html, templates/results.html, и статические static/... (JS, CSS).

Telegram:

Bot (Aiogram) — отдельный воркер на Railway: telegram_bot/bot.py. Кнопка открывает Telegram WebApp (/static/tg/webapp.html).

WebApp мини-версия: static/tg/webapp.html + скрипты static/tg/localization_tg.js, static/tg/webapp_tg.js.

Локализация:

Файлы переводов: /static/en.json, /static/ru.json, /static/uk.json.

В мини-странице переводятся элементы с data-i18n.

Язык должен приходить из бота ?lang=ru|uk|en и переключаться кнопками в правом верхнем углу в WebApp.

1) Точные цели на завтра

Язык: бот → WebApp
Гарантировать, что кнопка «Open Mini-App» в Telegram всегда открывает …/static/tg/webapp.html?lang=xx. (Проверить генератор URL в bot.py, переменную WEBAPP_URL в Railway.)

Язык: переключение в WebApp
Клики на EN/UA/RU в правом верхнем углу мгновенно меняют текст (все элементы, помеченные data-i18n) и синхронизируют ?lang в адресной строке (без перезагрузки).

Язык: WebApp → /results
При готовности поиска redirect_url из /search/progress дополняется ?lang=xx, переход делается в той же webview (без внешнего браузера), результаты открываются на выбранном языке (перевод в results.html применяется на DOMContentLoaded).

Сессия/кэш результатов
Отсутствует проблема «в боте найдено N, а на полной — пусто»:

либо открываем /results в той же webview, чтобы кука сессии сохранилась;

либо (запасной путь) redirect_url включает ?rid=…, а /results читает request.args.get('rid') (если это ещё не сделано).

Мини-набор профессий
В WebApp галочки профессий работают (минимальный curated список), текст «больше профессий — в полной версии» присутствует.

Прозрачные логи
В консоли WebApp: понятные [i18n] …, [WebApp] … логи. В боте/воркере Railway — логи старта, /start, /setlang, открытие WebApp.

2) Чёткие шаги проверки (repro)

В Telegram: выбрать язык (ru/uk/en) → нажать «Open Mini-App».
Ожидаю открытие …/webapp.html?lang=<код>.

На мини-странице: увидеть переводы; кликать EN/UA/RU → текст меняется сразу, ?lang в адресе обновляется.

Запуск поиска: выбрать 1–2 профессии, 1–2 страны → «Найти».
В прогрессе отображаются источники и счётчик вакансий.
По готовности появляется «Открыть результаты»; по клику переход в той же webview на /results?lang=… (и, если внедрено, /results?rid=…&lang=…).

На /results: язык соответствует выбранному, перевод применился к элементам с data-i18n. Вакансии видны (кэш найден).

3) На что смотреть при отладке

WebApp (DevTools → Console/Network):

Есть ли ?lang=xx в адресной строке при старте?

Успешно ли грузятся /static/ru.json, /static/en.json, /static/uk.json (статус 200, без 404/403)?

Появляются ли логи [i18n] Loaded xx после клика по кнопке языка?

В Network виден ли /search/progress и что именно в redirect_url (включён ли lang, при необходимости — rid)?

Bot/Worker (Railway logs):

Логи /start, /setlang (язык для юзера), сформированный WEBAPP_URL (с ?lang).

Backend (Railway logs):

Логи /search/start, /search/progress, /results.

Ошибки вида «Adzuna API keys not found» (если вдруг на основном сервисе нет ENV).

HTML/Jinja:

В webapp.html: порядок <script> — сначала localization_tg.js, потом webapp_tg.js.

У кнопок языка есть data-lang (или класс .lang-btn) — любая из двух схем подходит.

Элементы, которые «не переводятся», помечены data-i18n="key" или data-i18n="attr=placeholder:key".

4) Возможные причины текущей «непереключаемости»

localization_tg.js не подключён или подключён после webapp_tg.js, а инициализация ломается.

Кнопки в верстке не имеют data-lang / .lang-btn, обработчики не вешаются.

JSON-файлы переводов лежат не в /static/, в результате fetch идёт 404.

В bot.py WebApp открывается без ?lang=… (юзер думает, что «не передалось»).

Часть UI не помечена data-i18n — визуально кажется, что «ничего не поменялось».

ФАЙЛЫ/ЛОГИ, КОТОРЫЕ НУЖНО ПРИСЛАТЬ
A. Фронтенд (WebApp)

static/tg/webapp.html — актуальную версию целиком.

static/tg/localization_tg.js — актуальный код целиком.

static/tg/webapp_tg.js — актуальный код целиком.

Переводы:

static/en.json

static/ru.json

static/uk.json

Скриншоты DevTools:

Console при старте WebApp и при кликах EN/UA/RU (видны [i18n] Loaded xx).

Network → запросы /static/xx.json (статус/ответ) и /search/progress (покажи redirect_url в JSON).

B. Бэкенд

app.py — актуальный целиком (чтобы проверить: /search/progress, /search/stop формируют redirect_url; /results читает session['results_id'] и/или request.args.get('rid')).

templates/results.html — актуальный целиком (проверить подключение localization_tg.js и loadLanguage(lang) на DOMContentLoaded; наличие data-i18n на ключевых элементах).

Логи сервера (Railway): пачку строк при одном полном поисковом цикле (start → progress → results).

C. Telegram Bot (Worker)

telegram_bot/bot.py — актуальный целиком. Важно:

как формируется WEBAPP_URL / используешь ли WEBAPP_URL из ENV;

как добавляется ?lang=… (WebAppInfo(url=f"{WEBAPP_URL}?lang={lang}")).

Railway Variables (скрин/вырезка):

BOT_TOKEN (можно затереть середину),

WEBAPP_URL (должен быть https://globaljobhunter.vip/static/tg/webapp.html),

любые BASE_URL/DOMAIN/PORT, если есть.

Логи воркера (Bot) при /start и смене языка (/lang / инлайн-кнопки): строки вроде START from @user (lang=uk), Set lang for id=… -> ru.

D. Прочее (по возможности)

requirements.txt — чтобы исключить расхождение версий aiogram/flask.

Если использовался worker/web Procfile или Railway-settings — короткий скрин настроек (команда запуска, порт).

ЧТО Я СДЕЛАЮ ПОСЛЕ ПОЛУЧЕНИЯ ЭТОГО

Сверю порядок скриптов и обработчики в webapp.html и localization_tg.js.

Проверю, что переводы грузятся (пути, CORS, MIME, кэширование, no-store).

Убедюсь, что кнопки имеют корректные атрибуты и сразу меняют DOM (ре-применю applyTranslations() без перезагрузки).

В webapp_tg.js — проверю код добавления ?lang в redirect_url и переход внутри webview.

В bot.py — гарантирую ?lang при открытии WebApp.

На /results — проверю вызов loadLanguage(lang) и пометки data-i18n.

Если потребуется, расширю покрытие data-i18n по мини-странице (кнопки, разделы, подсказки) — по минимуму, без порчи основной версии.

Отдам готовые диффы (конкретные вставки по строкам/блокам).