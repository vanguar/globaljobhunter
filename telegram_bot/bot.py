# telegram_bot/bot.py
import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, WebAppInfo,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
)

# –õ–æ–≥–∏
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
)
log = logging.getLogger("gjh-bot")

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_BASE = os.getenv("WEBAPP_URL", "https://globaljobhunter.vip/static/tg/webapp.html")

if not BOT_TOKEN:
    log.error("BOT_TOKEN –ø—É—Å—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    raise SystemExit(1)

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# –ü–∞–º—è—Ç—å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (–Ω–∞ —Å—Ç–∞—Ä—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ in-memory)
USER_LANG: dict[int, str] = {}  # user_id -> "en"|"ru"|"uk"

# –ü—Ä–æ—Å—Ç–∞—è i18n
T = {
    "btn_open": {
        "en": "üîé Open GlobalJobHunter",
        "ru": "üîé –û—Ç–∫—Ä—ã—Ç—å GlobalJobHunter",
        "uk": "üîé –í—ñ–¥–∫—Ä–∏—Ç–∏ GlobalJobHunter",
    },
    "start": {
        "en": "Open the mini-site in Telegram üëá",
        "ru": "–û—Ç–∫—Ä–æ–π –º–∏–Ω–∏-—Å–∞–π—Ç –ø—Ä—è–º–æ –≤ Telegram üëá",
        "uk": "–í—ñ–¥–∫—Ä–∏–π –º—ñ–Ω—ñ-—Å–∞–π—Ç —É Telegram üëá",
    },
    "choose": {
        "en": "Choose language:",
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "uk": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
    },
    "lang_saved": {
        "en": "Language set to English ‚úÖ",
        "ru": "–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π ‚úÖ",
        "uk": "–ú–æ–≤—É –ø–µ—Ä–µ–º–∫–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É ‚úÖ",
    },
    "change_lang": {
        "en": "Change language",
        "ru": "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "uk": "–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
    },
}

def pick(lang: str | None, key: str) -> str:
    code = (lang or "en").split("-")[0]
    return T[key].get(code, T[key]["en"])

def get_user_lang(user: types.User) -> str:
    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤—ã–±–æ—Ä ‚Üí —è–∑—ã–∫ Telegram-–∫–ª–∏–µ–Ω—Ç–∞ ‚Üí en
    if user.id in USER_LANG:
        return USER_LANG[user.id]
    return (user.language_code or "en").split("-")[0]

def webapp_url_for(lang: str) -> str:
    return f"{WEBAPP_BASE}?lang={lang}"

def lang_inline_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="English",    callback_data="setlang:en")],
        [InlineKeyboardButton(text="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="setlang:uk")],
        [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π",    callback_data="setlang:ru")],
    ])

def open_button_kb(lang: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[[KeyboardButton(text=pick(lang, "btn_open"),
                                  web_app=WebAppInfo(url=webapp_url_for(lang)))]],
    )

def lang_menu_kb(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=pick(lang, "change_lang"), callback_data="show_lang_menu")]
    ])

@dp.message(CommandStart())
async def on_start(m: types.Message):
    user = m.from_user
    lang = get_user_lang(user)
    log.info("START from @%s (id=%s) -> lang=%s", user.username, user.id, lang)

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    kb = open_button_kb(lang)
    await m.answer(pick(lang, "start"), reply_markup=kb)

    # –æ—Ç–ø—Ä–∞–≤–∏–º –º–µ–Ω—é –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    await m.answer(pick(lang, "choose"), reply_markup=lang_inline_keyboard())

@dp.message(Command("lang"))
async def on_lang_cmd(m: types.Message):
    lang = get_user_lang(m.from_user)
    await m.answer(pick(lang, "choose"), reply_markup=lang_inline_keyboard())

@dp.callback_query(F.data == "show_lang_menu")
async def on_show_lang_menu(cq: CallbackQuery):
    lang = get_user_lang(cq.from_user)
    await cq.message.answer(pick(lang, "choose"), reply_markup=lang_inline_keyboard())
    await cq.answer()

@dp.callback_query(F.data.startswith("setlang:"))
async def on_set_lang(cq: CallbackQuery):
    _, lang = cq.data.split(":", 1)
    USER_LANG[cq.from_user.id] = lang
    log.info("Set lang for id=%s -> %s", cq.from_user.id, lang)

    # —É–≤–µ–¥–æ–º–∏–º
    await cq.message.answer(T["lang_saved"][lang])

    # –Ω–æ–≤–∞—è WebApp-–∫–Ω–æ–ø–∫–∞ —Å —è–∑—ã–∫–æ–º
    await cq.message.answer(pick(lang, "start"), reply_markup=open_button_kb(lang))

    # –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é ¬´–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫¬ª (–ù–ï –ü–£–°–¢–û–ô –¢–ï–ö–°–¢!)
    await cq.message.answer(pick(lang, "choose"), reply_markup=lang_menu_kb(lang))

    await cq.answer()


@dp.errors()
async def on_error(event: types.ErrorEvent):
    logging.exception("Unhandled error: %s", event.exception)

async def main():
    log.info("Starting polling...")
    log.info("WEBAPP_URL = %s", WEBAPP_BASE)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("KeyboardInterrupt ‚Äî shutting down.")
