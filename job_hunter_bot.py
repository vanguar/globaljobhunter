#!/usr/bin/env python3
"""
JobHunterBot v2.1 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω—ã
"""

import os
import json
import time
from datetime import datetime
from typing import List, Dict
from src.scraper.final_scraper import FinalJoobleScaper
from src.applier.job_applier import JobApplier

class JobHunterBot:
    def __init__(self):
        """
        –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å JobHunterBot
        """
        self.config = {
            "search_keywords": [],
            "search_locations": [],
            "search_country": "Deutschland",
            "max_jobs_per_search": 15,
            "apply_enabled": False,
            "delay_between_applications": 30,
            "save_results": True,
            "max_pages": 1  # –ñ–ï–°–¢–ö–û –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π - –ù–ï–¢ –ë–õ–û–ö–ò–†–û–í–û–ö!
        }
        
        self.countries = {
            "1": {"name": "–ì–µ—Ä–º–∞–Ω–∏—è", "domain": "de.jooble.org", "code": "Deutschland"},
            "2": {"name": "–°–®–ê", "domain": "us.jooble.org", "code": "United States"},
            "3": {"name": "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "domain": "uk.jooble.org", "code": "United Kingdom"},
            "4": {"name": "–ö–∞–Ω–∞–¥–∞", "domain": "ca.jooble.org", "code": "Canada"},
            "5": {"name": "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", "domain": "au.jooble.org", "code": "Australia"},
            "6": {"name": "–§—Ä–∞–Ω—Ü–∏—è", "domain": "fr.jooble.org", "code": "France"},
            "7": {"name": "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "domain": "nl.jooble.org", "code": "Netherlands"}
        }
        
        self.results_file = "data/job_search_results.json"
        self.ensure_data_directory()
    
    def select_country(self):
        """–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        print("\nüåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        print("=" * 40)
        
        for key, country in self.countries.items():
            print(f"{key}. {country['name']} ({country['domain']})")
        
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É (1-7, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 - –ì–µ—Ä–º–∞–Ω–∏—è): ").strip()
            
            if choice in self.countries:
                selected = self.countries[choice]
                self.config["search_country"] = selected["code"]
                self.config["country_domain"] = selected["domain"]
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {selected['name']}")
                return selected
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ì–µ—Ä–º–∞–Ω–∏—è
                self.config["search_country"] = "Deutschland"
                self.config["country_domain"] = "de.jooble.org"
                print("‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ì–µ—Ä–º–∞–Ω–∏—è")
                return self.countries["1"]
                
        except:
            self.config["search_country"] = "Deutschland"
            self.config["country_domain"] = "de.jooble.org"
            print("‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ì–µ—Ä–º–∞–Ω–∏—è")
            return self.countries["1"]
    
    def get_user_preferences(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("ü§ñ JobHunterBot v2.1 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        print("=" * 50)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω—É
        selected_country = self.select_country()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
        print(f"\nüéØ –ö–∞–∫—É—é –≤–∞–∫–∞–Ω—Å–∏—é –∏—â–µ–º –≤ {selected_country['name']}?")
        print("–ü—Ä–∏–º–µ—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:")
        print("  ‚Ä¢ Python Developer")
        print("  ‚Ä¢ Java Developer") 
        print("  ‚Ä¢ Frontend Developer")
        print("  ‚Ä¢ Backend Developer")
        print("  ‚Ä¢ Data Analyst")
        print("  ‚Ä¢ Marketing Manager")
        print("  ‚Ä¢ DevOps Engineer")
        
        keywords_input = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: ").strip()
        if keywords_input:
            self.config["search_keywords"] = [keywords_input]
        else:
            self.config["search_keywords"] = ["Python Developer"]
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
        city_examples = {
            "Deutschland": "Berlin, M√ºnchen, Hamburg, Frankfurt, K√∂ln",
            "United States": "New York, Los Angeles, Chicago, San Francisco, Seattle",
            "United Kingdom": "London, Manchester, Birmingham, Edinburgh, Bristol",
            "Canada": "Toronto, Vancouver, Montreal, Calgary, Ottawa",
            "Australia": "Sydney, Melbourne, Brisbane, Perth, Adelaide",
            "France": "Paris, Lyon, Marseille, Toulouse, Bordeaux",
            "Netherlands": "Amsterdam, Rotterdam, The Hague, Utrecht, Eindhoven"
        }
        
        examples = city_examples.get(self.config["search_country"], "Any city")
        
        print(f"\nüìç –í –∫–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –∏—Å–∫–∞—Ç—å?")
        print(f"–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è {selected_country['name']}: {examples}")
        print("–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ")
        
        locations_input = input("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥(–∞): ").strip()
        if locations_input:
            locations = [loc.strip() for loc in locations_input.split(",") if loc.strip()]
            self.config["search_locations"] = locations
        else:
            self.config["search_locations"] = [self.config["search_country"]]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print(f"\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:")
        print(f"üåç –°—Ç—Ä–∞–Ω–∞: {selected_country['name']}")
        print(f"üéØ –í–∞–∫–∞–Ω—Å–∏—è: {', '.join(self.config['search_keywords'])}")
        print(f"üìç –õ–æ–∫–∞—Ü–∏–∏: {', '.join(self.config['search_locations'])}")
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {self.config['max_pages']} (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏? (Enter –∏–ª–∏ '–¥–∞'): ").strip()
        if confirm.lower() not in ['', 'yes', 'y', '–¥–∞', '–¥–∞']:
            print("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
            return False
        
        return True
    
    def ensure_data_directory(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
        os.makedirs("data", exist_ok=True)
    
    def load_previous_results(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if os.path.exists(self.results_file):
            try:
                with open(self.results_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return []
        return []
    
    def save_results(self, jobs: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if self.config["save_results"]:
            try:
                all_jobs = self.load_previous_results()
                existing_links = {job.get("link") for job in all_jobs}
                new_jobs = [job for job in jobs if job.get("link") not in existing_links]
                
                all_jobs.extend(new_jobs)
                
                with open(self.results_file, 'w', encoding='utf-8') as f:
                    json.dump(all_jobs, f, ensure_ascii=False, indent=2)
                
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(new_jobs)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π (–≤—Å–µ–≥–æ –≤ –±–∞–∑–µ: {len(all_jobs)})")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def search_jobs_safe(self) -> List[Dict]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        all_jobs = []
        
        print("\nüîç –ù–∞—á–∏–Ω–∞–µ–º –ë–ï–ó–û–ü–ê–°–ù–´–ô –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π...")
        print("üõ°Ô∏è –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –Ω–∏–∫–∞–∫–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫!")
        print("=" * 60)
        
        total_searches = len(self.config["search_keywords"]) * len(self.config["search_locations"])
        current_search = 0
        
        for keyword in self.config["search_keywords"]:
            for location in self.config["search_locations"]:
                current_search += 1
                print(f"\nüîç –ü–æ–∏—Å–∫ {current_search}/{total_searches}: '{keyword}' –≤ '{location}'")
                
                try:
                    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∞–ø–µ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    with FinalJoobleScaper(headless=False) as scraper:
                        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Ç–æ–ª—å–∫–æ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                        jobs = scraper.search_jobs(
                            keywords=keyword,
                            location=location,
                            max_pages=1  # –ñ–ï–°–¢–ö–û 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ù–ï–¢ –ë–õ–û–ö–ò–†–û–í–û–ö!
                        )
                        
                        if jobs:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(jobs)} –≤–∞–∫–∞–Ω—Å–∏–π")
                            all_jobs.extend(jobs)
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
                            print("üèÜ –õ—É—á—à–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ:")
                            for i, job in enumerate(jobs[:3], 1):
                                salary_info = f" - {job['salary']}" if job['salary'] != "–ù–µ —É–∫–∞–∑–∞–Ω–∞" else ""
                                print(f"   {i}. {job['title']}{salary_info}")
                        else:
                            print("‚ö†Ô∏è –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                            
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{keyword}' –≤ '{location}': {e}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                if current_search < total_searches:
                    print("‚è≥ –ü–∞—É–∑–∞ 8 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(8)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_jobs = self._remove_duplicates(all_jobs)
        
        print(f"\nüìä –ò–¢–û–ì–û: {len(unique_jobs)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
        if len(all_jobs) > len(unique_jobs):
            print(f"üìä –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(all_jobs) - len(unique_jobs)}")
        
        return unique_jobs
    
    def _remove_duplicates(self, jobs: List[Dict]) -> List[Dict]:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ"""
        seen_links = set()
        unique_jobs = []
        
        for job in jobs:
            link = job.get("link", "")
            if link and link not in seen_links:
                seen_links.add(link)
                unique_jobs.append(job)
        
        return unique_jobs
    
    def show_top_jobs(self, jobs: List[Dict], count: int = 10):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
        if not jobs:
            print("‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        print(f"\nüèÜ –¢–û–ü-{min(count, len(jobs))} –ù–ê–ô–î–ï–ù–ù–´–• –í–ê–ö–ê–ù–°–ò–ô:")
        print("=" * 80)
        
        for i, job in enumerate(jobs[:count], 1):
            print(f"\n{i}. üéØ {job['title']}")
            print(f"   üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {job['company']}")
            print(f"   üìç –õ–æ–∫–∞—Ü–∏—è: {job['location']}")
            print(f"   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {job['salary']}")
            print(f"   üìÖ –î–∞—Ç–∞: {job['date']}")
            print(f"   üîó {job['link'][:70]}...")
            
            if job['snippet'] and len(job['snippet']) > 10:
                print(f"   üìù {job['snippet'][:120]}...")
        
        if len(jobs) > count:
            print(f"\n... –∏ –µ—â–µ {len(jobs) - count} –≤–∞–∫–∞–Ω—Å–∏–π")
        
        print("=" * 80)
    
    def generate_smart_report(self, jobs: List[Dict]):
        """–£–º–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º"""
        print("\n" + "=" * 80)
        print("üìä –£–ú–ù–´–ô –û–¢–ß–ï–¢ JOBHUNTERBOT v2.1")
        print("=" * 80)
        
        print(f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üåç –°—Ç—Ä–∞–Ω–∞: {self.config.get('search_country', 'Deutschland')}")
        print(f"üéØ –ü–æ–∏—Å–∫: {', '.join(self.config['search_keywords'])}")
        print(f"üìç –õ–æ–∫–∞—Ü–∏–∏: {', '.join(self.config['search_locations'])}")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ: {len(jobs)} –≤–∞–∫–∞–Ω—Å–∏–π")
        
        if jobs:
            # –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç
            with_salary = [job for job in jobs if job.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞') != '–ù–µ —É–∫–∞–∑–∞–Ω–∞']
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–π
            companies = {}
            locations = {}
            
            for job in jobs:
                company = job.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                if company != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
                    companies[company] = companies.get(company, 0) + 1
                
                location = job.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                if location != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
                    locations[location] = locations.get(location, 0) + 1
            
            print(f"\nüìà –ê–ù–ê–õ–ò–ó:")
            print(f"üí∞ –í–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {len(with_salary)}/{len(jobs)} ({len(with_salary)/len(jobs)*100:.1f}%)")
            print(f"üè¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {len(companies)}")
            print(f"üìç –†–∞–∑–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π: {len(locations)}")
            
            # –ó–∞—Ä–ø–ª–∞—Ç—ã
            if with_salary:
                print(f"\nüí∞ –í–ê–ö–ê–ù–°–ò–ò –° –£–ö–ê–ó–ê–ù–ù–û–ô –ó–ê–†–ü–õ–ê–¢–û–ô:")
                for job in with_salary[:5]:
                    print(f"   ‚Ä¢ {job['title']} - {job['salary']}")
            
            # –¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–π
            if companies:
                top_companies = sorted(companies.items(), key=lambda x: x[1], reverse=True)[:5]
                print(f"\nüèÜ –¢–û–ü –ö–û–ú–ü–ê–ù–ò–ô:")
                for company, count in top_companies:
                    print(f"   ‚Ä¢ {company}: {count} –≤–∞–∫–∞–Ω—Å–∏–π")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–º–Ω—ã–π –æ—Ç—á–µ—Ç
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_file = f"data/smart_report_{timestamp}.txt"
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write(f"JobHunterBot v2.1 Smart Report\n")
                f.write(f"Generated: {datetime.now()}\n")
                f.write(f"Country: {self.config.get('search_country')}\n")
                f.write(f"Keywords: {', '.join(self.config['search_keywords'])}\n")
                f.write(f"Locations: {', '.join(self.config['search_locations'])}\n")
                f.write(f"Total jobs: {len(jobs)}\n")
                f.write(f"Jobs with salary: {len(with_salary)}\n\n")
                
                f.write("=== ALL JOBS ===\n\n")
                for i, job in enumerate(jobs, 1):
                    f.write(f"{i}. {job['title']}\n")
                    f.write(f"   Company: {job['company']}\n")
                    f.write(f"   Location: {job['location']}\n")
                    f.write(f"   Salary: {job['salary']}\n")
                    f.write(f"   Date: {job['date']}\n")
                    f.write(f"   Link: {job['link']}\n\n")
            
            print(f"üíæ –£–º–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        
        print("=" * 80)
    
    def run_smart_search(self):
        """–£–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫"""
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self.get_user_preferences():
            return []
        
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫...")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        jobs = self.search_jobs_safe()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if jobs:
            self.save_results(jobs)
            self.show_top_jobs(jobs, 15)
            self.generate_smart_report(jobs)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏?
            show_all = input(f"\n–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ {len(jobs)} –≤–∞–∫–∞–Ω—Å–∏–π? (y/n): ").strip().lower()
            if show_all in ['y', 'yes', '–¥–∞']:
                print(f"\nüîó –í–°–ï –°–°–´–õ–ö–ò –ù–ê –í–ê–ö–ê–ù–°–ò–ò:")
                for i, job in enumerate(jobs, 1):
                    salary_info = f" ({job['salary']})" if job['salary'] != "–ù–µ —É–∫–∞–∑–∞–Ω–∞" else ""
                    print(f"{i:2d}. {job['title']}{salary_info}")
                    print(f"     {job['link']}")
            
        else:
            print("‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
            print("   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≤—Å—é —Å—Ç—Ä–∞–Ω—É")
            print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É")
            print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ–∑–∂–µ")
        
        return jobs

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ JobHunterBot v2.1")
    print("üåç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É")
    print("üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
    
    bot = JobHunterBot()
    
    try:
        jobs = bot.run_smart_search()
        
        if jobs:
            print(f"\nüéâ –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(jobs)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
            print(f"üíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ data/")
            
            with_salary = len([j for j in jobs if j.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞') != '–ù–µ —É–∫–∞–∑–∞–Ω–∞'])
            if with_salary > 0:
                print(f"üí∞ –ò–∑ –Ω–∏—Ö —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {with_salary}")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()