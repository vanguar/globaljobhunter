from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
import time
import random
import os
from typing import Dict, List, Optional

class JobApplier:
    def __init__(self, headless: bool = False):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–ø—Ä–∞–≤—â–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
        """
        self.headless = headless
        self.driver = None
        self.wait = None
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤
        self.user_data = {
            "first_name": "–í–ª–∞–¥–∏–º–∏—Ä",
            "last_name": "–ò–≤–∞–Ω–æ–≤", 
            "email": "vladimir.ivanov@example.com",
            "phone": "+49 123 456789",
            "cover_letter": """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –≤–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è Python Developer. 

–£ –º–µ–Ω—è –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å:
- Python (Django, Flask, FastAPI)
- –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (PostgreSQL, MySQL)
- Git, Docker
- Frontend (HTML, CSS, JavaScript)

–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–í–ª–∞–¥–∏–º–∏—Ä –ò–≤–∞–Ω–æ–≤"""
        }
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤"""
        print("üìù –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤...")
        
        chrome_options = Options()
        
        if self.headless:
            chrome_options.add_argument("--headless")
        
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--window-size=1366,768")
        
        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.wait = WebDriverWait(self.driver, 15)
            print("‚úÖ –î—Ä–∞–π–≤–µ—Ä –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤ –≥–æ—Ç–æ–≤!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            raise
    
    def apply_to_job(self, job_url: str, job_title: str) -> Dict:
        """
        –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        
        Args:
            job_url: –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
            job_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
        """
        if not self.driver:
            self.setup_driver()
        
        result = {
            "job_title": job_title,
            "job_url": job_url,
            "status": "failed",
            "message": "",
            "applied_at": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
        try:
            print(f"üìù –ü–æ–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞: {job_title}")
            print(f"üîó URL: {job_url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∞–∫–∞–Ω—Å–∏–∏
            self.driver.get(job_url)
            time.sleep(random.uniform(3, 5))
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Å–∞–π—Ç–∞
            current_url = self.driver.current_url
            page_title = self.driver.title
            
            print(f"üìÑ –ü–æ–ø–∞–ª–∏ –Ω–∞: {page_title}")
            print(f"üåê –¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∞–π—Ç–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
            if "stepstone" in current_url.lower():
                result = self._apply_stepstone()
            elif "xing" in current_url.lower():
                result = self._apply_xing()
            elif "indeed" in current_url.lower():
                result = self._apply_indeed()
            elif "linkedin" in current_url.lower():
                result = self._apply_linkedin()
            else:
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
                result = self._apply_universal()
            
            result["job_title"] = job_title
            result["job_url"] = job_url
            result["applied_at"] = time.strftime("%Y-%m-%d %H:%M:%S")
            
        except Exception as e:
            result["message"] = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏: {str(e)}"
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        return result
    
    def _apply_universal(self) -> Dict:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
        print("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é...")
        
        try:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
            apply_buttons = self._find_apply_buttons()
            
            if not apply_buttons:
                return {"status": "no_apply_button", "message": "–ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å –Ω–∞ –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
            button = apply_buttons[0]
            button_text = button.text.strip()
            print(f"üéØ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É: '{button_text}'")
            
            button.click()
            time.sleep(random.uniform(2, 4))
            
            # –ò—â–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            form_filled = self._fill_application_form()
            
            if form_filled:
                return {"status": "success", "message": f"–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '{button_text}'"}
            else:
                return {"status": "partial", "message": f"–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, –Ω–æ —Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–∞–π—Ç."}
                
        except Exception as e:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –ø–æ–¥–∞—á–∏: {str(e)}"}
    
    def _find_apply_buttons(self) -> List:
        """–ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
        apply_selectors = [
            # –ù–µ–º–µ—Ü–∫–∏–µ –∫–Ω–æ–ø–∫–∏
            "//button[contains(text(), 'Bewerben')]",
            "//a[contains(text(), 'Bewerben')]",
            "//button[contains(text(), 'Jetzt bewerben')]",
            "//a[contains(text(), 'Jetzt bewerben')]",
            "//button[contains(text(), 'Bewerbung')]",
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
            "//button[contains(text(), 'Apply')]",
            "//a[contains(text(), 'Apply')]", 
            "//button[contains(text(), 'Apply now')]",
            "//a[contains(text(), 'Apply now')]",
            
            # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            "button[class*='apply']",
            "a[class*='apply']",
            "button[data-test*='apply']",
            ".apply-button",
            ".btn-apply"
        ]
        
        found_buttons = []
        
        for selector in apply_selectors:
            try:
                if selector.startswith("//"):
                    buttons = self.driver.find_elements(By.XPATH, selector)
                else:
                    buttons = self.driver.find_elements(By.CSS_SELECTOR, selector)
                
                for button in buttons:
                    if button.is_displayed() and button.is_enabled():
                        found_buttons.append(button)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: '{button.text.strip()}'")
                        
            except Exception as e:
                continue
        
        return found_buttons
    
    def _fill_application_form(self) -> bool:
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
        print("üìã –ò—â–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É...")
        
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
            time.sleep(2)
            
            # –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            form_filled = False
            
            # –ò–º—è
            name_fields = self._find_form_fields(["name", "vorname", "first", "firstName"])
            for field in name_fields:
                self._fill_field(field, self.user_data["first_name"])
                form_filled = True
            
            # –§–∞–º–∏–ª–∏—è
            lastname_fields = self._find_form_fields(["lastname", "nachname", "last", "lastName", "surname"])
            for field in lastname_fields:
                self._fill_field(field, self.user_data["last_name"])
                form_filled = True
            
            # Email
            email_fields = self._find_form_fields(["email", "e-mail", "mail"])
            for field in email_fields:
                self._fill_field(field, self.user_data["email"])
                form_filled = True
            
            # –¢–µ–ª–µ—Ñ–æ–Ω
            phone_fields = self._find_form_fields(["phone", "telefon", "tel", "mobile"])
            for field in phone_fields:
                self._fill_field(field, self.user_data["phone"])
                form_filled = True
            
            # –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
            message_fields = self._find_form_fields(["message", "cover", "letter", "anschreiben", "motivation"])
            for field in message_fields:
                self._fill_field(field, self.user_data["cover_letter"])
                form_filled = True
            
            if form_filled:
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                submit_buttons = self._find_submit_buttons()
                if submit_buttons:
                    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...")
                    submit_buttons[0].click()
                    time.sleep(2)
                    return True
            
            return form_filled
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {e}")
            return False
    
    def _find_form_fields(self, field_keywords: List[str]) -> List:
        """–ü–æ–∏—Å–∫ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        fields = []
        
        for keyword in field_keywords:
            try:
                # –ü–æ–∏—Å–∫ –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
                selectors = [
                    f"input[name*='{keyword}']",
                    f"input[id*='{keyword}']",
                    f"input[placeholder*='{keyword}']",
                    f"textarea[name*='{keyword}']",
                    f"textarea[id*='{keyword}']",
                    f"textarea[placeholder*='{keyword}']"
                ]
                
                for selector in selectors:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        if element.is_displayed() and element.is_enabled():
                            fields.append(element)
                            
            except:
                continue
        
        return fields
    
    def _find_submit_buttons(self) -> List:
        """–ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã"""
        submit_selectors = [
            "//button[@type='submit']",
            "//input[@type='submit']",
            "//button[contains(text(), 'Senden')]",
            "//button[contains(text(), 'Absenden')]", 
            "//button[contains(text(), 'Submit')]",
            "//button[contains(text(), 'Send')]",
            ".btn-submit",
            "button[class*='submit']"
        ]
        
        buttons = []
        for selector in submit_selectors:
            try:
                if selector.startswith("//"):
                    elements = self.driver.find_elements(By.XPATH, selector)
                else:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                for element in elements:
                    if element.is_displayed() and element.is_enabled():
                        buttons.append(element)
            except:
                continue
                
        return buttons
    
    def _fill_field(self, field, value: str):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã"""
        try:
            field.clear()
            field.send_keys(value)
            time.sleep(random.uniform(0.5, 1))
            print(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ: {value[:20]}...")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è: {e}")
    
    def batch_apply(self, job_list: List[Dict]) -> List[Dict]:
        """–ú–∞—Å—Å–æ–≤–∞—è –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫"""
        results = []
        
        print(f"üìù –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –ø–æ–¥–∞—á—É –∑–∞—è–≤–æ–∫ –Ω–∞ {len(job_list)} –≤–∞–∫–∞–Ω—Å–∏–π...")
        
        for i, job in enumerate(job_list, 1):
            print(f"\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é {i}/{len(job_list)}")
            
            result = self.apply_to_job(job["link"], job["title"])
            results.append(result)
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['status']} - {result['message']}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏
            if i < len(job_list):
                pause = random.uniform(10, 20)
                print(f"‚è≥ –ü–∞—É–∑–∞ {pause:.1f} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–∏...")
                time.sleep(pause)
        
        return results
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.driver:
            self.driver.quit()
            print("üîÑ –ë—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤ –∑–∞–∫—Ä—ã—Ç")
    
    def __enter__(self):
        return self
        
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()

# –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫
if __name__ == "__main__":
    print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥–∞—á—É –∑–∞—è–≤–æ–∫...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–∏–∑ –Ω–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
    test_jobs = [
        {
            "title": "Python Software Developer (m/w/d)",
            "link": "https://de.jooble.org/desc/4764556835030060670?ckey=python-developer&rgn=-1&pos=13&groupId=23225&elckey=8874001905807250025&pageType=20&p=1&sid=-5635208274577246269&jobAge=607&relb=110&brelb=110&bscr=14962.41979583679&scr=14962.41979583679&searchTestGroup=1_2_1&iid=3912385943312688486"
        }
    ]
    
    with JobApplier(headless=False) as applier:
        results = applier.batch_apply(test_jobs)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–î–ê–ß–ò –ó–ê–Ø–í–û–ö:")
        for result in results:
            print(f"üìù {result['job_title']}")
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {result['status']}")
            print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {result['message']}")
            print(f"   ‚è∞ –í—Ä–µ–º—è: {result['applied_at']}")