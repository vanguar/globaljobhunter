#!/usr/bin/env python3
import os
import sys
from flask_migrate import Migrate, init, migrate as create_migration, upgrade
from sqlalchemy import inspect, text

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import app, db

migrate_obj = Migrate(app, db)

def check_db_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î –∏ –º–∏–≥—Ä–∞—Ü–∏–π"""
    try:
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            with db.engine.connect() as conn:
                print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            inspector = inspect(db.engine)
            tables = inspector.get_table_names()
            print(f"üìä –¢–∞–±–ª–∏—Ü –≤ –ë–î: {len(tables)}")
            
            if tables:
                print(f"üìã –¢–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
                try:
                    with db.engine.connect() as conn:
                        if 'subscriber' in tables:
                            result = conn.execute(text("SELECT COUNT(*) as count FROM subscriber"))
                            count = result.fetchone()[0]
                            print(f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}")
                        
                        if 'email_log' in tables:
                            result = conn.execute(text("SELECT COUNT(*) as count FROM email_log"))
                            count = result.fetchone()[0]
                            print(f"üìß Email –ª–æ–≥–æ–≤: {count}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            else:
                print("üì≠ –ë–î –ø—É—Å—Ç–∞—è")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º migrations
            migrations_dir = os.path.join(os.getcwd(), 'migrations')
            if os.path.exists(migrations_dir):
                versions_dir = os.path.join(migrations_dir, 'versions')
                if os.path.exists(versions_dir):
                    migration_files = [f for f in os.listdir(versions_dir) if f.endswith('.py')]
                    print(f"üìÇ –§–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π: {len(migration_files)}")
                else:
                    print("‚ùå –ü–∞–ø–∫–∞ migrations/versions/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print("‚ùå –ü–∞–ø–∫–∞ migrations/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python migrate.py status    - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î")
        print("  python migrate.py init      - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π")  
        print("  python migrate.py migrate   - —Å–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
        print("  python migrate.py upgrade   - –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π")
        print("  python migrate.py backup    - —Å–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ –ë–î")
        sys.exit(1)
    
    command = sys.argv[1]
    
    try:
        with app.app_context():
            if command == 'status':
                check_db_status()
                
            elif command == 'init':
                if os.path.exists('migrations'):
                    print("‚ö†Ô∏è –ü–∞–ø–∫–∞ migrations —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    init()
                    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                    
            elif command == 'migrate':
                message = sys.argv[2] if len(sys.argv) > 2 else "Auto migration"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                import tempfile
                with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
                    try:
                        create_migration(message=message)
                        print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {message}")
                    except Exception as e:
                        if "No changes in schema detected" in str(e):
                            print("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ö–µ–º–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                        else:
                            raise
                        
            elif command == 'upgrade':
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
                check_db_status()
                print("\nüîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...")
                upgrade()
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                check_db_status()
                
            elif command == 'backup':
                # –ü—Ä–æ—Å—Ç–æ–π –±–µ–∫–∞–ø (—Ç–æ–ª—å–∫–æ –¥–ª—è SQLite)
                if 'sqlite' in str(db.engine.url):
                    import shutil
                    from datetime import datetime
                    
                    db_file = str(db.engine.url).replace('sqlite:///', '')
                    backup_name = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
                    
                    shutil.copy2(db_file, backup_name)
                    print(f"‚úÖ –ë–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_name}")
                else:
                    print("‚ö†Ô∏è –ë–µ–∫–∞–ø –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è SQLite")
                    
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)