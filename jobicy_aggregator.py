#!/usr/bin/env python3
"""
Jobicy API Aggregator - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
–° —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º rate limits (1 –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Å)
"""

import requests
import time
import json
import os
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional
from dataclasses import dataclass

@dataclass
class JobVacancy:
    id: str
    title: str
    company: str
    location: str
    salary: Optional[str]
    description: str
    apply_url: str
    source: str
    posted_date: str
    country: str
    job_type: Optional[str] = None
    language_requirement: str = "unknown"
    refugee_friendly: bool = False

class JobicyAggregator:
    """
    Jobicy ‚Äî –æ–¥–∏–Ω –æ–±—â–∏–π –¥–∞–º–ø —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.
    –õ–æ–≥–∏–∫–∞:
      - –ö–µ—à–∏—Ä—É–µ–º JSON-–¥–∞–º–ø –Ω–∞ N —á–∞—Å–æ–≤ (JOBICY_CACHE_HOURS > CACHE_TTL_HOURS > 24).
      - –ù–∞ –∫–∞–∂–¥–æ–º –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º.
      - –û—Ç–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ç—á–∞–º–∏ –ø–æ 5 —à—Ç., —É–≤–∞–∂–∞–µ–º cancel_check().
    """
    def __init__(self):
        self.source_name = "Jobicy"
        self.base_url = "https://jobicy.com/api/v2/remote-jobs"
        self.cache_file = "shared_jobicy_cache.json"

        # TTL –∫–µ—à–∞
        try:
            self.cache_duration_hours = int(os.getenv('JOBICY_CACHE_HOURS', os.getenv('CACHE_TTL_HOURS', '24')))
        except Exception:
            self.cache_duration_hours = 24

    # === –ü–£–ë–õ–ò–ß–ù–´–ô –ü–û–ò–°–ö ===
    def search_jobs(self, preferences: Dict, progress_callback=None, cancel_check=None) -> List[JobVacancy]:
        """
        Jobicy: –±–µ—Ä—ë–º –æ–±—â–∏–π –¥–∞–º–ø, –Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¢–û–õ–¨–ö–û –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º.
        –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –∏—Ö –∞–Ω–≥–ª. —Ç–µ—Ä–º—ã –±–µ—Ä—ë–º –∏–∑ self.specific_jobs_map (–µ—Å–ª–∏ –µ—Å—Ç—å).
        """
        selected = preferences.get('selected_jobs') or []
        if not selected:
            return []

        try:
            if cancel_check and cancel_check():
                return []
            all_jobs_raw = self._fetch_jobs_cached()
            filtered = self._filter_relevant_jobs(
                jobs_data=all_jobs_raw,
                preferences=preferences,
                progress_callback=progress_callback,
                cancel_check=cancel_check,
            )
            print(f"‚úÖ {self.source_name}: —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π ‚Äî {len(filtered)}")
            return filtered
        except Exception as e:
            print(f"‚ùå {self.source_name}: –æ—à–∏–±–∫–∞ ‚Äî {e}")
            return []

        
    def _filter_relevant_jobs(
    self,
    jobs_data: List[Dict[str, Any]],
    preferences: Dict,
    progress_callback=None,
    cancel_check=None
) -> List[JobVacancy]:
        """
        –§–∏–ª—å—Ç—Ä —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:
        ‚Ä¢ –ë–µ—Ä—ë–º EN-—Ç–µ—Ä–º—ã –∏–∑ nested self.specific_jobs_map (–∫–∞—Ç–µ–≥–æ—Ä–∏—è -> {RU: [EN...]}).
        ‚Ä¢ –ï—Å–ª–∏ EN-—Ç–µ—Ä–º–æ–≤ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º (Jobicy –ø–ª–æ—Ö–æ –º–∞—Ç—á–∏—Ç—Å—è –ø–æ RU).
        ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–¥–∞—ë–º –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ 5 –≤–∞–∫–∞–Ω—Å–∏–π (—Å–ø–∏—Å–∫–æ–º JobVacancy).
        """
        selected_jobs: List[str] = preferences.get("selected_jobs") or []
        if not selected_jobs:
            return []

        import re
        positive_terms: set[str] = set()
        specific_map: Dict[str, Dict[str, List[str]]] = getattr(self, "specific_jobs_map", {}) or {}

        # —Å–æ–±–∏—Ä–∞–µ–º –∞–Ω–≥–ª. –∫–ª—é—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö RU-–ø—Ä–æ—Ñ–µ—Å—Å–∏–π
        for ru_title in selected_jobs:
            terms = None
            for cat_dict in specific_map.values():
                if isinstance(cat_dict, dict) and ru_title in cat_dict:
                    terms = cat_dict.get(ru_title)
                    break
            if terms:
                for t in terms:
                    t = (t or "").strip()
                    if t and re.match(r'^[A-Za-z0-9 .,+\-]+$', t):
                        positive_terms.add(t.lower())

        if not positive_terms:
            return []

        relevant: List[JobVacancy] = []
        batch: List[JobVacancy] = []

        for raw in jobs_data:
            if cancel_check and cancel_check():
                break

            title = (raw.get("jobTitle") or raw.get("title") or "").strip()
            desc  = (raw.get("jobDescription") or raw.get("description") or "").strip()
            tl, dl = title.lower(), desc.lower()

            if not any(term in tl or term in dl for term in positive_terms):
                continue

            job = self._normalize_job(raw)
            if not job:
                continue

            relevant.append(job)
            batch.append(job)

            if progress_callback and len(batch) >= 5:
                try:
                    progress_callback(list(batch))  # –≤–∞–∂–Ω–æ: —Å–ø–∏—Å–æ–∫ JobVacancy
                except Exception:
                    pass
                batch.clear()

        if progress_callback and batch:
            try:
                progress_callback(list(batch))
            except Exception:
                pass

        return relevant




    # === –ö–ï–®/–ê–ü–ò ===
    def _fetch_jobs_cached(self) -> List[Dict]:
        """
        –ß—Ç–µ–Ω–∏–µ –¥–∞–º–ø–∞ Jobicy —Å –∫–µ—à–µ–º.
        –ü—Ä–∞–≤–∏–ª–∞:
        ‚Ä¢ –µ—Å–ª–∏ –∫–µ—à –µ—Å—Ç—å –∏ –ù–ï –ø—É—Å—Ç–æ–π ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ;
        ‚Ä¢ –µ—Å–ª–∏ –∫–µ—à –ø—É—Å—Ç–æ–π ([]) –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª/–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí –∏–¥—ë–º –≤ API;
        ‚Ä¢ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–∑ API –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º.
        """
        cached = self._load_cache()
        if isinstance(cached, list):
            if cached:  # –Ω–µ–ø—É—Å—Ç–æ–π –∫–µ—à ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º
                print(f"üíæ {self.source_name}: Cache HIT, –∑–∞–ø–∏—Å–µ–π {len(cached)}")
                return cached
            else:
                print(f"üíæ {self.source_name}: Cache HIT (empty), –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ API...")

        # Cache MISS / empty ‚Üí –∑–∞–ø—Ä–æ—Å –≤ API
        print(f"üåê {self.source_name}: Cache MISS ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–º–ø")
        try:
            r = requests.get(self.base_url, timeout=15)
            if r.status_code != 200:
                print(f"‚ùå {self.source_name}: HTTP {r.status_code}")
                return []
            data = r.json() or {}
            jobs = data.get('jobs') or []

            # –í–∞–∂–Ω–æ: –ù–ï –∫–µ—à–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
            if jobs:
                self._save_cache(jobs)
                print(f"üì• {self.source_name}: –ø–æ–ª—É—á–µ–Ω–æ {len(jobs)}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–µ—à")
            else:
                print(f"üì• {self.source_name}: –ø–æ–ª—É—á–µ–Ω–æ 0 –∑–∞–ø–∏—Å–µ–π (not cached)")

            return jobs
        except requests.Timeout:
            print(f"‚ö†Ô∏è {self.source_name}: —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return []
        except Exception as e:
            print(f"‚ùå {self.source_name}: –æ—à–∏–±–∫–∞ API: {e}")
            return []


    def _load_cache(self) -> Optional[List[Dict]]:
        """–ß—Ç–µ–Ω–∏–µ –∫–µ—à–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π TTL."""
        try:
            if not os.path.exists(self.cache_file):
                return None
            with open(self.cache_file, 'r', encoding='utf-8') as f:
                cache = json.load(f)
            ts = datetime.fromisoformat(cache.get('timestamp'))
            if datetime.now() - ts < timedelta(hours=self.cache_duration_hours):
                return cache.get('jobs') or []
            print(f"‚è∞ {self.source_name}: –∫–µ—à —É—Å—Ç–∞—Ä–µ–ª ({ts}), –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return None
        except Exception as e:
            print(f"‚ö†Ô∏è {self.source_name}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞: {e}")
            return None

    def _save_cache(self, jobs: List[Dict]) -> None:
        try:
            payload = {'timestamp': datetime.now().isoformat(), 'jobs': jobs}
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(payload, f, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è {self.source_name}: –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–µ—à–∞: {e}")

    # === –£–¢–ò–õ–ò–¢–´ –§–ò–õ–¨–¢–†–ê ===
    def _is_it_related(self, job_name: str) -> bool:
        remote_friendly = [
            # IT
            'python', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            '–¥–∞—Ç–∞-–∞–Ω–∞–ª–∏—Ç–∏–∫', '—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫',
            'it', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            # –û—Ñ–∏—Å–Ω—ã–µ (—á–∞—Å—Ç–æ —É–¥–∞–ª—ë–Ω–Ω—ã–µ)
            '–º–µ–Ω–µ–¥–∂–µ—Ä', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–¥–∏–∑–∞–π–Ω', '–∫–æ–Ω—Ç–µ–Ω—Ç', '—Å–µ–æ',
            '–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫', '–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä', '–∞–Ω–∞–ª–∏—Ç–∏–∫', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
            'hr', '—Ä–µ–∫—Ä—É—Ç–µ—Ä', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–±—É—Ö–≥–∞–ª—Ç–µ—Ä', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
            '–ø—Ä–æ–¥–∞–∂–∏', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä', '–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', '—Å–µ–∫—Ä–µ—Ç–∞—Ä—å',
            '–∂—É—Ä–Ω–∞–ª–∏—Å—Ç', '—Ä–µ–¥–∞–∫—Ç–æ—Ä', 'smm', 'pr', '—Ä–µ–∫–ª–∞–º–∞'
        ]
        return any(k in job_name.lower() for k in remote_friendly)

    def _build_keywords(self, it_jobs: List[str]) -> tuple[list[str], list[str]]:
        """
        –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä—É (include, exclude), –¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ.
        """
        include: list[str] = []
        exclude: list[str] = [
            'sales', 'marketing', 'customer service', 'support representative',
            'account executive', 'business development'
        ]
        for name in it_jobs:
            nl = name.lower().strip()
            if nl:
                include.append(nl)
        if not include:
            include = ['developer']
        return include, exclude

    # === –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø ===
    def _normalize_job(self, raw_job: Dict) -> Optional[JobVacancy]:
        try:
            job_id = str(raw_job.get('id', '') or '')
            title = raw_job.get('jobTitle', '') or 'No title'
            company = raw_job.get('companyName', '') or 'No company'
            description = raw_job.get('jobExcerpt', '') or ''
            apply_url = raw_job.get('url', '') or ''
            posted_date = raw_job.get('pubDate', '') or 'Unknown'

            return JobVacancy(
                id=f"jobicy_{job_id}",
                title=title,
                company=company,
                location="Remote (–£–¥–∞–ª–µ–Ω–Ω–æ)",
                salary=None,
                description=description,
                apply_url=apply_url,
                source=self.source_name,
                posted_date=posted_date,
                country="Remote",
                job_type="Remote",
                language_requirement="unknown",
                refugee_friendly=False
            )
        except Exception as e:
            print(f"‚ùå {self.source_name}: –æ—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return None
