#!/usr/bin/env python3
"""
Remotive Aggregator for GlobalJobHunter v1.3
"""

import os
import requests
import time
from datetime import datetime
from typing import List, Dict, Optional
import hashlib

# --- –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ adzuna_aggregator ---
from adzuna_aggregator import JobVacancy, CacheManager, RateLimiter

# --- –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã ---
from base_aggregator import BaseJobAggregator

try:
    from adzuna_aggregator import RateLimitedError, yield_briefly
except Exception:
    class RateLimitedError(Exception):
        pass
    import random, time
    def yield_briefly(base_ms: int = 200, jitter_ms: int = 120, cancel_check=None) -> bool:
        delay = (base_ms + (random.randint(0, jitter_ms) if jitter_ms > 0 else 0)) / 1000.0
        end = time.time() + delay
        while True:
            remain = end - time.time()
            if remain <= 0:
                break
            time.sleep(min(0.05, remain))
        return True


class RemotiveAggregator(BaseJobAggregator):
    """
    –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ Remotive API.
    - –£–õ–£–ß–®–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏.
    - –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è Rate Limit.
    - –£–ª—É—á—à–µ–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω Rate Limiter.
    """
    
    # --- –ù–û–í–û–ï: –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—â–µ–º –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ ---
    NON_REMOTE_JOBS = {
        # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –¥–æ—Å—Ç–∞–≤–∫–∞
        '–í–æ–¥–∏—Ç–µ–ª—å —Ç–∞–∫—Å–∏', '–í–æ–¥–∏—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B', '–í–æ–¥–∏—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ C',
        '–í–æ–¥–∏—Ç–µ–ª—å-–∫—É—Ä—å–µ—Ä', '–ö—É—Ä—å–µ—Ä –ø–µ—à–∫–æ–º', '–ö—É—Ä—å–µ—Ä-–¥–æ—Å—Ç–∞–≤—â–∏–∫ –µ–¥—ã',
        '–í–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ–±—É—Å–∞', '–í–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–∑–æ–≤–∏–∫–∞',
        # –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å
        '–ê–≤—Ç–æ–º–µ—Ö–∞–Ω–∏–∫', '–ê–≤—Ç–æ—Å–ª–µ—Å–∞—Ä—å', '–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–Ω–∏–∫', '–î–∏–∞–≥–Ω–æ—Å—Ç',
        '–ú–∞—Å—Ç–µ—Ä-–ø—Ä–∏—ë–º—â–∏–∫', '–ö—É–∑–æ–≤—â–∏–∫', '–ú–∞–ª—è—Ä –ø–æ –∞–≤—Ç–æ',
        # –ê–ó–° –∏ –¢–æ–ø–ª–∏–≤–æ
        '–ó–∞–ø—Ä–∞–≤—â–∏–∫ –Ω–∞ –ê–ó–°', '–û–ø–µ—Ä–∞—Ç–æ—Ä –ê–ó–°', '–ö–∞—Å—Å–∏—Ä –Ω–∞ –ê–ó–°',
        # –ù–µ—Ñ—Ç—å –∏ –≥–∞–∑
        '–û–ø–µ—Ä–∞—Ç–æ—Ä –¥–æ–±—ã—á–∏', '–ü–æ–º–æ—â–Ω–∏–∫ –±—É—Ä–∏–ª—å—â–∏–∫–∞', '–†–∞–±–æ—á–∏–π –Ω–µ—Ñ—Ç–µ–±–∞–∑—ã',
        # –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
        '–°—Ç—Ä–æ–∏—Ç–µ–ª—å-—Ä–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π', '–ì—Ä—É–∑—á–∏–∫', '–°–∫–ª–∞–¥—Å–∫–æ–π —Ä–∞–±–æ—Ç–Ω–∏–∫',
        '–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π', '–†–∞–±–æ—á–∏–π –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ',
        # –û–±—â–µ–ø–∏—Ç –∏ —Å–µ—Ä–≤–∏—Å
        '–û—Ñ–∏—Ü–∏–∞–Ω—Ç', '–ë–∞—Ä–º–µ–Ω', '–ü–æ–≤–∞—Ä', '–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ–≤–∞—Ä–∞', '–ü–æ—Å—É–¥–æ–º–æ–π—â–∏–∫',
        '–ö–∞—Å—Å–∏—Ä', '–ü—Ä–æ–¥–∞–≤–µ—Ü',
        # –°–µ—Ä–≤–∏—Å –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        '–£–±–æ—Ä—â–∏–∫', '–°–∞–¥–æ–≤–Ω–∏–∫', '–î–æ–º—Ä–∞–±–æ—Ç–Ω–∏—Ü–∞', '–ú–∞—Å—Å–∞–∂–∏—Å—Ç',
        # –£—Ö–æ–¥ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞ (—Ç—Ä–µ–±—É—é—â–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è)
        '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞', '–°–∏–¥–µ–ª–∫–∞', '–ù—è–Ω—è', '–ì—É–≤–µ—Ä–Ω–∞–Ω—Ç–∫–∞', '–£—Ö–æ–¥ –∑–∞ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞–º–∏'
    }
    
    # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def _query_remotive(self, terms, progress_callback=None, cancel_check=None):
        """
        –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ Remotive: —á–µ—Ä–µ–∑ _fetch_jobs.
        """
        params = {}
        if isinstance(terms, list):
            # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ‚Äî —Å–∫–ª–µ–∏–≤–∞–µ–º –≤ —Å—Ç—Ä–æ–∫—É
            params['search'] = " ".join(terms)
        else:
            params['search'] = str(terms)

        return self._fetch_jobs(params)

    
    def __init__(self, specific_jobs_map: Dict, cache_duration_hours: Optional[int] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Remotive.
        TTL: REMOTIVE_CACHE_HOURS > CACHE_TTL_HOURS > 24 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
        """
        super().__init__(source_name='Remotive')
        self.cooldown_until = 0
        self.base_url = "https://remotive.com/api/remote-jobs"
        self.specific_jobs_map = specific_jobs_map

        # TTL –∫–µ—à–∞ (—á–∞—Å—ã)
        if cache_duration_hours is None:
            try:
                cache_duration_hours = int(os.getenv('REMOTIVE_CACHE_HOURS', os.getenv('CACHE_TTL_HOURS', '24')))
            except Exception:
                cache_duration_hours = 24

        self.cache_manager = CacheManager(cache_duration_hours=cache_duration_hours)
        self.rate_limiter = RateLimiter(requests_per_minute=2)

        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–π ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏–π Remotive
        self.job_to_category_map = {
            'python developer': 'software-dev',
            'web developer': 'software-dev',
            'programmer': 'software-dev',
            'software developer': 'software-dev',
            'qa engineer': 'qa',
            'software tester': 'qa',
            'data analyst': 'data',
            'data scientist': 'data',
            'designer': 'design',
            'product manager': 'product',
            'manager': 'management',
            'sales assistant': 'sales-marketing',
            'marketer': 'sales-marketing',
            'recruiter': 'hr',
            'customer support': 'customer-service'
        }

        print(f"‚úÖ Remotive Aggregator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (TTL={cache_duration_hours}—á, RL=2/min).")


    def get_supported_countries(self) -> Dict[str, Dict]:
        return {}

    def search_jobs(self, preferences: Dict, progress_callback=None, cancel_check=None) -> List[JobVacancy]:
        """
        Remotive: –∏—â–µ–º –¢–û–õ–¨–ö–û –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º.
        –ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ (NON_REMOTE_JOBS) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é.
        """
        all_jobs: List[JobVacancy] = []

        selected = preferences.get('selected_jobs') or []
        if not selected:
            return []

        # —Ç–æ–ª—å–∫–æ —É–¥–∞–ª—ë–Ω–Ω–æ –ø—Ä–∏–≥–æ–¥–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        selected = [j for j in selected if j not in self.NON_REMOTE_JOBS]
        if not selected:
            print("‚ÑπÔ∏è Remotive: —Å—Ä–µ–¥–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π")
            return []

        try:
            # –¥–ª—è –∫–∞–∂–¥–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å—Ç—Ä–æ–∏–º –Ω–∞–±–æ—Ä –∞–Ω–≥–ª. —Ç–µ—Ä–º–æ–≤
            for ru_title in selected:
                if cancel_check and cancel_check():
                    break

                terms = self._get_english_keywords(ru_title)
                if not terms:
                    continue

                # –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å Remotive ‚Äî —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä search / category
                jobs = self._query_remotive(terms, progress_callback=progress_callback, cancel_check=cancel_check)
                if jobs:
                    all_jobs.extend(jobs)

        except RateLimitedError:
            print(f"‚õî {self.source_name}: –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ cooldown (429).")
        except Exception as e:
            print(f"‚ùå {self.source_name}: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ ‚Äî {e}")

        print(f"‚úÖ {self.source_name}: –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ: {len(all_jobs)} –≤–∞–∫–∞–Ω—Å–∏–π.")
        return self._deduplicate_jobs(all_jobs)


    def _get_english_keywords(self, russian_job_title: str) -> List[str]:
        for category in self.specific_jobs_map.values():
            jobs = category.get(russian_job_title)
            if jobs:
                # –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 8 –Ω–∞–∏–±–æ–ª–µ–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ä–º–æ–≤
                return [t for t in jobs if t][:8]
        return []


    def _fetch_jobs(self, params: Dict) -> List[JobVacancy]:
        """
        –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ Remotive (—Å –∫–µ—à–µ–º).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç list[JobVacancy]. –ü—Ä–∏ 429 –±—Ä–æ—Å–∞–µ—Ç RateLimitedError.
        """
        # –µ—Å–ª–∏ —É–∂–µ –≤ cooldown ‚Äî –Ω–µ —Ö–æ–¥–∏–º
        now = time.time()
        if getattr(self, "cooldown_until", 0) > now:
            left = int(self.cooldown_until - now)
            print(f"‚õî {self.source_name}: cooldown –µ—â—ë {left}s ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {params}.")
            raise RateLimitedError("REMOTIVE_COOLDOWN")

        # –∫–µ—à –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∑–∞–ø—Ä–æ—Å–∞
        cached = self.cache_manager.get_cached_result(params)
        if cached is not None:
            tag = params.get('search') or params.get('category')
            print(f"    üíæ Cache HIT Remotive –¥–ª—è '{tag}': {len(cached)}")
            return cached

        # –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç–µ—Ä
        self.rate_limiter.wait_if_needed()

        tag = params.get('search') or params.get('category')
        try:
            r = requests.get(self.base_url, params=params, timeout=10)
            if r.status_code == 200:
                data = r.json() or {}
                jobs_raw = data.get('jobs') or []
                out: List[JobVacancy] = []
                for raw in jobs_raw:
                    j = self._normalize_job_data(raw, tag or "")
                    if j:
                        out.append(j)
                self.cache_manager.cache_result(params, out)
                print(f"    üåê Remotive '{tag}': +{len(out)} (cached)")
                return out

            if r.status_code == 429:
                cooldown = int(os.getenv("REMOTIVE_COOLDOWN_SEC", "120"))
                self.cooldown_until = time.time() + cooldown
                print(f"‚õî Remotive 429 ‚Üí cooldown {cooldown}s –¥–ª—è '{tag}'")
                raise RateLimitedError("REMOTIVE_RATE_LIMIT")

            print(f"‚ùå {self.source_name} HTTP {r.status_code}: {r.text[:200]}")
            return []

        except requests.Timeout:
            print(f"‚ö†Ô∏è {self.source_name}: —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è '{tag}'")
            return []
        except RateLimitedError:
            raise
        except Exception as e:
            print(f"‚ùå {self.source_name}: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ '{tag}': {e}")
            return []


    def _normalize_job_data(self, raw_job: Dict, search_term: str) -> Optional[JobVacancy]:
        try:
            title = raw_job.get('title', '')
            description = raw_job.get('description', '')
            
            url = raw_job.get('url')
            if not url:
                return None
            job_id = hashlib.md5(url.encode()).hexdigest()

            date_str = raw_job.get('publication_date', '')
            try:
                posted_date = datetime.fromisoformat(date_str.replace('Z', '+00:00')).strftime('%Y-%m-%d')
            except (ValueError, TypeError):
                posted_date = datetime.now().strftime('%Y-%m-%d')

            return JobVacancy(
                id=f"remotive_{job_id}",
                title=title,
                company=raw_job.get('company_name', 'Not specified'),
                location=raw_job.get('candidate_required_location', 'Worldwide'),
                salary=raw_job.get('salary'),
                description=description,
                apply_url=url,
                source=self.source_name,
                posted_date=posted_date,
                country='Remote',
                job_type=raw_job.get('job_type'),
                language_requirement=self.determine_language_requirement(title, description),
                refugee_friendly=self.is_refugee_friendly(title, description, search_term)
            )
        except Exception as e:
            print(f"‚ö†Ô∏è {self.source_name}: –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
            return None

    def is_relevant_job(self, job_title: str, job_description: str, search_term: str) -> bool:
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å."""
        if search_term in self.job_to_category_map.values():
             return True
        
        search_keywords = search_term.lower().split()
        title_lower = job_title.lower()
        return any(keyword in title_lower for keyword in search_keywords)

    def _deduplicate_jobs(self, jobs: List[JobVacancy]) -> List[JobVacancy]:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ URL –≤–∞–∫–∞–Ω—Å–∏–∏."""
        seen = set()
        unique_jobs = []
        for job in jobs:
            if job.apply_url not in seen:
                seen.add(job.apply_url)
                unique_jobs.append(job)
        return unique_jobs