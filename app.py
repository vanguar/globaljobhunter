#!/usr/bin/env python3
"""
GlobalJobHunter Web Interface v3.3 - –° –ö–ï–®–ò–†–û–í–ê–ù–ò–ï–ú
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —É–º–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
"""

import os, sys
os.environ.setdefault('PYTHONUNBUFFERED', '1')
try:
    sys.stdout.reconfigure(line_buffering=True)
    sys.stderr.reconfigure(line_buffering=True)
except Exception:
    pass
import json
import time
from datetime import datetime
from flask import Flask, render_template, request, jsonify, session, redirect, url_for, flash
from dotenv import load_dotenv
from datetime import datetime, timedelta  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ timedelta!
from collections import defaultdict        # ‚Üê –î–û–ë–ê–í–ò–¢–¨ —ç—Ç–æ!
import secrets
import uuid
from dataclasses import asdict
from flask import Flask, render_template, request, jsonify, session, redirect, url_for, flash, render_template_string,  Response
from email_service import mail, send_welcome_email, send_preferences_update_email, send_job_notifications, run_scheduled_notifications

# –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –ü–û–°–õ–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
from flask_mail import Mail
from database import db, Subscriber, EmailLog  
from email_service import mail, send_welcome_email, send_preferences_update_email
from flask_migrate import Migrate
from pathlib import Path
import time
from sqlalchemy import func
from datetime import datetime, timezone

from threading import Thread
import schedule
SUPPORTED_LANGS = {'ru', 'uk', 'en'}
from flask import request

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
from adzuna_aggregator import GlobalJobAggregator, JobVacancy
from careerjet_aggregator import CareerjetAggregator
from remotive_aggregator import RemotiveAggregator
# === Live progress state (–¥–ª—è –∂–∏–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏) ===
active_searches = {}  # sid -> state dict

import threading, inspect
from dataclasses import asdict
from pathlib import Path
import time

from flask import Flask, render_template
# === —Ç—Ä–µ–∫–∏–Ω–≥-–ª–æ–≥–∏–∫–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏) ===
from analytics import analytics_bp, log_search_click, pretty_json, h as html_escape


app = Flask(__name__)
app.register_blueprint(analytics_bp)

# === SEO: robots.txt –∏ sitemap.xml (AUTO) ==========================
# –Ø–≤–Ω–æ —É–∫–∞–∂–µ–º –≤–∞–∂–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ URL, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏–º –≤–∏–¥–µ—Ç—å –≤ –∏–Ω–¥–µ–∫—Å–µ –≤—Å–µ–≥–¥–∞.
# –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å /support ‚Äî –æ—Å—Ç–∞–≤—å —Å—Ç—Ä–æ–∫—É. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏ –µ—ë.
EXTRA_PUBLIC_URLS = [
    "/",                # –≥–ª–∞–≤–Ω–∞—è
    "/support",         # —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–æ—É—Ç)
    "/tg",              # –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è TG WebApp (–µ—Å–ª–∏ –ø—É—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è)
]

# –ë–ª—ç–∫–ª–∏—Å—Ç ‚Äî —ç—Ç–∏ —Ä–∞–∑–¥–µ–ª—ã –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ù–ï–õ–¨–ó–Ø –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏ –≤ sitemap –æ–Ω–∏ –Ω–µ –ø–æ–ø–∞–¥—É—Ç
SEO_DISALLOW_PREFIXES = (
    "/results", "/search", "/api", "/admin", "/subscription", "/unsubscribe",
    "/subscribe", "/analytics", "/health", "/static"
)
SEO_DISALLOW_EXACT = {
    "/favicon.ico", "/robots.txt", "/sitemap.xml",
    "/send-notifications"
}

def _xml_escape(s: str) -> str:
    return (s.replace("&", "&amp;")
             .replace("<", "&lt;")
             .replace(">", "&gt;")
             .replace('"', "&quot;")
             .replace("'", "&apos;"))

BASE_URL = "https://www.globaljobhunter.vip"   # <- –∫–∞–Ω–æ–Ω. –¥–æ–º–µ–Ω + HTTPS

def _absolute_url(path: str) -> str:
    return f"{BASE_URL}{path}"

def _collect_public_paths() -> list[str]:
    """–ë–µ—Ä—ë–º –≤—Å–µ GET-—Ä–æ—É—Ç—ã –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ/—Å–ª—É–∂–µ–±–Ω—ã–µ."""
    out = set()

    # 1) –∏–∑ –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ Flask
    for rule in app.url_map.iter_rules():
        if "GET" not in rule.methods:
            continue
        if rule.arguments:  # —É –ø—Ä–∞–≤–∏–ª –µ—Å—Ç—å <param>? ‚Äî —Ç–∞–∫–∏–µ –Ω–µ –±–µ—Ä—ë–º
            continue
        path = str(rule.rule)
        if path in SEO_DISALLOW_EXACT:
            continue
        if path.startswith(SEO_DISALLOW_PREFIXES):
            continue
        out.add(path)

    # 2) –¥–æ–±–∞–≤–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
    for path in EXTRA_PUBLIC_URLS:
        out.add(path)

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º: –∫–æ—Ä–µ–Ω—å ‚Äî –ø–µ—Ä–≤—ã–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    paths = sorted(out)
    if "/" in paths:
        paths.remove("/")
        paths.insert(0, "/")
    return paths

def _render_sitemap(paths: list[str]) -> str:
    today = datetime.utcnow().date().isoformat()
    lines = ['<?xml version="1.0" encoding="UTF-8"?>',
             '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">']
    for p in paths:
        loc = _xml_escape(_absolute_url(p))
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –∫–æ—Ä–µ–Ω—å ‚Äî priority 1.0, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî 0.5
        prio = "1.0" if p == "/" else "0.5"
        lines += [
            "  <url>",
            f"    <loc>{loc}</loc>",
            f"    <lastmod>{today}</lastmod>",
            f"    <changefreq>daily</changefreq>",
            f"    <priority>{prio}</priority>",
            "  </url>"
        ]
    lines.append("</urlset>")
    return "\n".join(lines)

from flask import Response

VERIFICATION_FILENAME = "googleab1f551714c95e9d.html"  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

@app.route(f"/{VERIFICATION_FILENAME}")
def google_site_verification():
    body = f"google-site-verification: {VERIFICATION_FILENAME}"
    return Response(body, mimetype="text/plain; charset=utf-8")


@app.route("/robots.txt")
def robots_txt():
    body = (
        "User-agent: *\n"
        "Allow: /\n"
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞/—Å–ª—É–∂–µ–±–∫–∞ ‚Äî –Ω–µ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º
        "Disallow: /results\n"
        "Disallow: /results/\n"
        "Disallow: /search\n"
        "Disallow: /search/\n"
        "Disallow: /api\n"
        "Disallow: /api/\n"
        "Disallow: /admin\n"
        "Disallow: /admin/\n"
        "Disallow: /subscription\n"
        "Disallow: /subscription/\n"
        "Disallow: /subscribe\n"
        "Disallow: /unsubscribe\n"
        "Disallow: /analytics\n"
        "Disallow: /analytics/\n"
        "Disallow: /health\n"
        # –£–±–µ—Ä—ë–º –¥—É–±–ª–∏ –ø–æ —è–∑—ã–∫–∞–º: /?lang=ru|uk|en –∏ —Ç.–ø.
        "Disallow: /*?lang=\n"
        "Disallow: /*&lang=\n"
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É —Å–∞–π—Ç–∞
        "Sitemap: https://www.globaljobhunter.vip/sitemap.xml\n"
    )
    return Response(body, mimetype="text/plain; charset=utf-8")

@app.route("/sitemap.xml")
def sitemap_xml():
    paths = _collect_public_paths()
    xml = _render_sitemap(paths)
    return Response(xml, mimetype="application/xml; charset=utf-8")
# === /SEO ===========================================================


# –≤ app.py (–Ω–µ –ª–æ–º–∞—è –Ω–∏—á–µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
from flask import send_from_directory

@app.route("/tg")
def tg_index_alias():
    return send_from_directory("static/tg", "index.html")


# Rate limiting
RATE_LIMIT_FILE = "rate_limits.json"
MAX_SEARCHES_PER_DAY = 5

def load_rate_limits():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ IP"""
    try:
        with open(RATE_LIMIT_FILE, 'r') as f:
            data = json.load(f)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
            for ip, searches in data.items():
                data[ip] = [datetime.fromisoformat(dt) for dt in searches]
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º defaultdict
            return defaultdict(list, data)
    except FileNotFoundError:
        return defaultdict(list)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ rate limits: {e}")
        return defaultdict(list)

def save_rate_limits(limits):
   """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ IP"""
   # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
   serializable_data = {}
   for ip, searches in limits.items():
       serializable_data[ip] = [dt.isoformat() for dt in searches]
   
   with open(RATE_LIMIT_FILE, 'w') as f:
       json.dump(serializable_data, f)

def check_rate_limit(ip_address):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è IP"""
    limits = load_rate_limits()
    now = datetime.now()
    day_ago = now - timedelta(days=1)
    
    # üîß –î–û–ë–ê–í–õ–ï–ù–ê –¢–û–õ–¨–ö–û –≠–¢–ê –ü–†–û–í–ï–†–ö–ê:
    if ip_address not in limits:
        limits[ip_address] = []
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫)
    recent_searches = [dt for dt in limits[ip_address] if dt > day_ago]
    limits[ip_address] = recent_searches
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(recent_searches) >= MAX_SEARCHES_PER_DAY:
        # TEMP OFF: –æ—Ç–∫–ª—é—á–∏–ª–∏ —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç
        #return False, MAX_SEARCHES_PER_DAY - len(recent_searches)
        pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫
    limits[ip_address].append(now)
    save_rate_limits(limits)
    
    return True, MAX_SEARCHES_PER_DAY - len(limits[ip_address])

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from jobicy_aggregator import JobicyAggregator
    from usajobs_aggregator import USAJobsAggregator
    ADDITIONAL_SOURCES_AVAILABLE = True
    print("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
except ImportError as e:
    ADDITIONAL_SOURCES_AVAILABLE = False
    print(f"‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

load_dotenv()

app.secret_key = secrets.token_hex(16)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'sqlite:///globaljobhunter.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email 
app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER', 'smtp.gmail.com')
app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', 587))
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')
app.config['MAIL_DEFAULT_SENDER'] = os.getenv('MAIL_DEFAULT_SENDER', os.getenv('MAIL_USERNAME'))

# ==== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL —á–µ—Ä–µ–∑ ENV, –∏–Ω–∞—á–µ SQLite fallback ====
def _build_db_uri():
    # –ª–æ–∫–∞–ª—å–Ω—ã–π/—Ä–µ–∑–µ—Ä–≤–Ω—ã–π SQLite (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω DATABASE_URL)
    return "sqlite:///globaljobhunter.db"

def _current_db_url():
    url = os.getenv("DATABASE_URL") or _build_db_uri()
    return url.replace("postgres://", "postgresql://")

app.config.update(
    SQLALCHEMY_DATABASE_URI=_current_db_url(),
    SQLALCHEMY_TRACK_MODIFICATIONS=False,
    SQLALCHEMY_ENGINE_OPTIONS={
        "pool_pre_ping": True,
        "pool_size": 5,       # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        "max_overflow": 10,   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        "pool_recycle": 1800, # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    },
)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
db.init_app(app)
mail.init_app(app)
migrate = Migrate(app, db)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
try:
    adzuna_ttl = int(os.getenv('ADZUNA_CACHE_HOURS', os.getenv('CACHE_TTL_HOURS', '24')))
    aggregator = GlobalJobAggregator(cache_duration_hours=adzuna_ttl)
    aggregator.search_cache = {}
    app.logger.info(f"‚úÖ GlobalJobAggregator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (TTL={adzuna_ttl}—á)")
except Exception as e:
    app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GlobalJobAggregator: {e}")
    aggregator = None


# –î–û–ë–ê–í–õ–ï–ù–ò–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
additional_aggregators = {}
if ADDITIONAL_SOURCES_AVAILABLE and aggregator:
    try:
        # Jobicy
        jobicy = JobicyAggregator()
        # ‚Üê –í–ê–ñ–ù–ê–Ø –°–¢–†–û–ö–ê: –æ—Ç–¥–∞—ë–º —Ç—É –∂–µ –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Adzuna/–æ—Å–Ω–æ–≤–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
        jobicy.specific_jobs_map = aggregator.specific_jobs

        # Careerjet ‚Äî —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç—É –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
        careerjet = CareerjetAggregator(
            adzuna_countries=aggregator.countries,
            specific_jobs_map=aggregator.specific_jobs
        )

        # Remotive ‚Äî —Ç–æ–∂–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è —Ç–æ–π –∂–µ –∫–∞—Ä—Ç–æ–π
        remotive = RemotiveAggregator(
            specific_jobs_map=aggregator.specific_jobs
        )

        additional_aggregators['jobicy'] = jobicy
        additional_aggregators['careerjet'] = careerjet
        additional_aggregators['remotive'] = remotive

        app.logger.info("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: Jobicy, Careerjet, Remotive")
    except Exception as e:
        app.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã: {e}")
else:
    app.logger.info("‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# --- Remote-only sources gating (Jobicy/Remotive) ---
# –†–∞–∑—Ä–µ—à–∞–µ–º remote —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π/–ø–æ–∑–∏—Ü–∏–π:
REMOTE_OK_CATS = {
    'üíª IT –ò –¢–ï–•–ù–û–õ–û–ì–ò–ò',
    'üëî –û–§–ò–° –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï',
    'üîç –î–†–£–ì–û–ï',
}
# –¢–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–∂–µ –¥–æ–ø—É—Å–∫–∞—é—Ç remote (—Ä—É—Å/—É–∫—Ä)
REMOTE_OK_TITLES = {
    '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ',
    '–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó',
}

def _remote_allowed(preferences: dict) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ò–ó –í–´–ë–†–ê–ù–ù–´–• –ü–†–û–§–ï–°–°–ò–ô –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞,
    –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ø—É—Å–∫–∞–µ—Ç remote (–ø–æ –Ω–∞—à–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –≤—ã—à–µ).
    """
    selected = set(preferences.get('selected_jobs') or [])
    if not selected:
        return False
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è -> {ru_title: [...keywords...]}
    sj = getattr(aggregator, 'specific_jobs', {}) or {}
    for cat, ru_map in sj.items():
        if isinstance(ru_map, dict) and cat in REMOTE_OK_CATS:
            # –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if any(ru in ru_map for ru in selected):
                return True
    # —Ç–æ—á–µ—á–Ω—ã–µ –¥–æ–ø—É—Å–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if any(t in selected for t in REMOTE_OK_TITLES):
        return True
    return False


# –í —Ñ–∞–π–ª–µ app.py –Ω–∞–π–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é index() –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –µ—ë –Ω–∞ —ç—Ç—É –≤–µ—Ä—Å–∏—é:

# app.py

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
    if not aggregator:
        return render_template('error.html', 
                             error="API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
    job_categories = aggregator.specific_jobs
    
    # ‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ô –ë–õ–û–ö –£–î–ê–õ–Å–ù ‚ùå
    
    total_jobs = sum(len(jobs) for jobs in job_categories.values())
    
    session.pop('results_id', None)
    session.pop('last_search_preferences', None)
    
    return render_template('index.html', 
                         job_categories=job_categories,
                         total_jobs=total_jobs,
                         countries=aggregator.countries)

@app.route('/search', methods=['POST'])
def search_jobs():
    """API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º + –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"""
    if not aggregator:
        return jsonify({'error': '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}), 500
    
    # Rate limiting
    client_ip = request.environ.get('HTTP_X_FORWARDED_FOR', request.environ.get('REMOTE_ADDR', 'unknown'))
    allowed, remaining = check_rate_limit(client_ip)
    if not allowed:
        app.logger.warning(f"üö´ Rate limit exceeded for IP: {client_ip}")
        return jsonify({
            'error': f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤. –ú–∞–∫—Å–∏–º—É–º {MAX_SEARCHES_PER_DAY} –ø–æ–∏—Å–∫–æ–≤ –≤ –¥–µ–Ω—å.',
            'remaining_searches': 0,
            'reset_time': '24 —á–∞—Å–∞'
        }), 429
    
    app.logger.info(f"‚úÖ Rate limit OK for IP: {client_ip}, remaining: {remaining}")
    
    try:
        form_data = request.json or request.form.to_dict()
        
        # === –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é ===
        raw_city = (form_data.get('city') or '').strip()
        if raw_city:
            cities = [c.strip() for c in raw_city.split(',') if c.strip()]
        else:
            cities = []
        # ==========================================================
        
        preferences = {
            'is_refugee': form_data.get('is_refugee') == 'true',
            'selected_jobs': form_data.get('selected_jobs', []),
            'countries': form_data.get('countries', ['de']),
            # –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (UI/—à–∞–±–ª–æ–Ω—ã)
            'city': None,
            # –Ω–æ–≤–æ–µ –ø–æ–ª–µ ‚Äî —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
            'cities': cities
        }
        
        if not preferences['selected_jobs']:
            return jsonify({'error': '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é'}), 400
        
        if isinstance(preferences['selected_jobs'], str):
            preferences['selected_jobs'] = [preferences['selected_jobs']]
        
        # === analytics: –ª–æ–≥ –∫–ª–∏–∫–∞ "–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É" (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫) ===
        try:
            log_search_click(preferences)
        except Exception as e:
            app.logger.warning(f"analytics log_search_click failed: {e}")
        # =======================================================================
        
        app.logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫: {preferences}")
        start_time = time.time()

        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ (Adzuna)
        jobs = aggregator.search_specific_jobs(preferences)
        
        # –î–æ–ø. –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã)
        if additional_aggregators:
            use_remote = _remote_allowed(preferences)
            for source_name, source_aggregator in additional_aggregators.items():
                # –ë–ª–æ–∫–∏—Ä—É–µ–º remote-only –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç —É–¥–∞–ª—ë–Ω–∫—É
                if source_name in ('remotive', 'jobicy') and not use_remote:
                    app.logger.info(f"‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {source_name}: –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç —É–¥–∞–ª—ë–Ω–∫—É")
                    continue
                try:
                    app.logger.info(f"üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ {source_name}")
                    additional_jobs = source_aggregator.search_jobs(preferences)
                    jobs.extend(additional_jobs)
                    app.logger.info(f"‚úÖ {source_name}: +{len(additional_jobs)} –≤–∞–∫–∞–Ω—Å–∏–π")
                except Exception as e:
                    app.logger.warning(f"‚ö†Ô∏è {source_name} –æ—à–∏–±–∫–∞: {e}")
                    continue
        
        search_time = time.time() - start_time
        
        cache_stats = aggregator.get_cache_stats()
        app.logger.info(f"‚è±Ô∏è –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {search_time:.1f}—Å, –Ω–∞–π–¥–µ–Ω–æ {len(jobs)} –≤–∞–∫–∞–Ω—Å–∏–π")
        app.logger.info(f"üìä Cache hit rate: {cache_stats['cache_hit_rate']}, API requests: {cache_stats['api_requests']}")
        
        if jobs:
            results_id = str(uuid.uuid4())
            job_details_map = {job.id: asdict(job) for job in jobs}
            aggregator.search_cache[results_id] = job_details_map
            
            session['results_id'] = results_id
            session['last_search_preferences'] = preferences
            session['search_time'] = search_time
        else:
            session['results_id'] = None
            session['last_search_preferences'] = preferences
            session['search_time'] = search_time

        return jsonify({
            'success': True,
            'jobs_count': len(jobs),
            'search_time': round(search_time, 1),
            'cached': cache_stats['cache_hits'] > 0,
            'sources_used': ['adzuna'] + list(additional_aggregators.keys()),
            'remaining_searches': remaining,
            'redirect_url': url_for('results')
        })
    
    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}", exc_info=True)
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500


# ---- LIVE SEARCH: —Å—Ç–∞—Ä—Ç ‚Üí –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Üí —Å—Ç–æ–ø ---------------------------------

def _sources_iter():
    # –ò–º—è –¥–ª—è UI -> –æ–±—ä–µ–∫—Ç
    yield ("Adzuna", aggregator)
    try:
        if additional_aggregators:
            if 'careerjet' in additional_aggregators:
                yield ("Careerjet", additional_aggregators['careerjet'])
            if 'remotive' in additional_aggregators:
                yield ("Remotive", additional_aggregators['remotive'])
            if 'jobicy' in additional_aggregators:
                yield ("Jobicy", additional_aggregators['jobicy'])
    except NameError:
        pass

@app.route('/search/start', methods=['POST'])
def search_start():
    """–°—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –∂–∏–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º."""
    if not aggregator:
        return jsonify({'error': '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}), 500

    # rate limit ‚Äî –∫–∞–∫ –≤ /search
    client_ip = request.environ.get('HTTP_X_FORWARDED_FOR', request.environ.get('REMOTE_ADDR', 'unknown'))
    allowed, remaining = check_rate_limit(client_ip)
    if not allowed:
        return jsonify({
            'error': f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤. –ú–∞–∫—Å–∏–º—É–º {MAX_SEARCHES_PER_DAY} –ø–æ–∏—Å–∫–æ–≤ –≤ –¥–µ–Ω—å.',
            'remaining_searches': 0,
            'reset_time': '24 —á–∞—Å–∞'
        }), 429

    form_data = request.json or request.form.to_dict()
    raw_city = (form_data.get('city') or '').strip()
    cities = [c.strip() for c in raw_city.split(',') if c.strip()] if raw_city else []

    preferences = {
        'is_refugee': form_data.get('is_refugee') == 'true',
        'selected_jobs': form_data.get('selected_jobs', []),
        'countries': form_data.get('countries', ['de']),
        'city': None,
        'cities': cities
    }

    if isinstance(preferences['selected_jobs'], str):
        preferences['selected_jobs'] = [preferences['selected_jobs']]
    if not preferences['selected_jobs']:
        return jsonify({'error': '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é'}), 400

    # === analytics: –ª–æ–≥ –∫–ª–∏–∫–∞ "–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É" (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫) ===
    try:
        log_search_click(preferences)
    except Exception as e:
        app.logger.warning(f"analytics log_search_click failed: {e}")
    # =======================================================================

    sid = str(uuid.uuid4())
    active_searches[sid] = {
        'sid': sid,
        'started_at': time.time(),
        'cancel': False,
        'current_source': None,
        'completed_sources': [],
        'sites_status': {},            # name -> pending|active|done|error
        'job_map': {},                 # id -> job dict
        'jobs_count': 0,
        'results_id': None,
        'status': 'running',
        'preferences': preferences,
    }

    t = Thread(target=_search_worker, args=(sid,), daemon=True)
    t.start()
    return jsonify({'ok': True, 'search_id': sid, 'remaining_searches': remaining})


def _search_worker(sid: str):
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫: –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç active_searches[sid]['job_map'].
       –í–ê–ñ–ù–û: –ù–ò–ß–ï–ì–û –Ω–µ –ø–∏—à–µ–º –≤ flask.session (–Ω–µ—Ç request context)!
    """
    st = active_searches.get(sid)
    if not st:
        return
    prefs = st['preferences']

    for name, src in _sources_iter():
        # –°–∫–∏–ø–∞–µ–º remote-only –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç —É–¥–∞–ª—ë–Ω–∫—É
        if name in ('Remotive', 'Jobicy') and not _remote_allowed(prefs):
            st['sites_status'][name] = 'skipped'
            st['completed_sources'].append(name)
            app.logger.info(f"‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {name}: –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç —É–¥–∞–ª—ë–Ω–∫—É")
            continue

        if st.get('cancel'):
            break

        st['current_source'] = name
        st['sites_status'][name] = 'active'
        try:
            def cancel_check():
                s = active_searches.get(sid)
                return (s is None) or s.get('cancel', False)

            def progress_callback(batch_jobs):
                if not batch_jobs:
                    return
                s = active_searches.get(sid)
                if not s or s.get('cancel'):
                    return
                added = 0
                for j in batch_jobs:
                    jid = getattr(j, 'id', None)
                    if not jid:
                        continue
                    if jid not in s['job_map']:
                        s['job_map'][jid] = asdict(j)
                        added += 1
                if added:
                    s['jobs_count'] = len(s['job_map'])
                    s['current_source'] = name

            # –í—ã–∑—ã–≤–∞–µ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞/–æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç
            jobs = None
            try:
                jobs = src.search_specific_jobs(prefs, progress_callback=progress_callback, cancel_check=cancel_check)
            except Exception:
                try:
                    jobs = src.search_jobs(prefs, progress_callback=progress_callback, cancel_check=cancel_check)
                except TypeError:
                    jobs = src.search_jobs(prefs)

            if jobs:
                for j in jobs:
                    jid = getattr(j, 'id', None)
                    if not jid:
                        continue
                    if jid not in st['job_map']:
                        st['job_map'][jid] = asdict(j)
                st['jobs_count'] = len(st['job_map'])

            st['sites_status'][name] = 'done'
            st['completed_sources'].append(name)

        except Exception as e:
            app.logger.warning(f"{name} error: {e}")
            st['sites_status'][name] = 'error'
            st['completed_sources'].append(name)

    # –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ï–ó session: –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–µ–º –≤ –∫—ç—à –∏ –æ—Ç–º–µ—Ç–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if st['job_map']:
        st['results_id'] = str(uuid.uuid4())
        aggregator.search_cache[st['results_id']] = st['job_map']
    st['status'] = 'done'

@app.route('/search/progress')
def search_progress():
    sid = request.args.get('id')
    st = active_searches.get(sid)
    if not sid or not st:
        return jsonify({'error': 'search_id not found'}), 404

    # –ö–û–ì–î–ê –≤—Å—ë –≥–æ—Ç–æ–≤–æ ‚Äî —Ç–µ–ø–µ—Ä—å –ú–û–ñ–ù–û –ø–æ–ª–æ–∂–∏—Ç—å –≤ session (–º—ã –≤ request context)
    if st['status'] == 'done' and st.get('results_id'):
        session['results_id'] = st['results_id']
        session['last_search_preferences'] = st['preferences']

    payload = {
        'status': st['status'],
        'search_id': sid,
        'jobs_found': st['jobs_count'],
        'current_source': st['current_source'],
        'completed_sources': st['completed_sources'],
        'sites_status': st['sites_status'],
    }
    if st['status'] == 'done':
        payload['redirect_url'] = url_for('results')
    return jsonify(payload)


@app.route('/search/stop', methods=['POST'])
def search_stop():
    """–ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: —Å—Ä–∞–∑—É —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ–±—ã UI –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —É—à—ë–ª –Ω–∞ /results."""
    payload = request.get_json(silent=True) or {}
    sid = payload.get('search_id') or request.args.get('id')
    if not sid:
        return jsonify({'error': 'search_id is required'}), 400
    st = active_searches.get(sid)
    if not st:
        return jsonify({'error': 'search_id not found'}), 404

    # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã
    st['cancel'] = True

    # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä—è–º–æ –∑–¥–µ—Å—å (–¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ—Ç–æ–∫ –≥–¥–µ-—Ç–æ –∂–¥—ë—Ç rate-limit)
    if not st.get('results_id') and st['job_map']:
        st['results_id'] = str(uuid.uuid4())
        aggregator.search_cache[st['results_id']] = st['job_map']

    st['status'] = 'done'

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å session (–µ—Å—Ç—å request context)
    if st.get('results_id'):
        session['results_id'] = st['results_id']
        session['last_search_preferences'] = st['preferences']
        return jsonify({'ok': True, 'redirect_url': url_for('results')})
    else:
        # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø–æ—à–ª—ë–º –Ω–∞ results, –ø—É—Å—Ç—å –ø–æ–∫–∞–∂–µ—Ç "0"
        return jsonify({'ok': True, 'redirect_url': url_for('results')})

# ---------------------------------------------------------------------------


# –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ü–û–õ–ù–û–°–¢–¨–Æ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
@app.route('/results')
def results():
   """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
   results_id = session.get('results_id')
   preferences = session.get('last_search_preferences', {})
   search_time = session.get('search_time', 0)
   
   jobs_data = []
   
   if results_id and aggregator and results_id in aggregator.search_cache:
       job_details_map = aggregator.search_cache[results_id]
       jobs_data = list(job_details_map.values())
   elif results_id is None:
       jobs_data = []
   else:
       return redirect(url_for('index'))

   # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   stats = {
       'total': len(jobs_data),
       'with_salary': len([j for j in jobs_data if j.get('salary')]),
       'refugee_friendly': len([j for j in jobs_data if j.get('refugee_friendly')]),
       'no_language': len([j for j in jobs_data if j.get('language_requirement') == 'no_language_required'])
   }
   
   # –ù–û–í–ê–Ø –°–û–†–¢–ò–†–û–í–ö–ê: –°–Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–∞–º, –ø–æ—Ç–æ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
   def sort_key(job):
       country = job.get('country', '')
       refugee_friendly = job.get('refugee_friendly', False)
       no_language = job.get('language_requirement') == 'no_language_required'
       has_salary = job.get('salary') is not None
       posted_date = job.get('posted_date', '')
       
       # –°–Ω–∞—á–∞–ª–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ, –ø–æ—Ç–æ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω—ã
       return (
           country,              # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ
           not refugee_friendly, # –°–Ω–∞—á–∞–ª–∞ –¥–ª—è –±–µ–∂–µ–Ω—Ü–µ–≤
           not no_language,      # –ü–æ—Ç–æ–º –±–µ–∑ —è–∑—ã–∫–∞
           not has_salary,       # –ü–æ—Ç–æ–º —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π
           posted_date          # –ü–æ –¥–∞—Ç–µ
       )
   
   jobs_sorted = sorted(jobs_data, key=sort_key)
   
   # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
   jobs_by_country = {}
   for job in jobs_sorted:
       country = job.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
       if country not in jobs_by_country:
           jobs_by_country[country] = []
       jobs_by_country[country].append(job)
   
   return render_template('results.html',
                        jobs=jobs_sorted,
                        jobs_by_country=jobs_by_country,  # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
                        preferences=preferences,
                        stats=stats,
                        search_time=round(search_time, 1),
                        countries=aggregator.countries if aggregator else {})

@app.route('/subscribe', methods=['POST'])
def subscribe():
    
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print("="*60)
    print("üîç –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò SUBSCRIBE")
    print(f"üìß Method: {request.method}")
    print(f"üìß Content-Type: {request.content_type}")
    print(f"üìß Request data: {request.data}")
    print("="*60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        if request.is_json:
            data = request.get_json()
            print(f"üìß JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {data}")
        else:
            data = request.form.to_dict()
            print(f"üìß Form –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {data}")
        
        if not data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ'}), 400
        
        email = data.get('email', '').strip().lower()
        print(f"üìß Email –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: '{email}'")
        # >>> –Ø–ó–´–ö –ü–û–î–ü–ò–°–ö–ò (–≤—Å—Ç–∞–≤–∏—Ç—å –°–†–ê–ó–£ –ü–û–°–õ–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è email)
        SUPPORTED_LANGS = {'ru', 'uk', 'en'}
        lang = (data.get('lang')
                or request.cookies.get('lang')
                or request.headers.get('X-Lang')
                or 'ru').lower()
        if lang not in SUPPORTED_LANGS:
            lang = 'ru'
        print(f"üåê –Ø–∑—ã–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {lang}")
        # <<< –∫–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–∫–∏
        # --- –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞
        MSG = {
        'ru': {
            'ok': '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email.',
            'ok_slow': '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! (Email –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)'
        },
        'en': {
            'ok': 'Subscription created! Check your email.',
            'ok_slow': 'Subscription created! (Email may be delayed)'
        },
        'uk': {
            'ok': '–ü—ñ–¥–ø–∏—Å–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email.',
            'ok_slow': '–ü—ñ–¥–ø–∏—Å–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ! (–õ–∏—Å—Ç –º–æ–∂–µ –Ω–∞–¥—ñ–π—Ç–∏ —ñ–∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é)'
        }
        }
        # ---


        
        if not email or '@' not in email:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email")
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∞–¥—Ä–µ—Å'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
        preferences = session.get('last_search_preferences', {})
        print(f"‚öôÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏: {preferences}")

        # –ü–†–û–í–ï–†–ö–ê: –ï—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?
        if not preferences.get('selected_jobs') or not preferences.get('countries'):
            print("‚ùå –ù–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–ª–∏ —Å—Ç—Ä–∞–Ω –≤ —Å–µ—Å—Å–∏–∏")
            return jsonify({
                'error': '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Å—Ç—Ä–∞–Ω—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É, –∞ –ø–æ—Ç–æ–º –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å'
            }), 400
        
        print("üîç –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ –ë–î...")
        existing = Subscriber.query.filter_by(email=email).first()
        print(f"üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {existing}")
        
        # –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞
        if existing and existing.is_active:
            print("‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–∏—á–∏—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_jobs = set(existing.get_selected_jobs() or [])
            current_countries = set(existing.get_countries() or [])
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ –ø–æ–∏—Å–∫–∞
            new_jobs = set(preferences.get('selected_jobs', []))
            new_countries = set(preferences.get('countries', []))
            
            print(f"üîÑ –¢–µ–∫—É—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {current_jobs}")
            print(f"üîÑ –ù–æ–≤—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {new_jobs}")
            print(f"üîÑ –¢–µ–∫—É—â–∏–µ —Å—Ç—Ä–∞–Ω—ã: {current_countries}")
            print(f"üîÑ –ù–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω—ã: {new_countries}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—Ç–ª–∏—á–∏—è
            if current_jobs == new_jobs and current_countries == new_countries:
                print("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ —Å —Ç–∞–∫–∏–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return jsonify({
                    'error': '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏'
                }), 400
            
            # –ï—Å—Ç—å –æ—Ç–ª–∏—á–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
            print("üîÑ –ï—Å—Ç—å –æ—Ç–ª–∏—á–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç (409)...")
            return jsonify({
                'subscription_exists': True,
                'current_subscription': {
                    'jobs': list(current_jobs),
                    'countries': list(current_countries),
                    'city': existing.city,
                    'is_refugee': existing.is_refugee
                },
                'new_subscription': {
                    'jobs': list(new_jobs),
                    'countries': list(new_countries),
                    'city': preferences.get('city'),
                    'is_refugee': preferences.get('is_refugee', True)
                },
                'message': '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
            }), 409  # 409 Conflict
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        print("üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é...")
        
        if existing:
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞...")
            existing.is_active = True
            if preferences.get('selected_jobs'):
                existing.set_selected_jobs(preferences['selected_jobs'])
            if preferences.get('countries'):
                existing.set_countries(preferences['countries'])
            existing.city = preferences.get('city')
            existing.is_refugee = preferences.get('is_refugee', True)
            existing.lang = lang
            subscriber = existing
        else:
            print("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞...")
            subscriber = Subscriber(
                email=email,
                is_refugee=preferences.get('is_refugee', True),
                city=preferences.get('city'),
                frequency='weekly',
                lang=lang
            )
            if preferences.get('selected_jobs'):
                subscriber.set_selected_jobs(preferences['selected_jobs'])
            if preferences.get('countries'):
                subscriber.set_countries(preferences['countries'])
            db.session.add(subscriber)
        
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        db.session.commit()
        print("‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º welcome email —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        print("üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º welcome email...")
        email_success = False
        try:
            from email_service import send_welcome_email
            email_success = send_welcome_email(app, email, lang=subscriber.lang)
            print(f"üìß –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {email_success}")
            
            if email_success:
                print("‚úÖ Welcome email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                log = EmailLog(
                    subscriber_id=subscriber.id,
                    email=email,
                    subject="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlobalJobHunter!",
                    jobs_count=0,
                    status='sent',
                    sent_at=datetime.now()
                )
                db.session.add(log)
                db.session.commit()
                print("üìù –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∞–Ω")
                
                return jsonify({'success': True, 'message': MSG[lang]['ok']})

            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ welcome email")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                log = EmailLog(
                    subscriber_id=subscriber.id,
                    email=email,
                    subject="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlobalJobHunter!",
                    jobs_count=0,
                    status='failed',
                    error_message='Failed to send welcome email',
                    sent_at=datetime.now()
                )
                db.session.add(log)
                db.session.commit()
                print("üìù –õ–æ–≥ –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∞–Ω")
                
                return jsonify({'success': True, 'message': MSG[lang]['ok_slow']})

        except Exception as email_error:
            print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ welcome email: {email_error}")
            import traceback
            traceback.print_exc()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            try:
                log = EmailLog(
                    subscriber_id=subscriber.id,
                    email=email,
                    subject="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlobalJobHunter!",
                    jobs_count=0,
                    status='failed',
                    error_message=str(email_error),
                    sent_at=datetime.now()
                )
                db.session.add(log)
                db.session.commit()
                print("üìù –õ–æ–≥ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω")
            except Exception as log_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {log_error}")
            
            return jsonify({'success': True, 'message': MSG[lang]['ok_slow']})

        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –í SUBSCRIBE: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500
    
    finally:
        print("="*60)
        print("üèÅ –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ò SUBSCRIBE")
        print("="*60)

@app.route('/unsubscribe')
def unsubscribe():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ø–∏—Å–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    email = request.args.get('email')
    
    if not email:
        return render_template_string("""
        <!DOCTYPE html>
        <html lang="{{ request.cookies.get('lang','ru') }}">
        <head>
            <meta charset="utf-8">
            <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>                          
            <title>–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏</title>
            <style>
                body { font-family: Arial; padding: 40px; text-align: center; background: #f8f9fa; }
                .card { background: white; padding: 40px; border-radius: 15px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); max-width: 500px; margin: 0 auto; }
                .error { color: #dc3545; font-size: 3rem; margin-bottom: 20px; }
                h1 { color: #343a40; margin-bottom: 15px; }
                .btn { background: #007bff; color: white; padding: 12px 25px; text-decoration: none; border-radius: 8px; display: inline-block; margin-top: 20px; }
            </style>
        </head>
        <body>
            <div class="card">
                <div class="error">‚ùå</div>
                <h1>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞</h1>
                <p>Email –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏.</p>
                <a href="/" class="btn">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
            </div>
        </body>
        </html>
        """)
    
    # –ò—â–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
    subscriber = Subscriber.query.filter_by(email=email).first()
    
    if subscriber and subscriber.is_active:
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscriber.is_active = False
        db.session.commit()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏
        return render_template_string("""
        <!DOCTYPE html>
        <html lang="{{ request.cookies.get('lang','ru') }}"
        <head>
            <meta charset="utf-8">
            <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>                          
            <title>–û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</title>
            <style>
                body { 
                    font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; 
                    padding: 40px; text-align: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    min-height: 100vh; display: flex; align-items: center; justify-content: center; margin: 0;
                }
                .card { 
                    background: white; padding: 50px; border-radius: 20px; 
                    box-shadow: 0 20px 60px rgba(0,0,0,0.2); max-width: 600px; width: 100%;
                }
                .success { color: #28a745; font-size: 4rem; margin-bottom: 20px; }
                h1 { color: #343a40; margin-bottom: 20px; font-weight: 600; }
                p { color: #6c757d; line-height: 1.6; margin-bottom: 15px; }
                .email-highlight { 
                    background: #e3f2fd; color: #1976d2; padding: 8px 15px; 
                    border-radius: 20px; font-weight: 600; display: inline-block; margin: 10px 0;
                }
                .btn { 
                    background: #007bff; color: white; padding: 15px 30px; text-decoration: none; 
                    border-radius: 10px; display: inline-block; margin: 25px 10px 0; font-weight: 600;
                    transition: all 0.3s ease; box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
                }
                .btn:hover { 
                    background: #0056b3; transform: translateY(-2px); text-decoration: none; color: white;
                    box-shadow: 0 8px 25px rgba(0, 123, 255, 0.4);
                }
                .btn-secondary { 
                    background: #6c757d; box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
                }
                .btn-secondary:hover { 
                    background: #545b62; box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
                }
                .info-box {
                    background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 10px; 
                    padding: 20px; margin: 25px 0; text-align: left;
                }
                .info-box h4 { color: #495057; margin-bottom: 10px; }
                .info-box ul { margin: 10px 0; padding-left: 20px; }
                .info-box li { margin: 5px 0; color: #6c757d; }
            </style>
        </head>
        <body>
            <div class="card">
                <div class="success">‚úÖ</div>
                <h1 data-i18n="–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å!">–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å!</h1>
                <p data-i18n="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥—Ä–µ—Å–∞">–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥—Ä–µ—Å–∞</p>
                <div class="email-highlight">{{ email }}</div>
                <p data-i18n="–±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.">–±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.</p>
                
                <div class="info-box">
                    <h4 data-i18n="üìß –ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:">üìß –ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:</h4>
                    <ul>
                        <li data-i18n="–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö">–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö</li>
                        <li data-i18n="–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏)">–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏)</li>
                        <li data-i18n="–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É">–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É</li>
                    </ul>
                </div>
                
                <div>
                    <a href="/" class="btn" data-i18n="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é">üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
                    <a href="mailto:tzvanguardia@gmail.com?subject=Support%20GlobalJobHunter" class="btn btn-secondary" data-i18n="üì¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏">üì¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</a>

                </div>
                
                <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6;">
                    <small style="color: #6c757d;">
                        <strong data-i18n="–ü–µ—Ä–µ–¥—É–º–∞–ª–∏?">–ü–µ—Ä–µ–¥—É–º–∞–ª–∏?</strong>
                        <span data-i18n="–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ –Ω–∞">–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ –Ω–∞</span>
                        <a href="/" style="color: #007bff;" data-i18n="–Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ">–Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</a>
                    </small>

                </div>
            </div>
        </body>
        </html>
        """, email=email)
    
    elif subscriber and not subscriber.is_active:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–ø–∏—Å–∞–Ω
        return render_template_string("""
        <!DOCTYPE html>
        <html lang="{{ request.cookies.get('lang') or request.args.get('lang','ru') }}">
        <head>
            <meta charset="utf-8">
            <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>                          
            <title>–£–∂–µ –æ—Ç–ø–∏—Å–∞–Ω</title>
            <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>
                          
            <style>
                body { 
                    font-family: 'Inter', Arial, sans-serif; padding: 40px; text-align: center; 
                    background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%); 
                    min-height: 100vh; display: flex; align-items: center; justify-content: center; margin: 0;
                }
                .card { 
                    background: white; padding: 50px; border-radius: 20px; 
                    box-shadow: 0 20px 60px rgba(0,0,0,0.2); max-width: 500px; width: 100%;
                }
                .info { color: #f39c12; font-size: 4rem; margin-bottom: 20px; }
                h1 { color: #343a40; margin-bottom: 20px; font-weight: 600; }
                .email-highlight { 
                    background: #fff3cd; color: #856404; padding: 8px 15px; 
                    border-radius: 20px; font-weight: 600; display: inline-block; margin: 10px 0;
                }
                .btn { 
                    background: #007bff; color: white; padding: 15px 30px; text-decoration: none; 
                    border-radius: 10px; display: inline-block; margin: 25px 10px 0; font-weight: 600;
                    transition: all 0.3s ease;
                }
                .btn:hover { background: #0056b3; transform: translateY(-2px); text-decoration: none; color: white; }
            </style>
        </head>
        <body>
            <div class="card">
                <div class="info">‚ÑπÔ∏è</div>
                <h1 data-i18n="–í—ã —É–∂–µ –æ—Ç–ø–∏—Å–∞–Ω—ã">–í—ã —É–∂–µ –æ—Ç–ø–∏—Å–∞–Ω—ã</h1>

                <p data-i18n="–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞">–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞</p>

                <div class="email-highlight">{{ email }}</div>
                <p data-i18n="—É–∂–µ –±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ.">—É–∂–µ –±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ.</p>

                <p style="color: #6c757d; margin-top: 25px;" data-i18n="–•–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö? –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!">–•–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö? –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!</p>

                <a href="/" class="btn" data-i18n="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é">üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
            </div>
        </body>
        </html>
        """, email=email)
    
    else:
        # –ü–æ–¥–ø–∏—Å—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
        return render_template_string("""
        <!DOCTYPE html>
        <html lang="{{ request.cookies.get('lang','ru') }}"
        <head>
            <meta charset="utf-8">
            <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>                          
            <title>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</title>
            <style>
                body { 
                    font-family: 'Inter', Arial, sans-serif; padding: 40px; text-align: center; 
                    background: linear-gradient(135deg, #fdcb6e 0%, #e17055 100%); 
                    min-height: 100vh; display: flex; align-items: center; justify-content: center; margin: 0;
                }
                .card { 
                    background: white; padding: 50px; border-radius: 20px; 
                    box-shadow: 0 20px 60px rgba(0,0,0,0.2); max-width: 500px; width: 100%;
                }
                .warning { color: #e17055; font-size: 4rem; margin-bottom: 20px; }
                h1 { color: #343a40; margin-bottom: 20px; font-weight: 600; }
                .btn { 
                    background: #007bff; color: white; padding: 15px 30px; text-decoration: none; 
                    border-radius: 10px; display: inline-block; margin: 25px 10px 0; font-weight: 600;
                    transition: all 0.3s ease;
                }
                .btn:hover { background: #0056b3; transform: translateY(-2px); text-decoration: none; color: white; }
            </style>
        </head>
        <body>
            <div class="card">
                <div class="warning">‚ö†Ô∏è</div>
                <h1>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
                <p>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞ <strong>{{ email }}</strong> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.</p>
                <p style="color: #6c757d; margin-top: 25px;">
                    –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø–∏—Å–∞–Ω—ã —Ä–∞–Ω–µ–µ, –∏–ª–∏ email –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.
                </p>
                <a href="/" class="btn" data-i18n="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é">üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>

            </div>
        </body>
        </html>
        """, email=email)

@app.route('/api/cache/stats')
def cache_stats():
   """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
   if not aggregator:
       return jsonify({'error': '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}), 500
   
   stats = aggregator.get_cache_stats()
   return jsonify(stats)

@app.route('/api/cache/cleanup', methods=['POST'])
def cleanup_cache():
    """API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞"""
    if not aggregator:
        return jsonify({'error': '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}), 500
    
    try:
        aggregator.cleanup_cache()
        return """
        <html lang="{{ request.cookies.get('lang','ru') }}"
        <head><title>–ö–µ—à –æ—á–∏—â–µ–Ω</title><meta charset="utf-8"></head>
        <body style="font-family: Arial; padding: 40px; text-align: center;">
            <h1>‚úÖ –ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!</h1>
            <p>–í—Å–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã</p>
            <a href="/admin/subscribers?key={}" style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px;">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É</a>
        </body>
        </html>
        """.format(os.getenv('ADMIN_KEY'))
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}", 500
   
@app.route('/admin/subscribers')
def admin_subscribers():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    admin_key = request.args.get('key')
    if admin_key != os.getenv('ADMIN_KEY'):
        return "Access Denied", 403
    
    subscribers = Subscriber.query.order_by(Subscriber.created_at.desc()).all()
    email_logs = EmailLog.query.order_by(EmailLog.sent_at.desc()).limit(10).all()
    
    stats = {
        'total': Subscriber.query.count(),
        'active': Subscriber.query.filter_by(is_active=True).count(),
        'inactive': Subscriber.query.filter_by(is_active=False).count(),
        'emails_sent': EmailLog.query.filter_by(status='sent').count(),
        'emails_failed': EmailLog.query.filter_by(status='failed').count()
    }
    
    html = f"""
    <!DOCTYPE html>
    <html lang="{{ request.cookies.get('lang','ru') }}"
    <head>
        <title>–ê–¥–º–∏–Ω–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</title>
        <meta charset="utf-8">
        <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; background: #f8f9fa; }}
            .container {{ max-width: 1200px; margin: 0 auto; }}
            table {{ border-collapse: collapse; width: 100%; margin: 20px 0; background: white; }}
            th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
            th {{ background-color: #007bff; color: white; }}
            .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }}
            .stat-card {{ background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
            .stat-number {{ font-size: 2em; font-weight: bold; color: #007bff; }}
            .email-logs {{ background: white; padding: 20px; border-radius: 8px; margin: 20px 0; }}
            .nav {{ display: flex; gap: 20px; margin: 20px 0; }}
            .nav a {{ background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; }}
            .job-list {{ font-size: 0.9em; color: #666; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üìß –ê–¥–º–∏–Ω–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ GlobalJobHunter</h1>
            
            <div class="nav">
                <a href="/">üè† –ì–ª–∞–≤–Ω–∞—è</a>
                <a href="/admin/stats?key={admin_key}">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞</a>
                <a href="/health">üíö –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã</a>
                <a href="/admin/cache">üßπ –ö—ç—à</a>
            </div>
            
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number">{stats['total']}</div>
                    <p>–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</p>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats['active']}</div>
                    <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö</p>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats['inactive']}</div>
                    <p>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö</p>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats['emails_sent']}</div>
                    <p>Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</p>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats['emails_failed']}</div>
                    <p>Email –æ—à–∏–±–æ–∫</p>
                </div>
            </div>
            
            <h2>üìã –ü–æ–¥–ø–∏—Å—á–∏–∫–∏</h2>
            <table>
                <tr>
                    <th>Email</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–ë–µ–∂–µ–Ω–µ—Ü</th>
                    <th>–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏</th>
                    <th>–°—Ç—Ä–∞–Ω—ã</th>
                    <th>–ì–æ—Ä–æ–¥</th>
                    <th>–ß–∞—Å—Ç–æ—Ç–∞</th>
                    <th>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th>
                </tr>
    """
    
    for sub in subscribers:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if sub.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        refugee = "‚úÖ –î–∞" if sub.is_refugee else "‚ùå –ù–µ—Ç"
        created = sub.created_at.strftime('%Y-%m-%d %H:%M')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Å—Ç—Ä–∞–Ω—ã
        jobs = ', '.join(sub.get_selected_jobs()[:3]) if sub.get_selected_jobs() else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        if len(sub.get_selected_jobs()) > 3:
            jobs += f' (+{len(sub.get_selected_jobs())-3})'
            
        countries = ', '.join(sub.get_countries()) if sub.get_countries() else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        city = sub.city or '–ù–µ —É–∫–∞–∑–∞–Ω'
        frequency = sub.frequency or 'weekly'
        
        html += f"""
            <tr>
                <td>{sub.email}</td>
                <td>{status}</td>
                <td>{refugee}</td>
                <td class="job-list">{jobs}</td>
                <td>{countries}</td>
                <td>{city}</td>
                <td>{frequency}</td>
                <td>{created}</td>
            </tr>
        """
    
    html += """
        </table>
        
        <div class="email-logs">
            <h2>üì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ email –ª–æ–≥–∏</h2>
            <table>
                <tr>
                    <th>Email</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–∞—Ç–∞</th>
                </tr>
    """
    
    for log in email_logs:
        status_icon = "‚úÖ" if log.status == 'sent' else "‚ùå"
        sent_time = log.sent_at.strftime('%Y-%m-%d %H:%M')
        html += f"""
            <tr>
                <td>{log.email}</td>
                <td>{status_icon} {log.status}</td>
                <td>{sent_time}</td>
            </tr>
        """
    
    html += """
            </table>
        </div>
        
        </div>
    </body>
    </html>
    """
    
    return html  

@app.route('/admin/stats')
def admin_stats():
    """–ö—Ä–∞—Å–∏–≤–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not aggregator:
        return "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", 500
    
    stats = aggregator.get_cache_stats()
    
    return f"""
    <!DOCTYPE html>
    <html lang="{{ request.cookies.get('lang','ru') }}"
    <head>
        <title>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GlobalJobHunter</title>
        <meta charset="utf-8">
        <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>
        <style>
            body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: #333; }}
            .container {{ max-width: 1200px; margin: 0 auto; padding: 20px; }}
            .header {{ text-align: center; color: white; margin-bottom: 30px; }}
            .stats-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 30px 0; }}
            .stat-card {{ background: white; border-radius: 15px; padding: 25px; text-align: center; box-shadow: 0 8px 32px rgba(0,0,0,0.1); transition: transform 0.3s ease; }}
            .stat-card:hover {{ transform: translateY(-5px); }}
            .stat-number {{ font-size: 3em; font-weight: bold; margin: 10px 0; }}
            .stat-number.cache-hits {{ color: #28a745; }}
            .stat-number.cache-misses {{ color: #dc3545; }}
            .stat-number.api-requests {{ color: #007bff; }}
            .stat-number.jobs-found {{ color: #ffc107; }}
            .stat-number.hit-rate {{ color: #17a2b8; }}
            .sources-card {{ background: white; border-radius: 15px; padding: 25px; margin: 20px 0; box-shadow: 0 8px 32px rgba(0,0,0,0.1); }}
            .nav {{ display: flex; gap: 15px; justify-content: center; margin: 20px 0; flex-wrap: wrap; }}
            .nav a {{ background: rgba(255,255,255,0.2); color: white; padding: 12px 25px; text-decoration: none; border-radius: 25px; backdrop-filter: blur(10px); transition: background 0.3s ease; }}
            .nav a:hover {{ background: rgba(255,255,255,0.3); }}
            .cleanup-btn {{ background: linear-gradient(45deg, #ff6b6b, #ee5a24); color: white; padding: 12px 30px; border: none; border-radius: 25px; font-size: 16px; cursor: pointer; transition: transform 0.3s ease; }}
            .cleanup-btn:hover {{ transform: scale(1.05); }}
            .source-tag {{ display: inline-block; background: #007bff; color: white; padding: 5px 15px; border-radius: 20px; margin: 5px; font-size: 0.9em; }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GlobalJobHunter</h1>
                <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è</p>
            </div>
            
            <div class="nav">
                <a href="/">üè† –ì–ª–∞–≤–Ω–∞—è</a>
                <a href="/admin/subscribers?key={os.getenv('ADMIN_KEY')}">üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏</a>
                <a href="/health">üíö –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã</a>
                <a href="/admin/cache">üßπ –ö—ç—à</a>
            </div>
            
            <div class="sources-card">
                <h2>üîó –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π</h2>
                <div>
                    <span class="source-tag">üìã Adzuna API</span>
                    {"".join([f'<span class="source-tag">üåê {source.title()}</span>' for source in additional_aggregators.keys()])}
                </div>
            </div>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number cache-hits">{stats['cache_hits']}</div>
                    <h3>Cache Hits</h3>
                    <p>–£—Å–ø–µ—à–Ω—ã–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫–µ—à</p>
                </div>
                
                <div class="stat-card">
                    <div class="stat-number cache-misses">{stats['cache_misses']}</div>
                    <h3>Cache Misses</h3>
                    <p>–ü—Ä–æ–º–∞—Ö–∏ –∫–µ—à–∞</p>
                </div>
                
                <div class="stat-card">
                    <div class="stat-number hit-rate">{stats['cache_hit_rate']}</div>
                    <h3>Hit Rate</h3>
                    <p>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–µ—à–∞</p>
                </div>
                
                <div class="stat-card">
                    <div class="stat-number api-requests">{stats['api_requests']}</div>
                    <h3>API Requests</h3>
                    <p>–ó–∞–ø—Ä–æ—Å—ã –∫ –≤–Ω–µ—à–Ω–∏–º API</p>
                </div>
                
                <div class="stat-card">
                    <div class="stat-number jobs-found">{stats['total_jobs_found']}</div>
                    <h3>Jobs Found</h3>
                    <p>–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π</p>
                </div>
            </div>
            
            <div style="text-align: center; margin: 30px 0;">
                <form method="post" action="/api/cache/cleanup" style="display: inline;">
                    <button type="submit" class="cleanup-btn">
                        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
                    </button>
                </form>
            </div>
        </div>
    </body>
    </html>
    """

@app.route('/api/jobs/<job_id>')
def job_details(job_id):
   """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
   results_id = session.get('results_id')
   if not results_id or not aggregator or results_id not in aggregator.search_cache:
       return jsonify({'error': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏'}), 404
       
   job = aggregator.search_cache[results_id].get(job_id)
   
   if not job:
       return jsonify({'error': '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
   
   return jsonify(job)

@app.route('/favicon.ico')
def favicon():
   """–û–±—Ä–∞–±–æ—Ç–∫–∞ favicon"""
   return '', 204

# app.py
@app.route('/health')
def health_check():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã ‚Äî –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –º–æ–¥–∞–ª–∫–∏."""
    try:
        # 1) –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        lang = (request.args.get('lang') or request.cookies.get('lang') or 'ru').lower()
        if lang not in ('ru', 'uk', 'en'):
            lang = 'ru'

        # 2) –î–∞–Ω–Ω—ã–µ
        if aggregator:
            cache_stats = aggregator.get_cache_stats()
        else:
            cache_stats = {
                'api_requests': 0,
                'cache_hits': 0,
                'cache_misses': 0,
                'cache_hit_rate': '0.0%',
                'total_jobs_found': 0
            }
        additional_sources = list(additional_aggregators.keys()) if additional_aggregators else []

        # 3) –°–ª–æ–≤–∞—Ä—å
        T = {
            'ru': {
                'status_ok': '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
                'main_agg': '–û—Å–Ω–æ–≤–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä',
                'online': '–†–∞–±–æ—Ç–∞–µ—Ç',
                'offline': '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'add_sources': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏',
                'none': '–ù–µ—Ç',
                'api_requests': 'API –∑–∞–ø—Ä–æ—Å–æ–≤',
                'cache_hits': '–ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à',
                'cache_misses': '–ü—Ä–æ–º–∞—Ö–æ–≤ –∫–µ—à–∞',
                'cache_eff': '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–µ—à–∞',
                'total_found': '–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π',
                'checked_at': '–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏'
            },
            'en': {
                'status_ok': 'System is operating normally',
                'main_agg': 'Main aggregator',
                'online': 'Online',
                'offline': 'Offline',
                'add_sources': 'Additional sources',
                'none': 'None',
                'api_requests': 'API requests',
                'cache_hits': 'Cache hits',
                'cache_misses': 'Cache misses',
                'cache_eff': 'Cache hit rate',
                'total_found': 'Total jobs found',
                'checked_at': 'Checked at'
            },
            'uk': {
                'status_ok': '–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
                'main_agg': '–û—Å–Ω–æ–≤–Ω–∏–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä',
                'online': '–ü—Ä–∞—Ü—é—î',
                'offline': '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
                'add_sources': '–î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∂–µ—Ä–µ–ª–∞',
                'none': '–ù–µ–º–∞—î',
                'api_requests': '–ó–∞–ø–∏—Ç–∏ –¥–æ API',
                'cache_hits': '–í–ª—É—á–∞–Ω—å —É –∫–µ—à',
                'cache_misses': '–ü—Ä–æ–º–∞—Ö—ñ–≤ –∫–µ—à—É',
                'cache_eff': '–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–µ—à—É',
                'total_found': '–í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å—ñ–π',
                'checked_at': '–ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏'
            }
        }
        t = T[lang]

        # 4) HTML
        html = f"""
        <!DOCTYPE html>
        <html lang="{lang}">
        <head>
            <meta charset="utf-8">
            <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>
            <style>
                body {{ font-family: -apple-system, Segoe UI, Roboto, Arial; margin:0; padding:16px; background:#f7f7f9; }}
                .container {{ max-width: 720px; margin:0 auto; }}
                .status-card {{ background:#fff; border-radius:12px; padding:20px; box-shadow:0 4px 14px rgba(0,0,0,.06); }}
                .status-ok {{ color:#28a745; font-size:1.2rem; margin:0 0 12px; }}
                .status-item {{ display:flex; justify-content:space-between; gap:12px; padding:6px 0; border-bottom:1px solid #eee; }}
                .status-item:last-child {{ border-bottom:0; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="status-card">
                    <h2 class="status-ok">üü¢ {t['status_ok']}</h2>
                    <div class="status-item">
                        <span>{t['main_agg']}:</span>
                        <span>{'‚úÖ ' + t['online'] if aggregator else '‚ùå ' + t['offline']}</span>
                    </div>
                    <div class="status-item">
                        <span>{t['add_sources']}:</span>
                        <span>{', '.join(additional_sources) if additional_sources else t['none']}</span>
                    </div>
                    <div class="status-item"><span>{t['api_requests']}:</span><span>{cache_stats.get('api_requests', 0)}</span></div>
                    <div class="status-item"><span>{t['cache_hits']}:</span><span>{cache_stats.get('cache_hits', 0)}</span></div>
                    <div class="status-item"><span>{t['cache_misses']}:</span><span>{cache_stats.get('cache_misses', 0)}</span></div>
                    <div class="status-item"><span>{t['cache_eff']}:</span><span>{cache_stats.get('cache_hit_rate', '0.0%')}</span></div>
                    <div class="status-item"><span>{t['total_found']}:</span><span>{cache_stats.get('total_jobs_found', 0)}</span></div>
                    <div class="status-item"><span>{t['checked_at']}:</span><span>{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</span></div>
                </div>
            </div>
        </body>
        </html>
        """
        return html
    except Exception as e:
        return f"<pre>health error: {e}</pre>", 500

@app.errorhandler(404)
def not_found(error):
   return render_template('error.html', error="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"), 404

@app.errorhandler(500)
def internal_error(error):
   return render_template('error.html', error="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"), 500

@app.route('/subscription/manage')
def manage_subscription():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    email = request.args.get('email')
    if not email:
        flash('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞', 'error')
        return redirect(url_for('index'))
    
    subscriber = Subscriber.query.filter_by(email=email, is_active=True).first()
    if not subscriber:
        flash('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
        return redirect(url_for('index'))
    
    return render_template('manage_subscription.html', 
                         subscriber=subscriber,
                         job_categories=aggregator.specific_jobs if aggregator else {},
                         countries=aggregator.countries if aggregator else {})

@app.route('/subscription/update_preferences', methods=['POST'])
def update_subscription_preferences():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        email = request.form.get('email')
        if not email:
            return jsonify({'error': 'Email –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
        
        subscriber = Subscriber.query.filter_by(email=email, is_active=True).first()
        if not subscriber:
            return jsonify({'error': '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        # --- –Ø–ó–´–ö –ò–ù–¢–ï–†–§–ï–ô–°–ê: –±–µ—Ä—ë–º –∏–∑ —Ñ–æ—Ä–º—ã / cookie / –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ
        lang = (request.form.get('lang') or
                request.cookies.get('lang') or
                request.headers.get('X-Lang') or 'ru').lower()
        if lang in ('ru', 'en', 'uk'):
            subscriber.lang = lang
        # --- –∫–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–∫–∏

        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        subscriber.is_refugee = request.form.get('is_refugee') == 'on'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        selected_jobs = request.form.getlist('selected_jobs')
        if selected_jobs:
            subscriber.set_selected_jobs(selected_jobs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã
        countries = request.form.getlist('countries')
        if countries:
            subscriber.set_countries(countries)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏ —á–∞—Å—Ç–æ—Ç—É
        subscriber.city = request.form.get('city', '').strip() or None
        subscriber.frequency = request.form.get('frequency', 'weekly')
        
        db.session.commit()
        
        # ‚úÖ –û–¢–ü–†–ê–í–õ–Ø–ï–ú EMAIL –û –ò–ó–ú–ï–ù–ï–ù–ò–Ø–•
        try:
            send_preferences_update_email(app, subscriber)
            print(f"‚úÖ Email –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
            message = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            message = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.'
        
        return jsonify({'success': True, 'message': message})
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π'}), 500
        
    

@app.route('/subscribe/update', methods=['POST'])
def update_existing_subscription():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    print("üö® –§–£–ù–ö–¶–ò–Ø –í–´–ó–í–ê–ù–ê! üö®")  # –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£ –í –°–ê–ú–û–ï –ù–ê–ß–ê–õ–û
    try:
        data = request.json or request.form.to_dict()
        email = data.get('email', '').strip().lower()
        action = data.get('action')  # 'replace' –∏–ª–∏ 'merge'
        
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É: email={email}, action={action}")  # –î–û–ë–ê–í–õ–ï–ù–û
        
        preferences = session.get('last_search_preferences', {})
        existing = Subscriber.query.filter_by(email=email).first()
        
        if not existing:
            return jsonify({'error': '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫ –Ω–∞–π–¥–µ–Ω: {existing.email}")  # –î–û–ë–ê–í–õ–ï–ù–û
        
        if action == 'replace':
            print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏...")  # –î–û–ë–ê–í–õ–ï–ù–û
            # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            existing.set_selected_jobs(preferences.get('selected_jobs', []))
            existing.set_countries(preferences.get('countries', []))
            existing.city = preferences.get('city')
            existing.is_refugee = preferences.get('is_refugee', True)
            
            db.session.commit()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")  # –î–û–ë–ê–í–õ–ï–ù–û
            
            # –û–¢–ü–†–ê–í–õ–Ø–ï–ú EMAIL
            print(f"üìß –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –Ω–∞ {email}...")  # –î–û–ë–ê–í–õ–ï–ù–û
            try:
                result = send_preferences_update_email(app, existing)
                print(f"üìß –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {result}")  # –î–û–ë–ê–í–õ–ï–ù–û
                if result:
                    print(f"‚úÖ Email –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
                else:
                    print(f"‚ùå Email –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
            except Exception as e:
                print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
                import traceback
                traceback.print_exc()  # –î–û–ë–ê–í–õ–ï–ù–û
            
            return jsonify({'success': True, 'message': '–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –°—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–æ–≤—ã–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'})
            
        elif action == 'merge':
            print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...")  # –î–û–ë–ê–í–õ–ï–ù–û
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            current_jobs = set(existing.get_selected_jobs() or [])
            current_countries = set(existing.get_countries() or [])
            
            new_jobs = set(preferences.get('selected_jobs', []))
            new_countries = set(preferences.get('countries', []))
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
            merged_jobs = list(current_jobs.union(new_jobs))
            merged_countries = list(current_countries.union(new_countries))
            
            existing.set_selected_jobs(merged_jobs)
            existing.set_countries(merged_countries)
            
            db.session.commit()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")  # –î–û–ë–ê–í–õ–ï–ù–û
            
            # –û–¢–ü–†–ê–í–õ–Ø–ï–ú EMAIL
            print(f"üìß –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –Ω–∞ {email}...")  # –î–û–ë–ê–í–õ–ï–ù–û
            try:
                result = send_preferences_update_email(app, existing)
                print(f"üìß –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {result}")  # –î–û–ë–ê–í–õ–ï–ù–û
                if result:
                    print(f"‚úÖ Email –æ–± –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
                else:
                    print(f"‚ùå Email –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
            except Exception as e:
                print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
                import traceback
                traceback.print_exc()  # –î–û–ë–ê–í–õ–ï–ù–û
            
            return jsonify({'success': True, 'message': f'–ü–æ–¥–ø–∏—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ {len(merged_jobs)} –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º –≤ {len(merged_countries)} —Å—Ç—Ä–∞–Ω–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'})
        
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'}), 400
        
    except Exception as e:
        print(f"‚ùå –û–ë–©–ê–Ø –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        import traceback
        traceback.print_exc()  # –î–û–ë–ê–í–õ–ï–ù–û
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏'}), 500
   
@app.route('/admin')
def admin_login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É"""
    error_message = '<div class="error">‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å</div>' if request.args.get('error') else ''
    
    return f"""
    <!DOCTYPE html>
    <html lang="{{ request.cookies.get('lang','ru') }}"
    <head>
        <title>–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É</title>
        <meta charset="utf-8">
        <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>
        <style>
            body {{ font-family: Arial; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                   height: 100vh; display: flex; align-items: center; justify-content: center; margin: 0; }}
            .login-form {{ background: white; padding: 40px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); 
                         width: 400px; text-align: center; }}
            .form-group {{ margin: 20px 0; text-align: left; }}
            label {{ display: block; margin-bottom: 5px; font-weight: bold; }}
            input[type="text"], input[type="password"] {{ width: 100%; padding: 12px; border: 1px solid #ddd; 
                                                        border-radius: 8px; font-size: 16px; box-sizing: border-box; }}
            .btn-login {{ background: #007bff; color: white; padding: 12px 30px; border: none; 
                        border-radius: 8px; font-size: 16px; cursor: pointer; width: 100%; }}
            .btn-login:hover {{ background: #0056b3; }}
            .error {{ color: red; margin-top: 10px; }}
            h2 {{ color: #333; margin-bottom: 30px; }}
        </style>
    </head>
    <body>
        <div class="login-form">
            <h2>üîê –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É</h2>
            <form method="POST" action="/admin/login">
                <div class="form-group">
                    <label for="username">–õ–æ–≥–∏–Ω:</label>
                    <input type="text" id="username" name="username" required>
                </div>
                <div class="form-group">
                    <label for="password">–ü–∞—Ä–æ–ª—å:</label>
                    <input type="password" id="password" name="password" required>
                </div>
                <button type="submit" class="btn-login">–í–æ–π—Ç–∏</button>
                {error_message}
            </form>
        </div>
    </body>
    </html>
    """

@app.route('/admin/login', methods=['POST'])
def admin_login():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É"""
    username = request.form.get('username')
    password = request.form.get('password')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if username == 'admin' and password == 'VsemSosat':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        session['admin_logged_in'] = True
        return redirect(url_for('admin_dashboard'))
    else:
        return redirect(url_for('admin_login_page') + '?error=1')
    
@app.route('/admin/send-emails', methods=['POST'])
def admin_send_emails():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    try:
        print("üîÑ –ê–¥–º–∏–Ω –∑–∞–ø—É—Å—Ç–∏–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        active_subscribers = Subscriber.query.filter_by(is_active=True).all()
        total_subscribers = Subscriber.query.count()
        
        print(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: –≤—Å–µ–≥–æ={total_subscribers}, –∞–∫—Ç–∏–≤–Ω—ã—Ö={len(active_subscribers)}")
        
        if len(active_subscribers) == 0:
            if total_subscribers == 0:
                flash('‚ÑπÔ∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'info')
            else:
                flash(f'‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {total_subscribers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –Ω–æ –≤—Å–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã. –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.', 'warning')
            
            print("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return redirect('/admin/dashboard')
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        from email_service import send_job_notifications
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã
        sent_count = send_job_notifications(app, aggregator, additional_aggregators)
        
        if sent_count > 0:
            flash(f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(active_subscribers)} –ø–∏—Å–µ–º', 'success')
            print(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count} –ø–∏—Å–µ–º")
        else:
            flash(f'‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –Ω–∏ –æ–¥–Ω–æ –ø–∏—Å—å–º–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.', 'warning')
            print(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: 0 –ø–∏—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        flash(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}', 'error')
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        
    return redirect('/admin/dashboard')

@app.route('/admin/test-email', methods=['GET', 'POST'])  
def admin_test_email():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"""
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login_page'))
    
    if request.method == 'GET':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ email
        return """
        <!DOCTYPE html>
        <html lang="{{ request.cookies.get('lang','ru') }}"
        <head>
            <title>–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞</title>
            <meta charset="utf-8">
            <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>
            <style>
                body { font-family: Arial; background: #f8f9fa; padding: 20px; }
                .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
                .btn { background: #007bff; color: white; padding: 12px 25px; border: none; border-radius: 5px; cursor: pointer; text-decoration: none; display: inline-block; margin: 10px 5px; }
                .btn-secondary { background: #6c757d; }
                .form-group { margin: 20px 0; }
                label { display: block; margin-bottom: 5px; font-weight: bold; }
                input[type="email"] { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px; box-sizing: border-box; }
                .alert { padding: 15px; margin: 20px 0; border-radius: 5px; background: #d1ecf1; border: 1px solid #bee5eb; color: #0c5460; }
            </style>
        </head>
        <body>
            <div class="container">
                <h2>üìß –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email</h2>
                
                <div class="alert">
                    <strong>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong><br>
                    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email –∞–¥—Ä–µ—Å.
                    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã email —Å–∏—Å—Ç–µ–º—ã –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–∏—Å–µ–º.
                </div>
                
                <form method="post">
                    <div class="form-group">
                        <label for="test_email">Email –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:</label>
                        <input type="email" id="test_email" name="test_email" required placeholder="test@example.com">
                    </div>
                    
                    <button type="submit" class="btn">üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ</button>
                    <a href="/admin/dashboard" class="btn btn-secondary">‚ùå –û—Ç–º–µ–Ω–∞</a>
                </form>
            </div>
        </body>
        </html>
        """
    
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email
        try:
            test_email = request.form.get('test_email', '').strip()
            
            if not test_email or '@' not in test_email:
                flash('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å', 'error')
                return redirect('/admin/test-email')
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            test_preferences = {
                'is_refugee': True,
                'selected_jobs': ['–í–æ–¥–∏—Ç–µ–ª—å', '–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π', '–û—Ñ–∏—Ü–∏–∞–Ω—Ç'],
                'countries': ['de', 'pl'],
                'city': 'Berlin'
            }
            
            # –ò—â–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
            if aggregator:
                test_jobs = aggregator.search_specific_jobs(test_preferences)
                if not test_jobs:
                    # –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
                    from email_service import create_fallback_jobs
                    test_jobs = create_fallback_jobs(test_preferences)
            else:
                from email_service import create_fallback_jobs
                test_jobs = create_fallback_jobs(test_preferences)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π email
            from email_service import send_job_email
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!
            class TestSubscriber:
                def __init__(self, email):
                    self.email = email
                    self.id = 'test'
            
            test_subscriber = TestSubscriber(test_email)
            
            success = send_job_email(app, test_subscriber, test_jobs[:10], test_preferences)
            
            if success:
                flash(f'‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {test_email}!', 'success')
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {test_email}")
            else:
                flash(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ {test_email}', 'error')
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞ –Ω–∞ {test_email}")
                
        except Exception as e:
            flash(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}', 'error')
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        
        return redirect('/admin/dashboard')   

@app.route('/admin/dashboard')
def admin_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏ —Å flash —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login_page'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        total_subscribers = Subscriber.query.count()
        active_subscribers = Subscriber.query.filter_by(is_active=True).count()
    except:
        total_subscribers = 0
        active_subscribers = 0
    
    return render_template_string(f"""
    <!DOCTYPE html>
    <html lang="{{ request.cookies.get('lang','ru') }}"
    <head>
        <title>–ê–¥–º–∏–Ω–∫–∞ GlobalJobHunter</title>
        <meta charset="utf-8">
        <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>
        <style>
            body {{ font-family: Arial; background: #f8f9fa; margin: 0; padding: 20px; }}
            .container {{ max-width: 1200px; margin: 0 auto; }}
            .header {{ background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; 
                       display: flex; justify-content: space-between; align-items: center; }}
            .nav {{ display: flex; gap: 15px; }}
            .nav a {{ background: #007bff; color: white; padding: 10px 20px; text-decoration: none; 
                     border-radius: 5px; transition: background 0.3s; }}
            .nav a:hover {{ background: #0056b3; }}
            .logout {{ background: #dc3545; }}
            .logout:hover {{ background: #c82333; }}
            .backup-section {{ background: white; padding: 30px; border-radius: 8px; margin: 20px 0; }}
            .backup-btn {{ display: inline-block; padding: 12px 25px; margin: 10px; text-decoration: none; 
                          border-radius: 5px; font-weight: bold; transition: all 0.3s; border: none; cursor: pointer; font-size: 16px; }}
            .btn-download {{ background: #28a745; color: white; }}
            .btn-download:hover {{ background: #218838; color: white; }}
            .btn-upload {{ background: #ffc107; color: #000; }}
            .btn-upload:hover {{ background: #e0a800; color: #000; }}
            .stats-info {{ background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 15px 0; 
                          border-left: 4px solid #2196f3; }}
        </style>
    </head>
    <body>
        <div class="container">
            <!-- Flash —Å–æ–æ–±—â–µ–Ω–∏—è -->
            {{% with messages = get_flashed_messages(with_categories=true) %}}
                {{% if messages %}}
                    <div style="margin: 20px 0;">
                        {{% for category, message in messages %}}
                            <div class="alert alert-{{{{ 'success' if category == 'success' else 'danger' if category == 'error' else 'warning' if category == 'warning' else 'info' }}}}" 
                                 style="padding: 15px; margin: 10px 0; border-radius: 8px; 
                                        background: {{{{ '#d4edda' if category == 'success' else '#f8d7da' if category == 'error' else '#fff3cd' if category == 'warning' else '#d1ecf1' }}}}; 
                                        color: {{{{ '#155724' if category == 'success' else '#721c24' if category == 'error' else '#856404' if category == 'warning' else '#0c5460' }}}}; 
                                        border: 1px solid {{{{ '#c3e6cb' if category == 'success' else '#f5c6cb' if category == 'error' else '#ffeaa7' if category == 'warning' else '#bee5eb' }}}};">
                                <strong>
                                    {{{{ '‚úÖ' if category == 'success' else '‚ùå' if category == 'error' else '‚ö†Ô∏è' if category == 'warning' else '‚ÑπÔ∏è' }}}}
                                </strong>
                                {{{{ message }}}}
                            </div>
                        {{% endfor %}}
                    </div>
                {{% endif %}}
            {{% endwith %}}
            
            <div class="header">
                <h1>üõ†Ô∏è –ê–¥–º–∏–Ω–∫–∞ GlobalJobHunter</h1>
                <div class="nav">
                    <a href="/admin/subscribers_secure">üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏</a>
                    <a href="/admin/stats_secure">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
                    <a href="/health">üíö –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã</a>
                    <a href="/admin/cache">üßπ –ö—ç—à</a>              
                    <a href="/admin/logout" class="logout">üö™ –í—ã–π—Ç–∏</a>
                </div>
            </div>
            
            <div style="background: white; padding: 30px; border-radius: 8px; text-align: center;">
                <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!</h2>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –≤—ã—à–µ</p>
                
                <div class="stats-info">
                    <strong>üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong><br>
                    üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_subscribers} | 
                    ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_subscribers} | 
                    ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_subscribers - active_subscribers}
                </div>
            </div>
            
            <!-- –°–µ–∫—Ü–∏—è Email —Ä–∞—Å—Å—ã–ª–∫–∏ -->
            <div class="backup-section">
                <h3>üìß Email —Ä–∞—Å—Å—ã–ª–∫–∞</h3>
                <p>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∏–ª–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É</p>
                <div style="text-align: center;">
                    <form method="POST" action="/admin/send-emails" style="display: inline;">
                        <button type="submit" class="backup-btn" 
                                onclick="return confirm('–û—Ç–ø—Ä–∞–≤–∏—Ç—å email –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?\\n\\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {active_subscribers}')"
                                style="background: #007bff; color: white;">
                            üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–µ–π—á–∞—Å ({active_subscribers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
                        </button>
                    </form>
                    <a href="/admin/test-email" class="backup-btn" 
                       style="background: #28a745; color: white; text-decoration: none;">
                        üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                    </a>
                </div>
            </div>
            
            <div class="backup-section">
                <h3>üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö</h3>
                <p>–°–∫–∞—á–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é</p>
                <div style="text-align: center;">
                    <a href="/admin/download_backup" class="backup-btn btn-download">üì¶ –°–∫–∞—á–∞—Ç—å –±–∞–∑—É</a>
                    <a href="/admin/upload_backup" class="backup-btn btn-upload">üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É</a>
                </div>
            </div>
        </div>
    </body>
    </html>
    """)
# ====== –ö–≠–®: –∫–∞—Ç–∞–ª–æ–≥–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã ======
CACHE_DIRS = [
    Path("cache"),
    Path("search_cache"),
    Path("temp_jobs"),
]
CACHE_PATTERNS = ("*.pkl", "*.json", "*.cache", "*.tmp")

def _human_bytes(n: int) -> str:
    for unit in ("B", "KB", "MB", "GB", "TB"):
        if n < 1024:
            return f"{n:.1f} {unit}"
        n /= 1024
    return f"{n:.1f} PB"

def _iter_cache_files():
    """–ò—Ç–µ—Ä–∏—Ä—É–µ—Ç –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –∫—ç—à–∞ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–∞–ª–æ–≥–∞—Ö."""
    for base in CACHE_DIRS:
        if not base.exists():
            continue
        for pattern in CACHE_PATTERNS:
            yield from base.rglob(pattern)

def cleanup_old_cache(days: int = 3):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    cutoff = time.time() - days * 86400
    stat = {"deleted": 0, "kept": 0, "freed": 0, "errors": 0}

    for f in _iter_cache_files():
        try:
            mtime = f.stat().st_mtime
            if mtime < cutoff:
                size = f.stat().st_size
                f.unlink()
                stat["deleted"] += 1
                stat["freed"] += size
            else:
                stat["kept"] += 1
        except Exception:
            stat["errors"] += 1

    # –ø–æ–¥—á–∏—Å—Ç–∏–º –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏
    for base in CACHE_DIRS:
        if base.exists():
            for d in sorted([p for p in base.rglob("*") if p.is_dir()], reverse=True):
                try:
                    next(d.iterdir())
                except StopIteration:
                    d.rmdir()
                except Exception:
                    pass
    return stat

@app.route("/admin/cache", methods=["GET", "POST"])
def admin_cache_page():
    # —Ç–æ—Ç –∂–µ —Ñ–ª–∞–≥, —á—Ç–æ –∏ –≤ —Ç–≤–æ–µ–π –∞–¥–º–∏–Ω–∫–µ
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login_page'))

    message = ""
    if request.method == "POST":
        mode = request.form.get("mode", "old")
        days = int(request.form.get("days", 3) or 3)

        if mode == "all":
            st = purge_all_cache()
            message = f"–£–¥–∞–ª–µ–Ω–æ {st['deleted']} —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {_human_bytes(st['freed'])}. –û—à–∏–±–æ–∫: {st['errors']}."
        else:
            st = cleanup_old_cache(days=days)
            message = (
                f"–£–¥–∞–ª–µ–Ω–æ {st['deleted']} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {_human_bytes(st['freed'])}. "
                f"–û—Å—Ç–∞–≤–ª–µ–Ω–æ {st['kept']}. –û—à–∏–±–æ–∫: {st['errors']}."
            )

    return render_template_string(f"""
    <!DOCTYPE html>
    <html lang="{{ request.cookies.get('lang','ru') }}"
    <head>
        <meta charset="utf-8">
        <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>
        <title>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º ‚Äî Admin</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    </head>
    <body class="p-4">
      <div class="container">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º</h2>
          <div>
            <a class="btn btn-secondary" href="{url_for('admin_dashboard')}">‚Üê –í –∞–¥–º–∏–Ω–∫—É</a>
          </div>
        </div>

        {f"<div class='alert alert-info'>{message}</div>" if message else ""}

        <div class="card mb-4">
          <div class="card-body">
            <h5>–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫—ç—à</h5>
            <form method="post" class="row g-2 align-items-center" onsubmit="return confirm('–£–¥–∞–ª–∏—Ç—å –∫—ç—à —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π?');">
              <input type="hidden" name="mode" value="old">
              <div class="col-auto">
                <label for="days" class="col-form-label">–°—Ç–∞—Ä—à–µ (–¥–Ω–µ–π):</label>
              </div>
              <div class="col-auto">
                <input id="days" name="days" type="number" value="3" min="1" class="form-control">
              </div>
              <div class="col-auto">
                <button class="btn btn-warning" type="submit">–û—á–∏—Å—Ç–∏—Ç—å</button>
              </div>
            </form>
          </div>
        </div>

        <div class="card">
          <div class="card-body">
            <h5>–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –∫—ç—à</h5>
            <form method="post" onsubmit="return confirm('–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –í–°–Å? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.');">
              <input type="hidden" name="mode" value="all">
              <button class="btn btn-danger" type="submit">–£–¥–∞–ª–∏—Ç—å –≤—Å—ë</button>
            </form>
          </div>
        </div>
      </div>
    </body>
    </html>
    """)


def purge_all_cache():
    """–£–¥–∞–ª—è–µ—Ç –≤–æ–æ–±—â–µ –≤—Å–µ —Ñ–∞–π–ª—ã –∫—ç—à–∞ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–∞–ª–æ–≥–∞—Ö."""
    stat = {"deleted": 0, "freed": 0, "errors": 0}
    for f in _iter_cache_files():
        try:
            size = f.stat().st_size
            f.unlink()
            stat["deleted"] += 1
            stat["freed"] += size
        except Exception:
            stat["errors"] += 1

    for base in CACHE_DIRS:
        if base.exists():
            for d in sorted([p for p in base.rglob("*") if p.is_dir()], reverse=True):
                try:
                    next(d.iterdir())
                except StopIteration:
                    d.rmdir()
                except Exception:
                    pass
    return stat

@app.route('/admin/logout')
def admin_logout():
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"""
    session.pop('admin_logged_in', None)
    return redirect(url_for('index'))

@app.route('/admin/subscribers_secure')
def admin_subscribers_secure():
    """–ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login_page'))
    
    try:
        subscribers = Subscriber.query.order_by(Subscriber.created_at.desc()).all()
        email_logs = EmailLog.query.order_by(EmailLog.sent_at.desc()).limit(10).all()
        
        stats = {
            'total': Subscriber.query.count(),
            'active': Subscriber.query.filter_by(is_active=True).count(),
            'inactive': Subscriber.query.filter_by(is_active=False).count(),
            'emails_sent': EmailLog.query.filter_by(status='sent').count(),
            'emails_failed': EmailLog.query.filter_by(status='failed').count()
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers_rows = ""
        for sub in subscribers:
            try:
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if sub.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                refugee = "‚úÖ –î–∞" if sub.is_refugee else "‚ùå –ù–µ—Ç"
                created = sub.created_at.strftime('%Y-%m-%d %H:%M')
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Å—Ç—Ä–∞–Ω—ã –ë–ï–ó–û–ü–ê–°–ù–û
                try:
                    jobs_list = sub.get_selected_jobs()
                    jobs = ', '.join(jobs_list[:3]) if jobs_list else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    if len(jobs_list) > 3:
                        jobs += f' (+{len(jobs_list)-3})'
                except Exception as e:
                    jobs = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è {sub.email}: {e}")
                
                try:
                    countries_list = sub.get_countries()
                    countries = ', '.join(countries_list) if countries_list else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                except Exception as e:
                    countries = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω –¥–ª—è {sub.email}: {e}")
                
                city = sub.city or '–ù–µ —É–∫–∞–∑–∞–Ω'
                
                subscribers_rows += f"""
                    <tr>
                        <td>{sub.email}</td>
                        <td>{status}</td>
                        <td>{refugee}</td>
                        <td class="job-list">{jobs}</td>
                        <td>{countries}</td>
                        <td>{city}</td>
                        <td>{created}</td>
                    </tr>"""
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ {sub.id}: {e}")
                subscribers_rows += f"""
                    <tr>
                        <td>{sub.email}</td>
                        <td>‚ùå –û—à–∏–±–∫–∞</td>
                        <td>-</td>
                        <td>-</td>
                        <td>-</td>
                        <td>-</td>
                        <td>-</td>
                    </tr>"""
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ email –ª–æ–≥–æ–≤ –ë–ï–ó–û–ü–ê–°–ù–û
        email_logs_rows = ""
        for log in email_logs:
            try:
                status_icon = "‚úÖ" if log.status == 'sent' else "‚ùå"
                sent_time = log.sent_at.strftime('%Y-%m-%d %H:%M')
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ email
                if log.subscriber:
                    email = log.subscriber.email
                else:
                    # –ï—Å–ª–∏ subscriber —É–¥–∞–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID –∏–ª–∏ email –∏–∑ –ª–æ–≥–∞
                    email = f"–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫ (ID: {log.subscriber_id})"
                
                email_logs_rows += f"""
                    <tr>
                        <td>{email}</td>
                        <td>{status_icon} {log.status}</td>
                        <td>{sent_time}</td>
                    </tr>"""
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞ {log.id}: {e}")
                email_logs_rows += f"""
                    <tr>
                        <td>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</td>
                        <td>‚ùå –û—à–∏–±–∫–∞</td>
                        <td>-</td>
                    </tr>"""
                
        # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π HTML
        html = f"""
        <!DOCTYPE html>
        <html lang="{{ request.cookies.get('lang','ru') }}"
        <head>
            <title>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ - –ê–¥–º–∏–Ω–∫–∞</title>
            <meta charset="utf-8">
            <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; background: #f8f9fa; }}
                .container {{ max-width: 1200px; margin: 0 auto; }}
                table {{ border-collapse: collapse; width: 100%; margin: 20px 0; background: white; }}
                th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
                th {{ background-color: #007bff; color: white; }}
                .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }}
                .stat-card {{ background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
                .stat-number {{ font-size: 2em; font-weight: bold; color: #007bff; }}
                .nav {{ display: flex; gap: 20px; margin: 20px 0; }}
                .nav a {{ background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; }}
                .job-list {{ font-size: 0.9em; color: #666; }}
                .error {{ color: #dc3545; font-weight: bold; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üìß –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ GlobalJobHunter</h1>
                
                <div class="nav">
                    <a href="/admin/dashboard">üè† –ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω–∫–∏</a>
                    <a href="/admin/stats_secure">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
                    <a href="/admin/cache">üßπ –ö—ç—à</a>
                    <a href="/admin/logout">üö™ –í—ã–π—Ç–∏</a>
                </div>
                
                <div class="stats">
                    <div class="stat-card">
                        <div class="stat-number">{stats['total']}</div>
                        <p>–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</p>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{stats['active']}</div>
                        <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö</p>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{stats['inactive']}</div>
                        <p>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö</p>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{stats['emails_sent']}</div>
                        <p>Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</p>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{stats['emails_failed']}</div>
                        <p>Email –æ—à–∏–±–æ–∫</p>
                    </div>
                </div>
                
                <h2>üìã –ü–æ–¥–ø–∏—Å—á–∏–∫–∏</h2>
                <table>
                    <tr>
                        <th>Email</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–ë–µ–∂–µ–Ω–µ—Ü</th>
                        <th>–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏</th>
                        <th>–°—Ç—Ä–∞–Ω—ã</th>
                        <th>–ì–æ—Ä–æ–¥</th>
                        <th>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th>
                    </tr>
                    {subscribers_rows}
                </table>
                
                <h2>üì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ email –ª–æ–≥–∏</h2>
                <table>
                    <tr>
                        <th>Email</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–î–∞—Ç–∞</th>
                    </tr>
                    {email_logs_rows}
                </table>
            </div>
        </body>
        </html>"""
        
        return html
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ admin_subscribers_secure: {e}")
        import traceback
        traceback.print_exc()
        return f"""
        <html lang="{{ request.cookies.get('lang','ru') }}"
        <body style="font-family: Arial; padding: 40px;">
            <h1 class="error">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–∫–∏</h1>
            <p>–û—à–∏–±–∫–∞: {str(e)}</p>
            <a href="/admin/dashboard">üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É</a>
        </body>
        </html>
        """, 500
    
def _pretty_json(value):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ JSON/—Å–ø–∏—Å–∫–∞/—Å–ª–æ–≤–∞—Ä—è."""
    try:
        if value is None or value == "":
            return ""
        # –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å JSON ‚Äî —Ä–∞—Å–ø–∞—Ä—Å–∏–º
        if isinstance(value, str):
            s = value.strip()
            if (s.startswith('[') and s.endswith(']')) or (s.startswith('{') and s.endswith('}')):
                value = json.loads(s)
        if isinstance(value, (list, tuple, set)):
            return ", ".join(map(str, value))
        if isinstance(value, dict):
            return ", ".join(f"{k}: {v}" for k, v in value.items())
        return str(value)
    except Exception:
        return str(value)


@app.route('/admin/stats_secure')
def admin_stats_secure():
    # –¥–æ—Å—Ç—É–ø
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login_page'))

    # –º–µ—Ç—Ä–∏–∫–∏ –∫–µ—à–∞/–∞–≥–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
    stats = aggregator.get_cache_stats() if aggregator else {
        'cache_hits': 0, 'api_requests': 0, 'total_jobs_found': 0
    }

    # –ø—É—Ç—å –∫ —Å—Ç–∞—Ç–∏–∫–µ –±–µ–∑ Jinja –≤ HTML-—Å—Ç—Ä–æ–∫–µ
    script_src = url_for('static', filename='js/localization.js')

    # –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (100) –∏ —Å—á—ë—Ç—á–∏–∫ –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º –¥–ª—è –ø–∏—Ä–æ–≥–∞
    try:
        from analytics import recent_events, SearchClick, PartnerClick
        from database import db
        sc, pc = recent_events(limit=100)
        partner_clicks_count_last = len(pc)

        # –ò—Ç–æ–≥–∏ –ø–æ –ë–î (–≤—Å—ë –≤—Ä–µ–º—è)
        total_search_clicks = db.session.query(func.count(SearchClick.id)).scalar() or 0
        total_partner_clicks = db.session.query(func.count(PartnerClick.id)).scalar() or 0

        # –°–µ–π—á–∞—Å –≤—Å–µ –∏—Å—Ö–æ–¥—è—â–∏–µ –∫–ª–∏–∫–∏ –∏–¥—É—Ç –Ω–∞ —Å–∞–π—Ç—ã-–ø–∞—Ä—Ç–Ω—ë—Ä—ã (–ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ PartnerClick),
        # –ø–æ—ç—Ç–æ–º—É –∏—Ç–æ–≥ –ø–æ –∏—Å—Ö–æ–¥—è—â–∏–º = –∏—Ç–æ–≥ –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º
        total_out_clicks = total_partner_clicks

        # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º
        from collections import Counter
        partner_counter = Counter((p.partner or p.target_domain or 'unknown').strip() for p in pc)
        import json as _json
        labels_json = _json.dumps(list(partner_counter.keys()), ensure_ascii=False)
        values_json = _json.dumps([partner_counter[k] for k in partner_counter], ensure_ascii=False)

    except Exception as e:
        app.logger.exception("analytics.recent_events failed: %s", e)
        sc, pc = [], []
        partner_clicks_count_last = 0
        total_search_clicks = 0
        total_partner_clicks = 0
        total_out_clicks = 0
        labels_json = "[]"
        values_json = "[]"

    h = html_escape  # –∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å

    # === —Ç–∞–±–ª–∏—Ü–∞ ¬´–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É¬ª —Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º ===
    def _details_city_query(c):
        v = getattr(c, "city_query", None)
        return f'<div><strong>City query:</strong> {h(v)}</div>' if v else ''

    def _details_ua(obj):
        ua = getattr(obj, "user_agent", None)
        return f'<div><strong>User-Agent:</strong> <span class="mono small-ua">{h(ua)}</span></div>' if ua else ''

    search_rows_parts = []
    for i, c in enumerate(sc):
        row_id = f"details-s-{i}"
        countries_txt = pretty_json(c.countries)
        jobs_txt = pretty_json(c.jobs)
        search_rows_parts.append(f"""
<tr>
  <td class="mono">
    <button class="toggle btn btn-link p-0" data-target="{row_id}" aria-expanded="false" title="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏">
      {c.created_at:%Y-%m-%d}<br>{c.created_at:%H:%M:%S}
    </button>
  </td>
  <td class="mono">{h(c.ip)}</td>
  <td>{h(c.country or '')}</td>
  <td>{h(c.city or '')}</td>
  <td class="mono">{h(c.lang or '')}</td>
  <td><span class="badge {'bg-success' if getattr(c,'is_refugee',False) else 'bg-secondary'}">{'–î–∞' if getattr(c,'is_refugee',False) else '–ù–µ—Ç'}</span></td>
  <td><div class="line-clamp-2" title="{h(countries_txt)}">{h(countries_txt)}</div></td>
  <td><div class="line-clamp-2" title="{h(jobs_txt)}">{h(jobs_txt)}</div></td>
</tr>
<tr id="{row_id}" class="details-row">
  <td colspan="8">
    <div class="details">
      <div><strong>IP:</strong> {h(c.ip)} | <strong>–Ø–∑—ã–∫:</strong> {h(c.lang or '')}</div>
      <div><strong>–°—Ç—Ä–∞–Ω–∞:</strong> {h(c.country or '')} | <strong>–ì–æ—Ä–æ–¥:</strong> {h(c.city or '')}</div>
      <div><strong>–°—Ç—Ä–∞–Ω—ã –ø–æ–∏—Å–∫–∞:</strong> {h(countries_txt)}</div>
      <div><strong>–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏:</strong> {h(jobs_txt)}</div>
      {_details_city_query(c)}{_details_ua(c)}
    </div>
  </td>
</tr>
""")
    search_rows = "".join(search_rows_parts) or '<tr><td colspan="8" class="text-center text-muted">–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td></tr>'

    # === —Ç–∞–±–ª–∏—Ü–∞ ¬´–ü–µ—Ä–µ—Ö–æ–¥—ã –∫ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º¬ª —Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º ===
    partner_rows_parts = []
    for i, p in enumerate(pc):
        row_id = f"details-p-{i}"
        link = (p.target_url or '').strip()
        partner_name = (p.partner or p.target_domain or '').strip()
        title = p.job_title or ''
        link_html = f'<div><strong>–ì–ª—É–±–æ–∫–∞—è —Å—Å—ã–ª–∫–∞:</strong> <a href="{h(link)}" target="_blank" rel="noopener">{h(link)}</a></div>' if link else ''
        partner_rows_parts.append(f"""
<tr>
  <td class="mono">
    <button class="toggle btn btn-link p-0" data-target="{row_id}" aria-expanded="false" title="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏">
      {p.created_at:%Y-%m-%d}<br>{p.created_at:%H:%M:%S}
    </button>
  </td>
  <td class="mono">{h(p.ip)}</td>
  <td>{h(p.country or '')}</td>
  <td>{h(p.city or '')}</td>
  <td class="mono">{h(p.lang or '')}</td>
  <td>{h(partner_name)}</td>
  <td class="mono">{h(p.job_id or '')}</td>
  <td><div class="line-clamp-2" title="{h(title)}">{h(title)}</div></td>
  <td>{(f'<a class="btn btn-sm btn-outline-primary" href="{h(link)}" target="_blank" rel="noopener">–û—Ç–∫—Ä—ã—Ç—å</a>') if link else ''}</td>
</tr>
<tr id="{row_id}" class="details-row">
  <td colspan="9">
    <div class="details">
      <div><strong>–ü–∞—Ä—Ç–Ω—ë—Ä:</strong> {h(partner_name)}</div>
      <div><strong>Job ID:</strong> <span class="mono">{h(p.job_id or '')}</span></div>
      {link_html}{_details_ua(p)}
    </div>
  </td>
</tr>
""")
    partner_rows = "".join(partner_rows_parts) or '<tr><td colspan="9" class="text-center text-muted">–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td></tr>'

    # –∫–∞—Ä—Ç–æ—á–∫–∏-–º–µ—Ç—Ä–∏–∫–∏
    cache_hits = stats.get('cache_hits', 0)
    api_requests = stats.get('api_requests', 0)
    total_jobs_found = stats.get('total_jobs_found', 0)

    return f"""
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <title>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –ê–¥–º–∏–Ω–∫–∞</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <script defer src="{script_src}"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4"></script>
  <style>
    body {{ background:#f6f7fb; }}
    .stat-card, .chart-card {{ background:#fff; border:1px solid #eaeefc; border-radius:12px; }}
    .card-num {{ font-size:32px; font-weight:700; }}
    .mono {{ font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }}
    .table thead th {{ position: sticky; top: 0; background: #fff; z-index: 2; }}
    .table td, .table th {{ vertical-align: middle; }}
    .table-bordered > :not(caption) > * > * {{ border-color: #e5e9ff; }}
    .table-striped>tbody>tr:nth-of-type(odd) > * {{ background: #fafbff; }}
    .line-clamp-2 {{ display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; }}
    .small-ua {{ font-size: 12px; word-break: break-all; }}
    .details-row {{ display: none; background: #fff; }}
    .details-row.open {{ display: table-row; }}
    .details {{ padding: 12px 8px; border: 1px dashed #d9e1ff; border-radius: 8px; background: #f9fbff; }}
    .btn-link.toggle {{ text-decoration: none; }}
    .btn-link.toggle::after {{ content: " ‚ñæ"; font-size: 12px; transition: transform .2s ease; display: inline-block; transform: rotate(-90deg); }}
    .btn-link.toggle[aria-expanded="true"]::after {{ transform: rotate(0deg); }}
  </style>
</head>
<body>
<div class="container py-4">

  <!-- –ù–∞–≤–∏–≥–∞—Ü–∏—è -->
  <div class="d-flex gap-2 flex-wrap mb-3">
    <a class="btn btn-outline-primary" href="/admin/subscribers?key={h(os.getenv('ADMIN_KEY') or '')}">üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏</a>
    <a class="btn btn-primary" href="/admin/stats_secure">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
    <a class="btn btn-outline-success" href="/health">üíö –ó–¥–æ—Ä–æ–≤—å–µ</a>
    <a class="btn btn-outline-warning" href="/admin/cache">üßπ –ö—ç—à</a>
    <a class="btn btn-outline-secondary" href="/">üè† –í—ã–π—Ç–∏</a>
  </div>

  <!-- –ö–∞—Ä—Ç–æ—á–∫–∏ (—Å–∏—Å—Ç–µ–º–Ω—ã–µ) -->
  <div class="row g-3 mb-3">
    <div class="col-6 col-md-3"><div class="p-3 text-center stat-card"><div class="card-num text-primary">{cache_hits}</div><div>Cache Hits</div></div></div>
    <div class="col-6 col-md-3"><div class="p-3 text-center stat-card"><div class="card-num text-primary">{api_requests}</div><div>API Requests</div></div></div>
    <div class="col-6 col-md-3"><div class="p-3 text-center stat-card"><div class="card-num text-primary">{total_jobs_found}</div><div>Jobs Found</div></div></div>
    <div class="col-6 col-md-3"><div class="p-3 text-center stat-card"><div class="card-num text-primary">{partner_clicks_count_last}</div><div>–ü–µ—Ä–µ—Ö–æ–¥—ã –∫ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)</div></div></div>
  </div>

  <!-- –ö–∞—Ä—Ç–æ—á–∫–∏ (–ò–¢–û–ì–û) -->
  <div class="row g-3 mb-4">
    <div class="col-12 col-md-4"><div class="p-3 text-center stat-card"><div class="card-num text-primary">{total_search_clicks}</div><div>–ò—Ç–æ–≥–æ ¬´–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É¬ª</div></div></div>
    <div class="col-12 col-md-4"><div class="p-3 text-center stat-card"><div class="card-num text-primary">{total_partner_clicks}</div><div>–ò—Ç–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∫ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º</div></div></div>
    <div class="col-12 col-md-4"><div class="p-3 text-center stat-card"><div class="card-num text-primary">{total_out_clicks}</div><div>–ò—Ç–æ–≥–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∫–ª–∏–∫–æ–≤</div></div></div>
  </div>

  <!-- –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ -->
  <div class="row mb-4">
    <div class="col-12 col-lg-6">
      <div class="p-3 chart-card">
        <div class="d-flex justify-content-between align-items-center mb-2">
          <h5 class="mb-0">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º</h5>
          <span class="text-muted">–ø–æ—Å–ª–µ–¥–Ω–∏–µ {partner_clicks_count_last}</span>
        </div>
        <canvas id="partnersPie" height="220"></canvas>
      </div>
    </div>
  </div>

  <h4 class="mt-2 mb-2">üîé –ù–∞–∂–∞—Ç–∏—è ¬´–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É¬ª (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)</h4>
  <div class="table-responsive">
    <table class="table table-sm table-striped table-bordered align-middle">
      <thead>
        <tr>
          <th style="min-width:120px">–í—Ä–µ–º—è</th>
          <th style="min-width:120px">IP</th>
          <th style="min-width:80px">–°—Ç—Ä–∞–Ω–∞</th>
          <th style="min-width:120px">–ì–æ—Ä–æ–¥</th>
          <th style="min-width:80px">–Ø–∑—ã–∫</th>
          <th style="min-width:90px">–ë–µ–∂–µ–Ω–µ—Ü</th>
          <th style="min-width:220px">–°—Ç—Ä–∞–Ω—ã –ø–æ–∏—Å–∫–∞</th>
          <th style="min-width:320px">–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏</th>
        </tr>
      </thead>
      <tbody>{search_rows}</tbody>
    </table>
  </div>

  <h4 class="mt-4 mb-2">‚Üó –ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ —Å–∞–π—Ç—ã-–ø–∞—Ä—Ç–Ω—ë—Ä—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)</h4>
  <div class="table-responsive">
    <table class="table table-sm table-striped table-bordered align-middle">
      <thead>
        <tr>
          <th style="min-width:120px">–í—Ä–µ–º—è</th>
          <th style="min-width:120px">IP</th>
          <th style="min-width:80px">–°—Ç—Ä–∞–Ω–∞</th>
          <th style="min-width:120px">–ì–æ—Ä–æ–¥</th>
          <th style="min-width:80px">–Ø–∑—ã–∫</th>
          <th style="min-width:120px">–ü–∞—Ä—Ç–Ω—ë—Ä</th>
          <th style="min-width:160px">Job ID</th>
          <th style="min-width:300px">–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
          <th style="min-width:120px">–°—Å—ã–ª–∫–∞</th>
        </tr>
      </thead>
      <tbody>{partner_rows}</tbody>
    </table>
  </div>

</div>

<script>
  // –¢–æ–≥–≥–ª–µ—Ä –¥–µ—Ç–∞–ª–µ–π
  document.addEventListener('click', function(e) {{
    const btn = e.target.closest('.toggle');
    if (!btn) return;
    const id = btn.getAttribute('data-target');
    const row = document.getElementById(id);
    if (!row) return;
    const nowOpen = !row.classList.contains('open');
    row.classList.toggle('open', nowOpen);
    btn.setAttribute('aria-expanded', nowOpen ? 'true' : 'false');
  }});

  // –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (–±–µ–∑ JS-—à–∞–±–ª–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ ‚Äî —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å Python f-—Å—Ç—Ä–æ–∫–æ–π)
  (function() {{
    const labels = {labels_json};
    const values = {values_json};
    const el = document.getElementById('partnersPie');
    if (!el || !labels.length) return;
    const ctx = el.getContext('2d');
    new Chart(ctx, {{
      type: 'doughnut',
      data: {{ labels: labels, datasets: [{{ data: values }}] }},
      options: {{
        responsive: true,
        plugins: {{
          legend: {{ position: 'bottom' }},
          tooltip: {{
            callbacks: {{
              label: function(ct) {{
                const total = values.reduce((a,b)=>a+b,0) || 1;
                const v = ct.parsed;
                const pct = Math.round((v*100)/total);
                return ' ' + ct.label + ': ' + v + ' (' + pct + '%)';
              }}
            }}
          }}
        }}
      }}
    }});
  }})();
</script>
</body>
</html>
"""


    
@app.route('/send-notifications')
def send_notifications():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    try:
        from email_service import send_job_notifications
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        subscribers = Subscriber.query.filter_by(is_active=True).all()
        debug_info = []
        
        debug_info.append(f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")
        
        for sub in subscribers:
            jobs = sub.get_selected_jobs()
            countries = sub.get_countries()
            debug_info.append(f"üë§ {sub.email}: –ø—Ä–æ—Ñ–µ—Å—Å–∏–π={len(jobs)}, —Å—Ç—Ä–∞–Ω={len(countries)}")
            debug_info.append(f"   –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏: {jobs[:3]}")
            debug_info.append(f"   –°—Ç—Ä–∞–Ω—ã: {countries}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã
        sent_count = send_job_notifications(app, aggregator, additional_aggregators)
        
        debug_info.append(f"üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
        
        return "<br>".join(debug_info)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
@app.route('/support')
def support():
    return render_template('support.html')  # –∏–ª–∏ 'support_page.html' 

def email_scheduler(app, main_aggregator, additional_aggregators):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ email —Ä–∞—Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç –æ–±–æ –≤—Å–µ—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞—Ö."""
    print("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ email —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω —Å–æ –≤—Å–µ–º–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞–º–∏")

    # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å schedule
    job_func = lambda: run_scheduled_notifications(app, main_aggregator, additional_aggregators)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π —á–∞—Å
    schedule.every().hour.do(job_func)
    
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç. –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨ –í –ü–†–û–î–ê–ö–®–ï–ù–ï!
    # schedule.every(5).minutes.do(job_func)

    while True:
        schedule.run_pending()
        time.sleep(60)

def send_daily_notifications():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    try:
        print("üìß –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
        with app.app_context():
            subscribers = Subscriber.query.filter_by(is_active=True, frequency='daily').all()
            print(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π")
            
            if not subscribers:
                print("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            sent_count = 0
            for subscriber in subscribers:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è)
                    if subscriber.last_sent:
                        last_sent_date = subscriber.last_sent.date()
                        today = datetime.now().date()
                        if last_sent_date >= today:
                            print(f"‚è≠Ô∏è {subscriber.email}: —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è")
                            continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    result = send_job_notifications_for_subscriber(app, aggregator, subscriber)
                    if result:
                        sent_count += 1
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {subscriber.email}: {e}")
            
            print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count}/{len(subscribers)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

def send_weekly_notifications():
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    try:
        print("üìß –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
        with app.app_context():
            subscribers = Subscriber.query.filter_by(is_active=True, frequency='weekly').all()
            print(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π")
            
            if not subscribers:
                print("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            sent_count = 0
            for subscriber in subscribers:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ)
                    if subscriber.last_sent:
                        days_since_last = (datetime.now() - subscriber.last_sent).days
                        if days_since_last < 7:
                            print(f"‚è≠Ô∏è {subscriber.email}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {days_since_last} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
                            continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    result = send_job_notifications_for_subscriber(app, aggregator, subscriber)
                    if result:
                        sent_count += 1
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {subscriber.email}: {e}")
            
            print(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count}/{len(subscribers)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

def send_monthly_notifications():
    """–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    try:
        print("üìß –ó–∞–ø—É—Å–∫ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
        with app.app_context():
            subscribers = Subscriber.query.filter_by(is_active=True, frequency='monthly').all()
            print(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π")
            
            if not subscribers:
                print("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            sent_count = 0
            for subscriber in subscribers:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ)
                    if subscriber.last_sent:
                        days_since_last = (datetime.now() - subscriber.last_sent).days
                        if days_since_last < 30:
                            print(f"‚è≠Ô∏è {subscriber.email}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {days_since_last} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
                            continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    result = send_job_notifications_for_subscriber(app, aggregator, subscriber)
                    if result:
                        sent_count += 1
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {subscriber.email}: {e}")
            
            print(f"‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count}/{len(subscribers)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

def send_test_notifications():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    print("üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞...")
    with app.app_context():
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
        subscriber = Subscriber.query.filter_by(is_active=True).first()
        if subscriber:
            print(f"üìß –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ {subscriber.email}")
            send_job_notifications_for_subscriber(app, aggregator, subscriber)
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

def send_job_notifications_for_subscriber(app, aggregator, subscriber):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É"""
    try:
        preferences = {
            'is_refugee': subscriber.is_refugee,
            'selected_jobs': subscriber.get_selected_jobs(),
            'countries': subscriber.get_countries(),
            'city': subscriber.city
        }
        
        if not preferences['selected_jobs'] or not preferences['countries']:
            print(f"‚ö†Ô∏è –£ {subscriber.email} –Ω–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–ª–∏ —Å—Ç—Ä–∞–Ω")
            return False
        
        # –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
        jobs = aggregator.search_specific_jobs(preferences)
        
        if len(jobs) > 0:
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(jobs)} –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {subscriber.email}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            from email_service import send_job_email
            success = send_job_email(app, subscriber, jobs[:20], preferences)  # –ú–∞–∫—Å–∏–º—É–º 20 –≤–∞–∫–∞–Ω—Å–∏–π
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                subscriber.last_sent = datetime.now()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                log = EmailLog(
                    subscriber_id=subscriber.id,
                    subject=f"–ù–∞–π–¥–µ–Ω–æ {len(jobs)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
                    jobs_count=len(jobs),
                    status='sent',
                    sent_at=datetime.now()
                )
                db.session.add(log)
                db.session.commit()
                
                print(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {subscriber.email}")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –Ω–∞ {subscriber.email}")
                return False
        else:
            print(f"‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {subscriber.email}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {subscriber.email}: {e}")
        return False   
    
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç
if os.getenv('RAILWAY_ENVIRONMENT') or os.getenv('DATABASE_URL'):
    with app.app_context():
        try:
            from sqlalchemy import inspect, text
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"üõ† –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î: {db.engine.url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–ï–ó –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
            inspector = inspect(db.engine)
            existing_tables = inspector.get_table_names()
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            if not existing_tables or len(existing_tables) == 0:
                print("üîÑ –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ...")
                db.create_all()
                print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
            else:
                print(f"‚úÖ –ë–î —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏: {existing_tables}")
                
                # –í–ê–ñ–ù–û: –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ, –ù–ï –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                try:
                    with db.engine.connect() as conn:
                        if 'subscriber' in existing_tables:
                            result = conn.execute(text("SELECT COUNT(*) as count FROM subscriber"))
                            count = result.fetchone()[0]
                            print(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –ë–î: {count}")
                        
                        if 'email_log' in existing_tables:
                            result = conn.execute(text("SELECT COUNT(*) as count FROM email_log"))
                            count = result.fetchone()[0]
                            print(f"üìß –ù–∞–π–¥–µ–Ω–æ email –ª–æ–≥–æ–≤ –≤ –ë–î: {count}")
                except Exception as data_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {data_error}")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            # –ù–ï —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!

@app.route('/admin/download_backup')
def download_backup():
    """–°–∫–∞—á–∞—Ç—å –±–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login_page'))
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers = Subscriber.query.all()
        subscribers_data = []
        
        for sub in subscribers:
            subscribers_data.append({
                'email': sub.email,
                'is_active': sub.is_active,
                'created_at': sub.created_at.isoformat() if sub.created_at else None,
                'is_refugee': sub.is_refugee,
                'selected_jobs': sub.get_selected_jobs(),
                'countries': sub.get_countries(),
                'city': sub.city,
                'frequency': sub.frequency,
                'last_sent': sub.last_sent.isoformat() if sub.last_sent else None
            })
        
        # –°–æ–±–∏—Ä–∞–µ–º email –ª–æ–≥–∏
        email_logs = EmailLog.query.order_by(EmailLog.sent_at.desc()).limit(1000).all()
        logs_data = []
        
        for log in email_logs:
            logs_data.append({
                'email': log.email,
                'subject': log.subject,
                'jobs_count': log.jobs_count,
                'status': log.status,
                'sent_at': log.sent_at.isoformat() if log.sent_at else None,
                'error_message': log.error_message
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON
        backup_data = {
            'backup_date': datetime.now().isoformat(),
            'subscribers': subscribers_data,
            'email_logs': logs_data,
            'stats': {
                'total_subscribers': len(subscribers_data),
                'active_subscribers': len([s for s in subscribers_data if s['is_active']]),
                'total_logs': len(logs_data)
            }
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        filename = f"globaljobhunter_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        from flask import Response
        return Response(
            json.dumps(backup_data, indent=2, ensure_ascii=False),
            mimetype='application/json',
            headers={'Content-Disposition': f'attachment; filename={filename}'}
        )
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞: {str(e)}", 500

@app.route('/admin/upload_backup', methods=['GET', 'POST'])
def upload_backup():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login_page'))
    
    if request.method == 'GET':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∑–∞–≥—Ä—É–∑–∫–∏
        return """
        <!DOCTYPE html>
        <html lang="{{ request.cookies.get('lang','ru') }}"
        <head>
            <title>–ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∫–∞–ø–∞</title>
            <meta charset="utf-8">
            <script defer src="{{ url_for('static', filename='js/localization.js') }}"></script>
            <style>
                body { font-family: Arial; background: #f8f9fa; padding: 20px; }
                .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
                .btn { background: #007bff; color: white; padding: 12px 25px; border: none; border-radius: 5px; cursor: pointer; text-decoration: none; display: inline-block; margin: 10px 5px; }
                .btn-danger { background: #dc3545; }
                .alert { padding: 15px; margin: 20px 0; border-radius: 5px; background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; }
                input[type="file"] { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px; margin: 10px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <h2>üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h2>
                
                <div class="alert">
                    <strong>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!</strong><br>
                    –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ–Ω–∏—Ç –í–°–ï —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ.<br>
                    –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª!
                </div>
                
                <form method="post" enctype="multipart/form-data">
                    <label><strong>–í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª –±–µ–∫–∞–ø–∞:</strong></label>
                    <input type="file" name="backup_file" accept=".json" required>
                    
                    <div style="margin: 20px 0;">
                        <label>
                            <input type="checkbox" name="confirm_restore" required>
                            –Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã
                        </label>
                    </div>
                    
                    <button type="submit" class="btn btn-danger">üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∫–∞–ø</button>
                    <a href="/admin/dashboard" class="btn">‚ùå –û—Ç–º–µ–Ω–∞</a>
                </form>
            </div>
        </body>
        </html>
        """
    
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
        try:
            if 'backup_file' not in request.files:
                return "‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", 400
            
            file = request.files['backup_file']
            if file.filename == '' or not file.filename.endswith('.json'):
                return "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª", 400
            
            # –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º JSON
            backup_data = json.loads(file.read().decode('utf-8'))
            
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            db.session.query(EmailLog).delete()
            db.session.query(Subscriber).delete()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            restored_subscribers = 0
            for sub_data in backup_data.get('subscribers', []):
                try:
                    subscriber = Subscriber(
                        email=sub_data['email'],
                        is_active=sub_data.get('is_active', True),
                        is_refugee=sub_data.get('is_refugee', True),
                        city=sub_data.get('city'),
                        frequency=sub_data.get('frequency', 'weekly')
                    )
                    
                    if sub_data.get('created_at'):
                        subscriber.created_at = datetime.fromisoformat(sub_data['created_at'])
                    
                    if sub_data.get('last_sent'):
                        subscriber.last_sent = datetime.fromisoformat(sub_data['last_sent'])
                    
                    if sub_data.get('selected_jobs'):
                        subscriber.set_selected_jobs(sub_data['selected_jobs'])
                    
                    if sub_data.get('countries'):
                        subscriber.set_countries(sub_data['countries'])
                    
                    db.session.add(subscriber)
                    restored_subscribers += 1
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º email –ª–æ–≥–∏
            restored_logs = 0
            for log_data in backup_data.get('email_logs', []):
                try:
                    email_log = EmailLog(
                        email=log_data.get('email'),
                        subject=log_data.get('subject'),
                        jobs_count=log_data.get('jobs_count', 0),
                        status=log_data.get('status', 'unknown'),
                        error_message=log_data.get('error_message')
                    )
                    
                    if log_data.get('sent_at'):
                        email_log.sent_at = datetime.fromisoformat(log_data['sent_at'])
                    
                    db.session.add(email_log)
                    restored_logs += 1
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.session.commit()
            
            return f"""
            <html lang="{{ request.cookies.get('lang','ru') }}"
            <head><title>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</title><meta charset="utf-8"></head>
            <body style="font-family: Arial; padding: 40px; text-align: center; background: #f8f9fa;">
                <div style="background: white; padding: 40px; border-radius: 10px; max-width: 500px; margin: 0 auto;">
                    <h1 style="color: #28a745;">‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</h1>
                    <p>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <strong>{restored_subscribers}</strong></p>
                    <p>Email –ª–æ–≥–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <strong>{restored_logs}</strong></p>
                    <a href="/admin/dashboard" style="background: #007bff; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px;">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É</a>
                </div>
            </body>
            </html>
            """
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", 500            

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ email —Ä–∞—Å—Å—ã–ª–∫–∏...")
    # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –ø–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤—Å–µ, —á—Ç–æ –µ–º—É –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    scheduler_thread = Thread(target=email_scheduler, args=(app, aggregator, additional_aggregators), daemon=True)
    scheduler_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.environ.get('PORT', 5000))
    debug = os.environ.get('FLASK_ENV') == 'development'
    
    print("üåç –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    app.run(host='0.0.0.0', port=port, debug=debug)


