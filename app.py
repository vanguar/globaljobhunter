#!/usr/bin/env python3
"""
GlobalJobHunter Web Interface v3.3 - –° –ö–ï–®–ò–†–û–í–ê–ù–ò–ï–ú
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —É–º–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
"""

import os
import json
import time
from datetime import datetime
from flask import Flask, render_template, request, jsonify, session, redirect, url_for, flash
from dotenv import load_dotenv
from datetime import datetime, timedelta  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ timedelta!
from collections import defaultdict        # ‚Üê –î–û–ë–ê–í–ò–¢–¨ —ç—Ç–æ!
import secrets
import uuid
from dataclasses import asdict
from flask import Flask, render_template, request, jsonify, session, redirect, url_for, flash, render_template_string
from email_service import mail, send_welcome_email, send_preferences_update_email, send_job_notifications

# –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –ü–û–°–õ–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
from flask_mail import Mail
from database import db, Subscriber, EmailLog  
from email_service import mail, send_welcome_email, send_preferences_update_email
from flask_migrate import Migrate

from threading import Thread
import schedule

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
from adzuna_aggregator import GlobalJobAggregator, JobVacancy

# Rate limiting
RATE_LIMIT_FILE = "rate_limits.json"
MAX_SEARCHES_PER_DAY = 5

def load_rate_limits():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ IP"""
    try:
        with open(RATE_LIMIT_FILE, 'r') as f:
            data = json.load(f)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
            for ip, searches in data.items():
                data[ip] = [datetime.fromisoformat(dt) for dt in searches]
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º defaultdict!
            return defaultdict(list, data)
    except FileNotFoundError:
        return defaultdict(list)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ rate limits: {e}")
        return defaultdict(list)

def save_rate_limits(limits):
   """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ IP"""
   # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
   serializable_data = {}
   for ip, searches in limits.items():
       serializable_data[ip] = [dt.isoformat() for dt in searches]
   
   with open(RATE_LIMIT_FILE, 'w') as f:
       json.dump(serializable_data, f)

def check_rate_limit(ip_address):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è IP"""
    limits = load_rate_limits()
    now = datetime.now()
    day_ago = now - timedelta(days=1)
    
    # üîß –î–û–ë–ê–í–õ–ï–ù–ê –¢–û–õ–¨–ö–û –≠–¢–ê –ü–†–û–í–ï–†–ö–ê:
    if ip_address not in limits:
        limits[ip_address] = []
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫)
    recent_searches = [dt for dt in limits[ip_address] if dt > day_ago]
    limits[ip_address] = recent_searches
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(recent_searches) >= MAX_SEARCHES_PER_DAY:
        return False, MAX_SEARCHES_PER_DAY - len(recent_searches)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫
    limits[ip_address].append(now)
    save_rate_limits(limits)
    
    return True, MAX_SEARCHES_PER_DAY - len(limits[ip_address])

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from jobicy_aggregator import JobicyAggregator
    from usajobs_aggregator import USAJobsAggregator
    ADDITIONAL_SOURCES_AVAILABLE = True
    print("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
except ImportError as e:
    ADDITIONAL_SOURCES_AVAILABLE = False
    print(f"‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

load_dotenv()

app = Flask(__name__)
app.secret_key = secrets.token_hex(16)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'sqlite:///globaljobhunter.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email 
app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER', 'smtp.gmail.com')
app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', 587))
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')
app.config['MAIL_DEFAULT_SENDER'] = os.getenv('MAIL_DEFAULT_SENDER', os.getenv('MAIL_USERNAME'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
db.init_app(app)
mail.init_app(app)
migrate = Migrate(app, db)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
try:
    aggregator = GlobalJobAggregator(cache_duration_hours=12)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 12 —á–∞—Å–æ–≤
    aggregator.search_cache = {}
    app.logger.info("‚úÖ GlobalJobAggregator —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    aggregator = None

# –î–û–ë–ê–í–õ–ï–ù–ò–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
additional_aggregators = {}
if ADDITIONAL_SOURCES_AVAILABLE:
    try:
        additional_aggregators['jobicy'] = JobicyAggregator()
        # additional_aggregators['usajobs'] = USAJobsAggregator()  # –ù—É–∂–µ–Ω API –∫–ª—é—á
        app.logger.info(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {list(additional_aggregators.keys())}")
    except Exception as e:
        app.logger.warning(f"‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

# –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
@app.route('/')
def index():
   """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
   if not aggregator:
       return render_template('error.html', 
                            error="API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
   
   job_categories = aggregator.specific_jobs
   total_jobs = sum(len(jobs) for jobs in job_categories.values())
   
   session.pop('results_id', None)
   session.pop('last_search_preferences', None)
   
   return render_template('index.html', 
                        job_categories=job_categories,
                        total_jobs=total_jobs,
                        countries=aggregator.countries)

@app.route('/search', methods=['POST'])
def search_jobs():
   """API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
   if not aggregator:
       return jsonify({'error': '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}), 500
   
   # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
   client_ip = request.environ.get('HTTP_X_FORWARDED_FOR', request.environ.get('REMOTE_ADDR', 'unknown'))
   allowed, remaining = check_rate_limit(client_ip)
   
   if not allowed:
       app.logger.warning(f"üö´ Rate limit exceeded for IP: {client_ip}")
       return jsonify({
           'error': f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤. –ú–∞–∫—Å–∏–º—É–º {MAX_SEARCHES_PER_DAY} –ø–æ–∏—Å–∫–æ–≤ –≤ –¥–µ–Ω—å.',
           'remaining_searches': 0,
           'reset_time': '24 —á–∞—Å–∞'
       }), 429
   
   app.logger.info(f"‚úÖ Rate limit OK for IP: {client_ip}, remaining: {remaining}")
   
   try:
       form_data = request.json or request.form.to_dict()
       
       preferences = {
           'is_refugee': form_data.get('is_refugee') == 'true',
           'selected_jobs': form_data.get('selected_jobs', []),
           'countries': form_data.get('countries', ['de']),
           'city': form_data.get('city', '').strip() or None
       }
       
       if not preferences['selected_jobs']:
           return jsonify({'error': '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é'}), 400
       
       if isinstance(preferences['selected_jobs'], str):
           preferences['selected_jobs'] = [preferences['selected_jobs']]
       
       app.logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫: {preferences}")
       start_time = time.time()
       
       # –û–°–ù–û–í–ù–û–ô –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Adzuna (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
       jobs = aggregator.search_specific_jobs(preferences)
       
       # –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
       if additional_aggregators:
           for source_name, source_aggregator in additional_aggregators.items():
               try:
                   app.logger.info(f"üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ {source_name}")
                   additional_jobs = source_aggregator.search_jobs(preferences)
                   jobs.extend(additional_jobs)
                   app.logger.info(f"‚úÖ {source_name}: +{len(additional_jobs)} –≤–∞–∫–∞–Ω—Å–∏–π")
               except Exception as e:
                   app.logger.warning(f"‚ö†Ô∏è {source_name} –æ—à–∏–±–∫–∞: {e}")
                   continue
       
       search_time = time.time() - start_time
       
       # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
       cache_stats = aggregator.get_cache_stats()
       app.logger.info(f"‚è±Ô∏è –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {search_time:.1f}—Å, –Ω–∞–π–¥–µ–Ω–æ {len(jobs)} –≤–∞–∫–∞–Ω—Å–∏–π")
       app.logger.info(f"üìä Cache hit rate: {cache_stats['cache_hit_rate']}, API requests: {cache_stats['api_requests']}")
       
       if jobs:
           results_id = str(uuid.uuid4())
           job_details_map = {job.id: asdict(job) for job in jobs}
           aggregator.search_cache[results_id] = job_details_map
           
           session['results_id'] = results_id
           session['last_search_preferences'] = preferences
           session['search_time'] = search_time
       else:
           session['results_id'] = None
           session['last_search_preferences'] = preferences
           session['search_time'] = search_time

       return jsonify({
           'success': True,
           'jobs_count': len(jobs),
           'search_time': round(search_time, 1),
           'cached': cache_stats['cache_hits'] > 0,
           'sources_used': ['adzuna'] + list(additional_aggregators.keys()),  # –î–û–ë–ê–í–õ–ï–ù–ò–ï
           'remaining_searches': remaining,
           'redirect_url': url_for('results')
       })
       
   except Exception as e:
       app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}", exc_info=True)
       return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

# –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ü–û–õ–ù–û–°–¢–¨–Æ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
@app.route('/results')
def results():
   """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
   results_id = session.get('results_id')
   preferences = session.get('last_search_preferences', {})
   search_time = session.get('search_time', 0)
   
   jobs_data = []
   
   if results_id and aggregator and results_id in aggregator.search_cache:
       job_details_map = aggregator.search_cache[results_id]
       jobs_data = list(job_details_map.values())
   elif results_id is None:
       jobs_data = []
   else:
       return redirect(url_for('index'))

   # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   stats = {
       'total': len(jobs_data),
       'with_salary': len([j for j in jobs_data if j.get('salary')]),
       'refugee_friendly': len([j for j in jobs_data if j.get('refugee_friendly')]),
       'no_language': len([j for j in jobs_data if j.get('language_requirement') == 'no_language_required'])
   }
   
   # –ù–û–í–ê–Ø –°–û–†–¢–ò–†–û–í–ö–ê: –°–Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–∞–º, –ø–æ—Ç–æ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
   def sort_key(job):
       country = job.get('country', '')
       refugee_friendly = job.get('refugee_friendly', False)
       no_language = job.get('language_requirement') == 'no_language_required'
       has_salary = job.get('salary') is not None
       posted_date = job.get('posted_date', '')
       
       # –°–Ω–∞—á–∞–ª–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ, –ø–æ—Ç–æ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω—ã
       return (
           country,              # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ
           not refugee_friendly, # –°–Ω–∞—á–∞–ª–∞ –¥–ª—è –±–µ–∂–µ–Ω—Ü–µ–≤
           not no_language,      # –ü–æ—Ç–æ–º –±–µ–∑ —è–∑—ã–∫–∞
           not has_salary,       # –ü–æ—Ç–æ–º —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π
           posted_date          # –ü–æ –¥–∞—Ç–µ
       )
   
   jobs_sorted = sorted(jobs_data, key=sort_key)
   
   # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
   jobs_by_country = {}
   for job in jobs_sorted:
       country = job.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
       if country not in jobs_by_country:
           jobs_by_country[country] = []
       jobs_by_country[country].append(job)
   
   return render_template('results.html',
                        jobs=jobs_sorted,
                        jobs_by_country=jobs_by_country,  # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
                        preferences=preferences,
                        stats=stats,
                        search_time=round(search_time, 1),
                        countries=aggregator.countries if aggregator else {})

@app.route('/subscribe', methods=['POST'])
def subscribe():
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print("="*60)
    print("üîç –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò SUBSCRIBE")
    print(f"üìß Method: {request.method}")
    print(f"üìß Content-Type: {request.content_type}")
    print(f"üìß Request data: {request.data}")
    print("="*60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        if request.is_json:
            data = request.get_json()
            print(f"üìß JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {data}")
        else:
            data = request.form.to_dict()
            print(f"üìß Form –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {data}")
        
        if not data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ'}), 400
        
        email = data.get('email', '').strip().lower()
        print(f"üìß Email –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: '{email}'")
        
        if not email or '@' not in email:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email")
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∞–¥—Ä–µ—Å'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
        preferences = session.get('last_search_preferences', {})
        print(f"‚öôÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏: {preferences}")

        # –ü–†–û–í–ï–†–ö–ê: –ï—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?
        if not preferences.get('selected_jobs') or not preferences.get('countries'):
            print("‚ùå –ù–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–ª–∏ —Å—Ç—Ä–∞–Ω –≤ —Å–µ—Å—Å–∏–∏")
            return jsonify({
                'error': '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Å—Ç—Ä–∞–Ω—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É", –∞ –ø–æ—Ç–æ–º –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å'
            }), 400
        
        print("üîç –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ –ë–î...")
        existing = Subscriber.query.filter_by(email=email).first()
        print(f"üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {existing}")
        
        # –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞
        if existing and existing.is_active:
            print("‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–∏—á–∏—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_jobs = set(existing.get_selected_jobs() or [])
            current_countries = set(existing.get_countries() or [])
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ –ø–æ–∏—Å–∫–∞
            new_jobs = set(preferences.get('selected_jobs', []))
            new_countries = set(preferences.get('countries', []))
            
            print(f"üîÑ –¢–µ–∫—É—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {current_jobs}")
            print(f"üîÑ –ù–æ–≤—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {new_jobs}")
            print(f"üîÑ –¢–µ–∫—É—â–∏–µ —Å—Ç—Ä–∞–Ω—ã: {current_countries}")
            print(f"üîÑ –ù–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω—ã: {new_countries}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—Ç–ª–∏—á–∏—è
            if current_jobs == new_jobs and current_countries == new_countries:
                print("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ —Å —Ç–∞–∫–∏–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return jsonify({
                    'error': '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏'
                }), 400
            
            # –ï—Å—Ç—å –æ—Ç–ª–∏—á–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
            print("üîÑ –ï—Å—Ç—å –æ—Ç–ª–∏—á–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç (409)...")
            return jsonify({
                'subscription_exists': True,
                'current_subscription': {
                    'jobs': list(current_jobs),
                    'countries': list(current_countries),
                    'city': existing.city,
                    'is_refugee': existing.is_refugee
                },
                'new_subscription': {
                    'jobs': list(new_jobs),
                    'countries': list(new_countries),
                    'city': preferences.get('city'),
                    'is_refugee': preferences.get('is_refugee', True)
                },
                'message': '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
            }), 409  # 409 Conflict
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        print("üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é...")
        
        if existing:
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞...")
            existing.is_active = True
            if preferences.get('selected_jobs'):
                existing.set_selected_jobs(preferences['selected_jobs'])
            if preferences.get('countries'):
                existing.set_countries(preferences['countries'])
            existing.city = preferences.get('city')
            existing.is_refugee = preferences.get('is_refugee', True)
            subscriber = existing
        else:
            print("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞...")
            subscriber = Subscriber(
                email=email,
                is_refugee=preferences.get('is_refugee', True),
                city=preferences.get('city'),
                frequency='weekly'
            )
            if preferences.get('selected_jobs'):
                subscriber.set_selected_jobs(preferences['selected_jobs'])
            if preferences.get('countries'):
                subscriber.set_countries(preferences['countries'])
            db.session.add(subscriber)
        
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        db.session.commit()
        print("‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º welcome email —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        print("üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º welcome email...")
        email_success = False
        try:
            from email_service import send_welcome_email
            email_success = send_welcome_email(app, email)
            print(f"üìß –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {email_success}")
            
            if email_success:
                print("‚úÖ Welcome email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                log = EmailLog(
                    subscriber_id=subscriber.id,
                    email=email,
                    subject="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlobalJobHunter!",
                    jobs_count=0,
                    status='sent',
                    sent_at=datetime.now()
                )
                db.session.add(log)
                db.session.commit()
                print("üìù –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∞–Ω")
                
                return jsonify({
                    'success': True, 
                    'message': '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email.'
                })
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ welcome email")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                log = EmailLog(
                    subscriber_id=subscriber.id,
                    email=email,
                    subject="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlobalJobHunter!",
                    jobs_count=0,
                    status='failed',
                    error_message='Failed to send welcome email',
                    sent_at=datetime.now()
                )
                db.session.add(log)
                db.session.commit()
                print("üìù –õ–æ–≥ –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∞–Ω")
                
                return jsonify({
                    'success': True, 
                    'message': '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! (Email –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)'
                })
                
        except Exception as email_error:
            print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ welcome email: {email_error}")
            import traceback
            traceback.print_exc()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            try:
                log = EmailLog(
                    subscriber_id=subscriber.id,
                    email=email,
                    subject="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlobalJobHunter!",
                    jobs_count=0,
                    status='failed',
                    error_message=str(email_error),
                    sent_at=datetime.now()
                )
                db.session.add(log)
                db.session.commit()
                print("üìù –õ–æ–≥ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω")
            except Exception as log_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {log_error}")
            
            return jsonify({
                'success': True, 
                'message': '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! (Email –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)'
            })
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –í SUBSCRIBE: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500
    
    finally:
        print("="*60)
        print("üèÅ –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ò SUBSCRIBE")
        print("="*60)

@app.route('/unsubscribe')
def unsubscribe():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ø–∏—Å–∫–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    email = request.args.get('email')
    
    if not email:
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏</title>
            <style>
                body { font-family: Arial; padding: 40px; text-align: center; background: #f8f9fa; }
                .card { background: white; padding: 40px; border-radius: 15px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); max-width: 500px; margin: 0 auto; }
                .error { color: #dc3545; font-size: 3rem; margin-bottom: 20px; }
                h1 { color: #343a40; margin-bottom: 15px; }
                .btn { background: #007bff; color: white; padding: 12px 25px; text-decoration: none; border-radius: 8px; display: inline-block; margin-top: 20px; }
            </style>
        </head>
        <body>
            <div class="card">
                <div class="error">‚ùå</div>
                <h1>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞</h1>
                <p>Email –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏.</p>
                <a href="/" class="btn">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
            </div>
        </body>
        </html>
        """)
    
    # –ò—â–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
    subscriber = Subscriber.query.filter_by(email=email).first()
    
    if subscriber and subscriber.is_active:
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscriber.is_active = False
        db.session.commit()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>–û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</title>
            <style>
                body { 
                    font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; 
                    padding: 40px; text-align: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    min-height: 100vh; display: flex; align-items: center; justify-content: center; margin: 0;
                }
                .card { 
                    background: white; padding: 50px; border-radius: 20px; 
                    box-shadow: 0 20px 60px rgba(0,0,0,0.2); max-width: 600px; width: 100%;
                }
                .success { color: #28a745; font-size: 4rem; margin-bottom: 20px; }
                h1 { color: #343a40; margin-bottom: 20px; font-weight: 600; }
                p { color: #6c757d; line-height: 1.6; margin-bottom: 15px; }
                .email-highlight { 
                    background: #e3f2fd; color: #1976d2; padding: 8px 15px; 
                    border-radius: 20px; font-weight: 600; display: inline-block; margin: 10px 0;
                }
                .btn { 
                    background: #007bff; color: white; padding: 15px 30px; text-decoration: none; 
                    border-radius: 10px; display: inline-block; margin: 25px 10px 0; font-weight: 600;
                    transition: all 0.3s ease; box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
                }
                .btn:hover { 
                    background: #0056b3; transform: translateY(-2px); text-decoration: none; color: white;
                    box-shadow: 0 8px 25px rgba(0, 123, 255, 0.4);
                }
                .btn-secondary { 
                    background: #6c757d; box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
                }
                .btn-secondary:hover { 
                    background: #545b62; box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
                }
                .info-box {
                    background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 10px; 
                    padding: 20px; margin: 25px 0; text-align: left;
                }
                .info-box h4 { color: #495057; margin-bottom: 10px; }
                .info-box ul { margin: 10px 0; padding-left: 20px; }
                .info-box li { margin: 5px 0; color: #6c757d; }
            </style>
        </head>
        <body>
            <div class="card">
                <div class="success">‚úÖ</div>
                <h1>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å!</h1>
                <p>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥—Ä–µ—Å–∞</p>
                <div class="email-highlight">{{ email }}</div>
                <p>–±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.</p>
                
                <div class="info-box">
                    <h4>üìß –ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:</h4>
                    <ul>
                        <li>–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö</li>
                        <li>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏)</li>
                        <li>–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É</li>
                    </ul>
                </div>
                
                <div>
                    <a href="/" class="btn">üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
                    <a href="mailto:tzvanguardia@gmail.com?subject=–í–æ–ø—Ä–æ—Å –ø–æ GlobalJobHunter" class="btn btn-secondary">üìß –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</a>
                </div>
                
                <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6;">
                    <small style="color: #6c757d;">
                        <strong>–ü–µ—Ä–µ–¥—É–º–∞–ª–∏?</strong> –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ –Ω–∞ 
                        <a href="/" style="color: #007bff;">–≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</a>
                    </small>
                </div>
            </div>
        </body>
        </html>
        """, email=email)
    
    elif subscriber and not subscriber.is_active:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–ø–∏—Å–∞–Ω
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>–£–∂–µ –æ—Ç–ø–∏—Å–∞–Ω</title>
            <style>
                body { 
                    font-family: 'Inter', Arial, sans-serif; padding: 40px; text-align: center; 
                    background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%); 
                    min-height: 100vh; display: flex; align-items: center; justify-content: center; margin: 0;
                }
                .card { 
                    background: white; padding: 50px; border-radius: 20px; 
                    box-shadow: 0 20px 60px rgba(0,0,0,0.2); max-width: 500px; width: 100%;
                }
                .info { color: #f39c12; font-size: 4rem; margin-bottom: 20px; }
                h1 { color: #343a40; margin-bottom: 20px; font-weight: 600; }
                .email-highlight { 
                    background: #fff3cd; color: #856404; padding: 8px 15px; 
                    border-radius: 20px; font-weight: 600; display: inline-block; margin: 10px 0;
                }
                .btn { 
                    background: #007bff; color: white; padding: 15px 30px; text-decoration: none; 
                    border-radius: 10px; display: inline-block; margin: 25px 10px 0; font-weight: 600;
                    transition: all 0.3s ease;
                }
                .btn:hover { background: #0056b3; transform: translateY(-2px); text-decoration: none; color: white; }
            </style>
        </head>
        <body>
            <div class="card">
                <div class="info">‚ÑπÔ∏è</div>
                <h1>–í—ã —É–∂–µ –æ—Ç–ø–∏—Å–∞–Ω—ã</h1>
                <p>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞</p>
                <div class="email-highlight">{{ email }}</div>
                <p>—É–∂–µ –±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ.</p>
                <p style="color: #6c757d; margin-top: 25px;">
                    –•–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö? 
                    –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!
                </p>
                <a href="/" class="btn">üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
            </div>
        </body>
        </html>
        """, email=email)
    
    else:
        # –ü–æ–¥–ø–∏—Å—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</title>
            <style>
                body { 
                    font-family: 'Inter', Arial, sans-serif; padding: 40px; text-align: center; 
                    background: linear-gradient(135deg, #fdcb6e 0%, #e17055 100%); 
                    min-height: 100vh; display: flex; align-items: center; justify-content: center; margin: 0;
                }
                .card { 
                    background: white; padding: 50px; border-radius: 20px; 
                    box-shadow: 0 20px 60px rgba(0,0,0,0.2); max-width: 500px; width: 100%;
                }
                .warning { color: #e17055; font-size: 4rem; margin-bottom: 20px; }
                h1 { color: #343a40; margin-bottom: 20px; font-weight: 600; }
                .btn { 
                    background: #007bff; color: white; padding: 15px 30px; text-decoration: none; 
                    border-radius: 10px; display: inline-block; margin: 25px 10px 0; font-weight: 600;
                    transition: all 0.3s ease;
                }
                .btn:hover { background: #0056b3; transform: translateY(-2px); text-decoration: none; color: white; }
            </style>
        </head>
        <body>
            <div class="card">
                <div class="warning">‚ö†Ô∏è</div>
                <h1>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
                <p>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞ <strong>{{ email }}</strong> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.</p>
                <p style="color: #6c757d; margin-top: 25px;">
                    –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø–∏—Å–∞–Ω—ã —Ä–∞–Ω–µ–µ, –∏–ª–∏ email –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.
                </p>
                <a href="/" class="btn">üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é!</a>
            </div>
        </body>
        </html>
        """, email=email)

@app.route('/api/cache/stats')
def cache_stats():
   """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
   if not aggregator:
       return jsonify({'error': '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}), 500
   
   stats = aggregator.get_cache_stats()
   return jsonify(stats)

@app.route('/api/cache/cleanup', methods=['POST'])
def cleanup_cache():
    """API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞"""
    if not aggregator:
        return jsonify({'error': '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}), 500
    
    try:
        aggregator.cleanup_cache()
        return """
        <html>
        <head><title>–ö–µ—à –æ—á–∏—â–µ–Ω</title><meta charset="utf-8"></head>
        <body style="font-family: Arial; padding: 40px; text-align: center;">
            <h1>‚úÖ –ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!</h1>
            <p>–í—Å–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã</p>
            <a href="/admin/subscribers?key={}" style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px;">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É</a>
        </body>
        </html>
        """.format(os.getenv('ADMIN_KEY'))
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}", 500
   
@app.route('/admin/subscribers')
def admin_subscribers():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    admin_key = request.args.get('key')
    if admin_key != os.getenv('ADMIN_KEY'):
        return "Access Denied", 403
    
    subscribers = Subscriber.query.order_by(Subscriber.created_at.desc()).all()
    email_logs = EmailLog.query.order_by(EmailLog.sent_at.desc()).limit(10).all()
    
    stats = {
        'total': Subscriber.query.count(),
        'active': Subscriber.query.filter_by(is_active=True).count(),
        'inactive': Subscriber.query.filter_by(is_active=False).count(),
        'emails_sent': EmailLog.query.filter_by(status='sent').count(),
        'emails_failed': EmailLog.query.filter_by(status='failed').count()
    }
    
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>–ê–¥–º–∏–Ω–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</title>
        <meta charset="utf-8">
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; background: #f8f9fa; }}
            .container {{ max-width: 1200px; margin: 0 auto; }}
            table {{ border-collapse: collapse; width: 100%; margin: 20px 0; background: white; }}
            th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
            th {{ background-color: #007bff; color: white; }}
            .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }}
            .stat-card {{ background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
            .stat-number {{ font-size: 2em; font-weight: bold; color: #007bff; }}
            .email-logs {{ background: white; padding: 20px; border-radius: 8px; margin: 20px 0; }}
            .nav {{ display: flex; gap: 20px; margin: 20px 0; }}
            .nav a {{ background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; }}
            .job-list {{ font-size: 0.9em; color: #666; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üìß –ê–¥–º–∏–Ω–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ GlobalJobHunter</h1>
            
            <div class="nav">
                <a href="/">üè† –ì–ª–∞–≤–Ω–∞—è</a>
                <a href="/admin/stats?key={admin_key}">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞</a>
                <a href="/health">üíö –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã</a>
            </div>
            
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number">{stats['total']}</div>
                    <p>–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</p>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats['active']}</div>
                    <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö</p>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats['inactive']}</div>
                    <p>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö</p>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats['emails_sent']}</div>
                    <p>Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</p>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats['emails_failed']}</div>
                    <p>Email –æ—à–∏–±–æ–∫</p>
                </div>
            </div>
            
            <h2>üìã –ü–æ–¥–ø–∏—Å—á–∏–∫–∏</h2>
            <table>
                <tr>
                    <th>Email</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–ë–µ–∂–µ–Ω–µ—Ü</th>
                    <th>–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏</th>
                    <th>–°—Ç—Ä–∞–Ω—ã</th>
                    <th>–ì–æ—Ä–æ–¥</th>
                    <th>–ß–∞—Å—Ç–æ—Ç–∞</th>
                    <th>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th>
                </tr>
    """
    
    for sub in subscribers:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if sub.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        refugee = "‚úÖ –î–∞" if sub.is_refugee else "‚ùå –ù–µ—Ç"
        created = sub.created_at.strftime('%Y-%m-%d %H:%M')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Å—Ç—Ä–∞–Ω—ã
        jobs = ', '.join(sub.get_selected_jobs()[:3]) if sub.get_selected_jobs() else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        if len(sub.get_selected_jobs()) > 3:
            jobs += f' (+{len(sub.get_selected_jobs())-3})'
            
        countries = ', '.join(sub.get_countries()) if sub.get_countries() else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        city = sub.city or '–ù–µ —É–∫–∞–∑–∞–Ω'
        frequency = sub.frequency or 'weekly'
        
        html += f"""
            <tr>
                <td>{sub.email}</td>
                <td>{status}</td>
                <td>{refugee}</td>
                <td class="job-list">{jobs}</td>
                <td>{countries}</td>
                <td>{city}</td>
                <td>{frequency}</td>
                <td>{created}</td>
            </tr>
        """
    
    html += """
        </table>
        
        <div class="email-logs">
            <h2>üì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ email –ª–æ–≥–∏</h2>
            <table>
                <tr>
                    <th>Email</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–∞—Ç–∞</th>
                </tr>
    """
    
    for log in email_logs:
        status_icon = "‚úÖ" if log.status == 'sent' else "‚ùå"
        sent_time = log.sent_at.strftime('%Y-%m-%d %H:%M')
        html += f"""
            <tr>
                <td>{log.email}</td>
                <td>{status_icon} {log.status}</td>
                <td>{sent_time}</td>
            </tr>
        """
    
    html += """
            </table>
        </div>
        
        </div>
    </body>
    </html>
    """
    
    return html  

@app.route('/admin/stats')
def admin_stats():
    """–ö—Ä–∞—Å–∏–≤–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not aggregator:
        return "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", 500
    
    stats = aggregator.get_cache_stats()
    
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GlobalJobHunter</title>
        <meta charset="utf-8">
        <style>
            body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: #333; }}
            .container {{ max-width: 1200px; margin: 0 auto; padding: 20px; }}
            .header {{ text-align: center; color: white; margin-bottom: 30px; }}
            .stats-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 30px 0; }}
            .stat-card {{ background: white; border-radius: 15px; padding: 25px; text-align: center; box-shadow: 0 8px 32px rgba(0,0,0,0.1); transition: transform 0.3s ease; }}
            .stat-card:hover {{ transform: translateY(-5px); }}
            .stat-number {{ font-size: 3em; font-weight: bold; margin: 10px 0; }}
            .stat-number.cache-hits {{ color: #28a745; }}
            .stat-number.cache-misses {{ color: #dc3545; }}
            .stat-number.api-requests {{ color: #007bff; }}
            .stat-number.jobs-found {{ color: #ffc107; }}
            .stat-number.hit-rate {{ color: #17a2b8; }}
            .sources-card {{ background: white; border-radius: 15px; padding: 25px; margin: 20px 0; box-shadow: 0 8px 32px rgba(0,0,0,0.1); }}
            .nav {{ display: flex; gap: 15px; justify-content: center; margin: 20px 0; flex-wrap: wrap; }}
            .nav a {{ background: rgba(255,255,255,0.2); color: white; padding: 12px 25px; text-decoration: none; border-radius: 25px; backdrop-filter: blur(10px); transition: background 0.3s ease; }}
            .nav a:hover {{ background: rgba(255,255,255,0.3); }}
            .cleanup-btn {{ background: linear-gradient(45deg, #ff6b6b, #ee5a24); color: white; padding: 12px 30px; border: none; border-radius: 25px; font-size: 16px; cursor: pointer; transition: transform 0.3s ease; }}
            .cleanup-btn:hover {{ transform: scale(1.05); }}
            .source-tag {{ display: inline-block; background: #007bff; color: white; padding: 5px 15px; border-radius: 20px; margin: 5px; font-size: 0.9em; }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GlobalJobHunter</h1>
                <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è</p>
            </div>
            
            <div class="nav">
                <a href="/">üè† –ì–ª–∞–≤–Ω–∞—è</a>
                <a href="/admin/subscribers?key={os.getenv('ADMIN_KEY')}">üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏</a>
                <a href="/health">üíö –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã</a>
            </div>
            
            <div class="sources-card">
                <h2>üîó –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π</h2>
                <div>
                    <span class="source-tag">üìã Adzuna API</span>
                    {"".join([f'<span class="source-tag">üåê {source.title()}</span>' for source in additional_aggregators.keys()])}
                </div>
            </div>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number cache-hits">{stats['cache_hits']}</div>
                    <h3>Cache Hits</h3>
                    <p>–£—Å–ø–µ—à–Ω—ã–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫–µ—à</p>
                </div>
                
                <div class="stat-card">
                    <div class="stat-number cache-misses">{stats['cache_misses']}</div>
                    <h3>Cache Misses</h3>
                    <p>–ü—Ä–æ–º–∞—Ö–∏ –∫–µ—à–∞</p>
                </div>
                
                <div class="stat-card">
                    <div class="stat-number hit-rate">{stats['cache_hit_rate']}</div>
                    <h3>Hit Rate</h3>
                    <p>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–µ—à–∞</p>
                </div>
                
                <div class="stat-card">
                    <div class="stat-number api-requests">{stats['api_requests']}</div>
                    <h3>API Requests</h3>
                    <p>–ó–∞–ø—Ä–æ—Å—ã –∫ –≤–Ω–µ—à–Ω–∏–º API</p>
                </div>
                
                <div class="stat-card">
                    <div class="stat-number jobs-found">{stats['total_jobs_found']}</div>
                    <h3>Jobs Found</h3>
                    <p>–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π</p>
                </div>
            </div>
            
            <div style="text-align: center; margin: 30px 0;">
                <form method="post" action="/api/cache/cleanup" style="display: inline;">
                    <button type="submit" class="cleanup-btn">
                        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
                    </button>
                </form>
            </div>
        </div>
    </body>
    </html>
    """

@app.route('/api/jobs/<job_id>')
def job_details(job_id):
   """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
   results_id = session.get('results_id')
   if not results_id or not aggregator or results_id not in aggregator.search_cache:
       return jsonify({'error': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏'}), 404
       
   job = aggregator.search_cache[results_id].get(job_id)
   
   if not job:
       return jsonify({'error': '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
   
   return jsonify(job)

@app.route('/favicon.ico')
def favicon():
   """–û–±—Ä–∞–±–æ—Ç–∫–∞ favicon"""
   return '', 204

@app.route('/health')
def health_check():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –ë–ï–ó –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫"""
    try:
        if aggregator:
            cache_stats = aggregator.get_cache_stats()
        else:
            cache_stats = {
                'api_requests': 0,
                'cache_hits': 0,
                'cache_misses': 0,
                'cache_hit_rate': '0.0%',
                'total_jobs_found': 0
            }
        
        additional_sources = list(additional_aggregators.keys()) if additional_aggregators else []
        
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; background: #f8f9fa; }}
                .container {{ max-width: 600px; margin: 0 auto; }}
                .status-card {{ background: white; padding: 20px; border-radius: 8px; margin: 20px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
                .status-good {{ border-left: 5px solid #28a745; }}
                .status-item {{ display: flex; justify-content: space-between; margin: 10px 0; }}
                .status-ok {{ color: #28a745; font-size: 1.5em; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="status-card status-good">
                    <h2 class="status-ok">üü¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</h2>
                    <div class="status-item">
                        <span>–û—Å–Ω–æ–≤–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä:</span>
                        <span>{'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if aggregator else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}</span>
                    </div>
                    <div class="status-item">
                        <span>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</span>
                        <span>{', '.join(additional_sources) if additional_sources else '–ù–µ—Ç'}</span>
                    </div>
                    <div class="status-item">
                        <span>API –∑–∞–ø—Ä–æ—Å–æ–≤:</span>
                        <span>{cache_stats.get('api_requests', 0)}</span>
                    </div>
                    <div class="status-item">
                        <span>–ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à:</span>
                        <span>{cache_stats.get('cache_hits', 0)}</span>
                    </div>
                    <div class="status-item">
                        <span>–ü—Ä–æ–º–∞—Ö–æ–≤ –∫–µ—à–∞:</span>
                        <span>{cache_stats.get('cache_misses', 0)}</span>
                    </div>
                    <div class="status-item">
                        <span>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–µ—à–∞:</span>
                        <span>{cache_stats.get('cache_hit_rate', '0.0%')}</span>
                    </div>
                    <div class="status-item">
                        <span>–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π:</span>
                        <span>{cache_stats.get('total_jobs_found', 0)}</span>
                    </div>
                    <div class="status-item">
                        <span>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</span>
                        <span>{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</span>
                    </div>
                </div>
            </div>
        </body>
        </html>
        """
    except Exception as e:
        return f"""
        <html>
        <body style="font-family: Arial; padding: 40px; text-align: center;">
            <h1 style="color: red;">‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h1>
            <p>–û—à–∏–±–∫–∞: {str(e)}</p>
        </body>
        </html>
        """, 500
@app.errorhandler(404)
def not_found(error):
   return render_template('error.html', error="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"), 404

@app.errorhandler(500)
def internal_error(error):
   return render_template('error.html', error="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"), 500

@app.route('/subscription/manage')
def manage_subscription():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    email = request.args.get('email')
    if not email:
        flash('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞', 'error')
        return redirect(url_for('index'))
    
    subscriber = Subscriber.query.filter_by(email=email, is_active=True).first()
    if not subscriber:
        flash('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
        return redirect(url_for('index'))
    
    return render_template('manage_subscription.html', 
                         subscriber=subscriber,
                         job_categories=aggregator.specific_jobs if aggregator else {},
                         countries=aggregator.countries if aggregator else {})

@app.route('/subscription/update_preferences', methods=['POST'])
def update_subscription_preferences():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        email = request.form.get('email')
        if not email:
            return jsonify({'error': 'Email –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
        
        subscriber = Subscriber.query.filter_by(email=email, is_active=True).first()
        if not subscriber:
            return jsonify({'error': '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        subscriber.is_refugee = request.form.get('is_refugee') == 'on'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        selected_jobs = request.form.getlist('selected_jobs')
        if selected_jobs:
            subscriber.set_selected_jobs(selected_jobs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã
        countries = request.form.getlist('countries')
        if countries:
            subscriber.set_countries(countries)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏ —á–∞—Å—Ç–æ—Ç—É
        subscriber.city = request.form.get('city', '').strip() or None
        subscriber.frequency = request.form.get('frequency', 'weekly')
        
        db.session.commit()
        
        # ‚úÖ –û–¢–ü–†–ê–í–õ–Ø–ï–ú EMAIL –û –ò–ó–ú–ï–ù–ï–ù–ò–Ø–•
        try:
            send_preferences_update_email(app, subscriber)
            print(f"‚úÖ Email –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
            message = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            message = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.'
        
        return jsonify({'success': True, 'message': message})
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π'}), 500

@app.route('/subscribe/update', methods=['POST'])
def update_existing_subscription():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    print("üö® –§–£–ù–ö–¶–ò–Ø –í–´–ó–í–ê–ù–ê! üö®")  # –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£ –í –°–ê–ú–û–ï –ù–ê–ß–ê–õ–û
    try:
        data = request.json or request.form.to_dict()
        email = data.get('email', '').strip().lower()
        action = data.get('action')  # 'replace' –∏–ª–∏ 'merge'
        
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É: email={email}, action={action}")  # –î–û–ë–ê–í–õ–ï–ù–û
        
        preferences = session.get('last_search_preferences', {})
        existing = Subscriber.query.filter_by(email=email).first()
        
        if not existing:
            return jsonify({'error': '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫ –Ω–∞–π–¥–µ–Ω: {existing.email}")  # –î–û–ë–ê–í–õ–ï–ù–û
        
        if action == 'replace':
            print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏...")  # –î–û–ë–ê–í–õ–ï–ù–û
            # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            existing.set_selected_jobs(preferences.get('selected_jobs', []))
            existing.set_countries(preferences.get('countries', []))
            existing.city = preferences.get('city')
            existing.is_refugee = preferences.get('is_refugee', True)
            
            db.session.commit()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")  # –î–û–ë–ê–í–õ–ï–ù–û
            
            # –û–¢–ü–†–ê–í–õ–Ø–ï–ú EMAIL
            print(f"üìß –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –Ω–∞ {email}...")  # –î–û–ë–ê–í–õ–ï–ù–û
            try:
                result = send_preferences_update_email(app, existing)
                print(f"üìß –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {result}")  # –î–û–ë–ê–í–õ–ï–ù–û
                if result:
                    print(f"‚úÖ Email –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
                else:
                    print(f"‚ùå Email –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
            except Exception as e:
                print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
                import traceback
                traceback.print_exc()  # –î–û–ë–ê–í–õ–ï–ù–û
            
            return jsonify({'success': True, 'message': '–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –°—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–æ–≤—ã–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'})
            
        elif action == 'merge':
            print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...")  # –î–û–ë–ê–í–õ–ï–ù–û
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            current_jobs = set(existing.get_selected_jobs() or [])
            current_countries = set(existing.get_countries() or [])
            
            new_jobs = set(preferences.get('selected_jobs', []))
            new_countries = set(preferences.get('countries', []))
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
            merged_jobs = list(current_jobs.union(new_jobs))
            merged_countries = list(current_countries.union(new_countries))
            
            existing.set_selected_jobs(merged_jobs)
            existing.set_countries(merged_countries)
            
            db.session.commit()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")  # –î–û–ë–ê–í–õ–ï–ù–û
            
            # –û–¢–ü–†–ê–í–õ–Ø–ï–ú EMAIL
            print(f"üìß –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –Ω–∞ {email}...")  # –î–û–ë–ê–í–õ–ï–ù–û
            try:
                result = send_preferences_update_email(app, existing)
                print(f"üìß –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {result}")  # –î–û–ë–ê–í–õ–ï–ù–û
                if result:
                    print(f"‚úÖ Email –æ–± –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
                else:
                    print(f"‚ùå Email –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
            except Exception as e:
                print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
                import traceback
                traceback.print_exc()  # –î–û–ë–ê–í–õ–ï–ù–û
            
            return jsonify({'success': True, 'message': f'–ü–æ–¥–ø–∏—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ {len(merged_jobs)} –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º –≤ {len(merged_countries)} —Å—Ç—Ä–∞–Ω–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'})
        
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'}), 400
        
    except Exception as e:
        print(f"‚ùå –û–ë–©–ê–Ø –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        import traceback
        traceback.print_exc()  # –î–û–ë–ê–í–õ–ï–ù–û
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏'}), 500
   
@app.route('/admin')
def admin_login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É"""
    error_message = '<div class="error">‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å</div>' if request.args.get('error') else ''
    
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É</title>
        <meta charset="utf-8">
        <style>
            body {{ font-family: Arial; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                   height: 100vh; display: flex; align-items: center; justify-content: center; margin: 0; }}
            .login-form {{ background: white; padding: 40px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); 
                         width: 400px; text-align: center; }}
            .form-group {{ margin: 20px 0; text-align: left; }}
            label {{ display: block; margin-bottom: 5px; font-weight: bold; }}
            input[type="text"], input[type="password"] {{ width: 100%; padding: 12px; border: 1px solid #ddd; 
                                                        border-radius: 8px; font-size: 16px; box-sizing: border-box; }}
            .btn-login {{ background: #007bff; color: white; padding: 12px 30px; border: none; 
                        border-radius: 8px; font-size: 16px; cursor: pointer; width: 100%; }}
            .btn-login:hover {{ background: #0056b3; }}
            .error {{ color: red; margin-top: 10px; }}
            h2 {{ color: #333; margin-bottom: 30px; }}
        </style>
    </head>
    <body>
        <div class="login-form">
            <h2>üîê –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É</h2>
            <form method="POST" action="/admin/login">
                <div class="form-group">
                    <label for="username">–õ–æ–≥–∏–Ω:</label>
                    <input type="text" id="username" name="username" required>
                </div>
                <div class="form-group">
                    <label for="password">–ü–∞—Ä–æ–ª—å:</label>
                    <input type="password" id="password" name="password" required>
                </div>
                <button type="submit" class="btn-login">–í–æ–π—Ç–∏</button>
                {error_message}
            </form>
        </div>
    </body>
    </html>
    """

@app.route('/admin/login', methods=['POST'])
def admin_login():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É"""
    username = request.form.get('username')
    password = request.form.get('password')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if username == 'admin' and password == 'VsemSosat':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        session['admin_logged_in'] = True
        return redirect(url_for('admin_dashboard'))
    else:
        return redirect(url_for('admin_login_page') + '?error=1')

@app.route('/admin/dashboard')
def admin_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏"""
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login_page'))
    
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>–ê–¥–º–∏–Ω–∫–∞ GlobalJobHunter</title>
        <meta charset="utf-8">
        <style>
            body {{ font-family: Arial; background: #f8f9fa; margin: 0; padding: 20px; }}
            .container {{ max-width: 1200px; margin: 0 auto; }}
            .header {{ background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; 
                       display: flex; justify-content: space-between; align-items: center; }}
            .nav {{ display: flex; gap: 15px; }}
            .nav a {{ background: #007bff; color: white; padding: 10px 20px; text-decoration: none; 
                     border-radius: 5px; transition: background 0.3s; }}
            .nav a:hover {{ background: #0056b3; }}
            .logout {{ background: #dc3545; }}
            .logout:hover {{ background: #c82333; }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üõ†Ô∏è –ê–¥–º–∏–Ω–∫–∞ GlobalJobHunter</h1>
                <div class="nav">
                    <a href="/admin/subscribers_secure">üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏</a>
                    <a href="/admin/stats_secure">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
                    <a href="/health">üíö –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã</a>
                    <a href="/admin/logout" class="logout">üö™ –í—ã–π—Ç–∏</a>
                </div>
            </div>
            
            <div style="background: white; padding: 30px; border-radius: 8px; text-align: center;">
                <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!</h2>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –≤—ã—à–µ</p>
            </div>
        </div>
    </body>
    </html>
    """

@app.route('/admin/logout')
def admin_logout():
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"""
    session.pop('admin_logged_in', None)
    return redirect(url_for('index'))

@app.route('/admin/subscribers_secure')
def admin_subscribers_secure():
    """–ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login_page'))
    
    try:
        subscribers = Subscriber.query.order_by(Subscriber.created_at.desc()).all()
        email_logs = EmailLog.query.order_by(EmailLog.sent_at.desc()).limit(10).all()
        
        stats = {
            'total': Subscriber.query.count(),
            'active': Subscriber.query.filter_by(is_active=True).count(),
            'inactive': Subscriber.query.filter_by(is_active=False).count(),
            'emails_sent': EmailLog.query.filter_by(status='sent').count(),
            'emails_failed': EmailLog.query.filter_by(status='failed').count()
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers_rows = ""
        for sub in subscribers:
            try:
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if sub.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                refugee = "‚úÖ –î–∞" if sub.is_refugee else "‚ùå –ù–µ—Ç"
                created = sub.created_at.strftime('%Y-%m-%d %H:%M')
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Å—Ç—Ä–∞–Ω—ã –ë–ï–ó–û–ü–ê–°–ù–û
                try:
                    jobs_list = sub.get_selected_jobs()
                    jobs = ', '.join(jobs_list[:3]) if jobs_list else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    if len(jobs_list) > 3:
                        jobs += f' (+{len(jobs_list)-3})'
                except Exception as e:
                    jobs = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è {sub.email}: {e}")
                
                try:
                    countries_list = sub.get_countries()
                    countries = ', '.join(countries_list) if countries_list else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                except Exception as e:
                    countries = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω –¥–ª—è {sub.email}: {e}")
                
                city = sub.city or '–ù–µ —É–∫–∞–∑–∞–Ω'
                
                subscribers_rows += f"""
                    <tr>
                        <td>{sub.email}</td>
                        <td>{status}</td>
                        <td>{refugee}</td>
                        <td class="job-list">{jobs}</td>
                        <td>{countries}</td>
                        <td>{city}</td>
                        <td>{created}</td>
                    </tr>"""
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ {sub.id}: {e}")
                subscribers_rows += f"""
                    <tr>
                        <td>{sub.email}</td>
                        <td>‚ùå –û—à–∏–±–∫–∞</td>
                        <td>-</td>
                        <td>-</td>
                        <td>-</td>
                        <td>-</td>
                        <td>-</td>
                    </tr>"""
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ email –ª–æ–≥–æ–≤ –ë–ï–ó–û–ü–ê–°–ù–û
        email_logs_rows = ""
        for log in email_logs:
            try:
                status_icon = "‚úÖ" if log.status == 'sent' else "‚ùå"
                sent_time = log.sent_at.strftime('%Y-%m-%d %H:%M')
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ email
                if log.subscriber:
                    email = log.subscriber.email
                else:
                    # –ï—Å–ª–∏ subscriber —É–¥–∞–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID –∏–ª–∏ email –∏–∑ –ª–æ–≥–∞
                    email = f"–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫ (ID: {log.subscriber_id})"
                
                email_logs_rows += f"""
                    <tr>
                        <td>{email}</td>
                        <td>{status_icon} {log.status}</td>
                        <td>{sent_time}</td>
                    </tr>"""
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞ {log.id}: {e}")
                email_logs_rows += f"""
                    <tr>
                        <td>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</td>
                        <td>‚ùå –û—à–∏–±–∫–∞</td>
                        <td>-</td>
                    </tr>"""
                
        # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π HTML
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ - –ê–¥–º–∏–Ω–∫–∞</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; background: #f8f9fa; }}
                .container {{ max-width: 1200px; margin: 0 auto; }}
                table {{ border-collapse: collapse; width: 100%; margin: 20px 0; background: white; }}
                th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
                th {{ background-color: #007bff; color: white; }}
                .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }}
                .stat-card {{ background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
                .stat-number {{ font-size: 2em; font-weight: bold; color: #007bff; }}
                .nav {{ display: flex; gap: 20px; margin: 20px 0; }}
                .nav a {{ background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; }}
                .job-list {{ font-size: 0.9em; color: #666; }}
                .error {{ color: #dc3545; font-weight: bold; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üìß –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ GlobalJobHunter</h1>
                
                <div class="nav">
                    <a href="/admin/dashboard">üè† –ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω–∫–∏</a>
                    <a href="/admin/stats_secure">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
                    <a href="/admin/logout">üö™ –í—ã–π—Ç–∏</a>
                </div>
                
                <div class="stats">
                    <div class="stat-card">
                        <div class="stat-number">{stats['total']}</div>
                        <p>–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</p>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{stats['active']}</div>
                        <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö</p>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{stats['inactive']}</div>
                        <p>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö</p>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{stats['emails_sent']}</div>
                        <p>Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</p>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{stats['emails_failed']}</div>
                        <p>Email –æ—à–∏–±–æ–∫</p>
                    </div>
                </div>
                
                <h2>üìã –ü–æ–¥–ø–∏—Å—á–∏–∫–∏</h2>
                <table>
                    <tr>
                        <th>Email</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–ë–µ–∂–µ–Ω–µ—Ü</th>
                        <th>–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏</th>
                        <th>–°—Ç—Ä–∞–Ω—ã</th>
                        <th>–ì–æ—Ä–æ–¥</th>
                        <th>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th>
                    </tr>
                    {subscribers_rows}
                </table>
                
                <h2>üì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ email –ª–æ–≥–∏</h2>
                <table>
                    <tr>
                        <th>Email</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–î–∞—Ç–∞</th>
                    </tr>
                    {email_logs_rows}
                </table>
            </div>
        </body>
        </html>"""
        
        return html
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ admin_subscribers_secure: {e}")
        import traceback
        traceback.print_exc()
        return f"""
        <html>
        <body style="font-family: Arial; padding: 40px;">
            <h1 class="error">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–∫–∏</h1>
            <p>–û—à–∏–±–∫–∞: {str(e)}</p>
            <a href="/admin/dashboard">üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É</a>
        </body>
        </html>
        """, 500

@app.route('/admin/stats_secure')
def admin_stats_secure():
    """–ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login_page'))
    
    if not aggregator:
        return "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", 500
    
    stats = aggregator.get_cache_stats()
    
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ê–¥–º–∏–Ω–∫–∞</title>
        <meta charset="utf-8">
        <style>
            body {{ font-family: Arial; background: #f8f9fa; margin: 0; padding: 20px; }}
            .container {{ max-width: 1200px; margin: 0 auto; }}
            .nav {{ display: flex; gap: 15px; margin: 20px 0; }}
            .nav a {{ background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; }}
            .stats-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; }}
            .stat-card {{ background: white; padding: 25px; border-radius: 8px; text-align: center; }}
            .stat-number {{ font-size: 2em; font-weight: bold; color: #007bff; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h1>
            
            <div class="nav">
                <a href="/admin/dashboard">üè† –ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω–∫–∏</a>
                <a href="/admin/subscribers_secure">üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏</a>
                <a href="/admin/logout">üö™ –í—ã–π—Ç–∏</a>
            </div>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">{stats['cache_hits']}</div>
                    <h3>Cache Hits</h3>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats['api_requests']}</div>
                    <h3>API Requests</h3>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats['total_jobs_found']}</div>
                    <h3>Jobs Found</h3>
                </div>
            </div>
        </div>
    </body>
    </html>
    """    
@app.route('/send-notifications')
def send_notifications():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    try:
        from email_service import send_job_notifications
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        subscribers = Subscriber.query.filter_by(is_active=True).all()
        debug_info = []
        
        debug_info.append(f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")
        
        for sub in subscribers:
            jobs = sub.get_selected_jobs()
            countries = sub.get_countries()
            debug_info.append(f"üë§ {sub.email}: –ø—Ä–æ—Ñ–µ—Å—Å–∏–π={len(jobs)}, —Å—Ç—Ä–∞–Ω={len(countries)}")
            debug_info.append(f"   –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏: {jobs[:3]}")
            debug_info.append(f"   –°—Ç—Ä–∞–Ω—ã: {countries}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        sent_count = send_job_notifications(app, aggregator)
        
        debug_info.append(f"üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
        
        return "<br>".join(debug_info)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
@app.route('/support')
def support():
    return render_template('support.html')  # –∏–ª–∏ 'support_page.html' 

def email_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ email —Ä–∞—Å—Å—ã–ª–∫–∏"""
    print("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ email —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω")
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00
    schedule.every().day.at("09:00").do(send_daily_notifications)
    
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 9:00  
    schedule.every().monday.at("09:00").do(send_weekly_notifications)
    
    # –ï–∂–µ–º–µ—Å—è—á–Ω–æ 1 —á–∏—Å–ª–∞ –≤ 9:00 (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
    schedule.every(30).days.at("09:00").do(send_monthly_notifications)
    
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã (–£–î–ê–õ–ò–¢–¨ –í –ü–†–û–î–ê–ö–®–ï–ù–ï)
    # schedule.every(2).minutes.do(send_test_notifications)
    
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def send_daily_notifications():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    try:
        print("üìß –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
        with app.app_context():
            subscribers = Subscriber.query.filter_by(is_active=True, frequency='daily').all()
            print(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π")
            
            if not subscribers:
                print("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            sent_count = 0
            for subscriber in subscribers:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è)
                    if subscriber.last_sent:
                        last_sent_date = subscriber.last_sent.date()
                        today = datetime.now().date()
                        if last_sent_date >= today:
                            print(f"‚è≠Ô∏è {subscriber.email}: —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è")
                            continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    result = send_job_notifications_for_subscriber(app, aggregator, subscriber)
                    if result:
                        sent_count += 1
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {subscriber.email}: {e}")
            
            print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count}/{len(subscribers)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

def send_weekly_notifications():
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    try:
        print("üìß –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
        with app.app_context():
            subscribers = Subscriber.query.filter_by(is_active=True, frequency='weekly').all()
            print(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π")
            
            if not subscribers:
                print("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            sent_count = 0
            for subscriber in subscribers:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ)
                    if subscriber.last_sent:
                        days_since_last = (datetime.now() - subscriber.last_sent).days
                        if days_since_last < 7:
                            print(f"‚è≠Ô∏è {subscriber.email}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {days_since_last} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
                            continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    result = send_job_notifications_for_subscriber(app, aggregator, subscriber)
                    if result:
                        sent_count += 1
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {subscriber.email}: {e}")
            
            print(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count}/{len(subscribers)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

def send_monthly_notifications():
    """–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    try:
        print("üìß –ó–∞–ø—É—Å–∫ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
        with app.app_context():
            subscribers = Subscriber.query.filter_by(is_active=True, frequency='monthly').all()
            print(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π")
            
            if not subscribers:
                print("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            sent_count = 0
            for subscriber in subscribers:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ)
                    if subscriber.last_sent:
                        days_since_last = (datetime.now() - subscriber.last_sent).days
                        if days_since_last < 30:
                            print(f"‚è≠Ô∏è {subscriber.email}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {days_since_last} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
                            continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    result = send_job_notifications_for_subscriber(app, aggregator, subscriber)
                    if result:
                        sent_count += 1
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {subscriber.email}: {e}")
            
            print(f"‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count}/{len(subscribers)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

def send_test_notifications():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    print("üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞...")
    with app.app_context():
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
        subscriber = Subscriber.query.filter_by(is_active=True).first()
        if subscriber:
            print(f"üìß –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ {subscriber.email}")
            send_job_notifications_for_subscriber(app, aggregator, subscriber)
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

def send_job_notifications_for_subscriber(app, aggregator, subscriber):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É"""
    try:
        preferences = {
            'is_refugee': subscriber.is_refugee,
            'selected_jobs': subscriber.get_selected_jobs(),
            'countries': subscriber.get_countries(),
            'city': subscriber.city
        }
        
        if not preferences['selected_jobs'] or not preferences['countries']:
            print(f"‚ö†Ô∏è –£ {subscriber.email} –Ω–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–ª–∏ —Å—Ç—Ä–∞–Ω")
            return False
        
        # –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
        jobs = aggregator.search_specific_jobs(preferences)
        
        if len(jobs) > 0:
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(jobs)} –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {subscriber.email}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            from email_service import send_job_email
            success = send_job_email(app, subscriber, jobs[:20], preferences)  # –ú–∞–∫—Å–∏–º—É–º 20 –≤–∞–∫–∞–Ω—Å–∏–π
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                subscriber.last_sent = datetime.now()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                log = EmailLog(
                    subscriber_id=subscriber.id,
                    subject=f"–ù–∞–π–¥–µ–Ω–æ {len(jobs)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
                    jobs_count=len(jobs),
                    status='sent',
                    sent_at=datetime.now()
                )
                db.session.add(log)
                db.session.commit()
                
                print(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {subscriber.email}")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –Ω–∞ {subscriber.email}")
                return False
        else:
            print(f"‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {subscriber.email}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {subscriber.email}: {e}")
        return False   
    
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¥–ª—è Railway
if os.getenv('RAILWAY_ENVIRONMENT'):
    with app.app_context():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            from sqlalchemy import inspect
            inspector = inspect(db.engine)
            existing_tables = inspector.get_table_names()
            
            if not existing_tables:
                print("üîÑ –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ...")
                db.create_all()
                print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
            else:
                print(f"‚úÖ –ë–î —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏: {existing_tables}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º db.create_all() –∑–¥–µ—Å—å!   

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ email —Ä–∞—Å—Å—ã–ª–∫–∏...")
    scheduler_thread = Thread(target=email_scheduler, daemon=True)
    scheduler_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.environ.get('PORT', 5000))
    debug = os.environ.get('FLASK_ENV') == 'development'
    
    print("üåç –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    app.run(host='0.0.0.0', port=port, debug=debug)


