# -*- coding: utf-8 -*-
from flask_mail import Mail, Message
from database import db, Subscriber, EmailLog
from datetime import datetime, timedelta
import os
from threading import Thread
import time
import json

_UI_DICT_CACHE = {}

def _front_tr(lang: str, s: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ä—É—Å—Å–∫—É—é —Ñ—Ä–∞–∑—É s —Å –ø–æ–º–æ—â—å—é —Ñ—Ä–æ–Ω—Ç–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è /static/i18n/<lang>.json.
       –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ s."""
    if not s or lang == 'ru':
        return s
    try:
        d = _UI_DICT_CACHE.get(lang)
        if d is None:
            base = os.path.join(os.path.dirname(__file__), 'static', 'i18n', f'{lang}.json')
            with open(base, 'r', encoding='utf-8') as f:
                d = json.load(f)
            _UI_DICT_CACHE[lang] = d
        return d.get(s, s)
    except Exception:
        return s

# -----------------------------------------------------------------------------
# Server-side i18n –¥–ª—è –ø–∏—Å–µ–º (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å; —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ –ø–æ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏)
# -----------------------------------------------------------------------------

I18N = {
    "ru": {
        "app_name": "GlobalJobHunter",

        # subjects / headings
        "digest_subject": "üéØ –ù–∞–π–¥–µ–Ω–æ {n} {vac_forms}",
        "digest_subject_1": "üéØ –ù–∞–π–¥–µ–Ω–∞ 1 –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è",
        "welcome_subject": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlobalJobHunter!",
        "prefs_subject": "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",

        # plural forms base words
        "vacancy_forms": ("–Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π", "–Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", "–Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π"),  # many, few(2-4), many(5+)
        "vacancy_forms_short": ("–≤–∞–∫–∞–Ω—Å–∏–π", "–≤–∞–∫–∞–Ω—Å–∏–∏", "–≤–∞–∫–∞–Ω—Å–∏–π"),

        # digest header/subheader
        "digest_title": "–ù–∞–π–¥–µ–Ω–æ {n} {vac_short}",
        "digest_intro": "–ü—Ä–∏–≤–µ—Ç! –ú—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º:",
        "pref_professions": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏",
        "pref_countries": "–°—Ç—Ä–∞–Ω—ã",
        "pref_city": "–ì–æ—Ä–æ–¥",
        "digest_all_jobs": "üéØ –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:",

        # job card
        "badge_refugee": "üè† –î–ª—è –±–µ–∂–µ–Ω—Ü–µ–≤",
        "badge_no_lang": "üîá –ë–µ–∑ —è–∑—ã–∫–∞",
        "btn_apply": "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è",

        # digest footer
        "auto_notice": "–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç GlobalJobHunter",
        "manage": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        "unsubscribe": "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏",
        "find_job_now": "üîç –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É —Å–µ–π—á–∞—Å",
        "copyright": "¬© {year} GlobalJobHunter.",

        # welcome email
        "welcome_title": "üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlobalJobHunter!",
        "welcome_tagline": "–í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É",
        "welcome_thanks": "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!",
        "welcome_you_will_get": "üìß –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:",
        "welcome_bul_1": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
        "welcome_bul_2": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π",
        "welcome_bul_3": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –±–µ–∂–µ–Ω—Ü–µ–≤",
        "welcome_bul_4": "–í–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —è–∑—ã–∫—É",
        "welcome_manage": "‚öôÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "welcome_find_now": "üîç –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É —Å–µ–π—á–∞—Å",
        "welcome_box_title": "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "welcome_box_text_1": "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è:",
        "welcome_box_list": [
            "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Å—Ç—Ä–∞–Ω—ã –ø–æ–∏—Å–∫–∞",
            "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞",
            "–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
        ],
        "welcome_box_text_2": "–î–ª—è —ç—Ç–æ–≥–æ: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π¬ª –≤—ã—à–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø–∏—Å—å–º–∞—Ö —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏.",
        "welcome_email": "–í–∞—à email",
        "welcome_freq": "–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "welcome_weekly": "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
        "nav_manage": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "nav_unsub": "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
        "nav_find": "–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É",

        # preferences updated
        "prefs_title": "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        "prefs_intro": "–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:",
        "prefs_professions": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏",
        "prefs_countries": "–°—Ç—Ä–∞–Ω—ã",
        "prefs_city": "–ì–æ—Ä–æ–¥",
        "prefs_city_none": "–ù–µ —É–∫–∞–∑–∞–Ω",
        "prefs_frequency": "–ß–∞—Å—Ç–æ—Ç–∞",
        "prefs_change_again": "–ò–∑–º–µ–Ω–∏—Ç—å —Å–Ω–æ–≤–∞",

        # countries header in digest list
        "country_header": "üåç {country} ({n} {vac_short})"
    },

    "en": {
        "app_name": "GlobalJobHunter",

        "digest_subject": "üéØ Found {n} {vac_forms}",
        "digest_subject_1": "üéØ 1 new job found",
        "welcome_subject": "üéâ Welcome to GlobalJobHunter!",
        "prefs_subject": "‚úÖ Subscription settings updated",

        "vacancy_forms": ("new jobs", "new jobs", "new jobs"),
        "vacancy_forms_short": ("jobs", "jobs", "jobs"),

        "digest_title": "Found {n} {vac_short}",
        "digest_intro": "Hi! We‚Äôve found new jobs based on your preferences:",
        "pref_professions": "Professions",
        "pref_countries": "Countries",
        "pref_city": "City",
        "digest_all_jobs": "üéØ All found vacancies:",

        "badge_refugee": "üè† Refugee-friendly",
        "badge_no_lang": "üîá No language required",
        "btn_apply": "Apply",

        "auto_notice": "This is an automated notification from GlobalJobHunter",
        "manage": "‚öôÔ∏è Manage subscription",
        "unsubscribe": "Unsubscribe",
        "find_job_now": "üîç Find a job now",
        "copyright": "¬© {year} GlobalJobHunter.",

        "welcome_title": "üåç Welcome to GlobalJobHunter!",
        "welcome_tagline": "Your assistant for finding jobs worldwide",
        "welcome_thanks": "üéâ Thanks for subscribing!",
        "welcome_you_will_get": "üìß What you‚Äôll get:",
        "welcome_bul_1": "Weekly digests of fresh vacancies",
        "welcome_bul_2": "Personalized suggestions based on your preferences",
        "welcome_bul_3": "Special options for Ukrainian refugees",
        "welcome_bul_4": "Jobs that don‚Äôt require local language",
        "welcome_manage": "‚öôÔ∏è Manage subscription",
        "welcome_find_now": "üîç Start job search",
        "welcome_box_title": "üõ†Ô∏è Subscription management",
        "welcome_box_text_1": "You can at any time:",
        "welcome_box_list": [
            "Change professions and countries",
            "Adjust notification frequency",
            "Add or remove cities",
            "Unsubscribe completely"
        ],
        "welcome_box_text_2": "Click ‚ÄúManage subscription‚Äù above or use the link in job emails.",
        "welcome_email": "Your email",
        "welcome_freq": "Frequency",
        "welcome_weekly": "weekly",
        "nav_manage": "Manage subscription",
        "nav_unsub": "Unsubscribe",
        "nav_find": "Find jobs",

        "prefs_title": "‚úÖ Settings updated!",
        "prefs_intro": "Your job search preferences were updated successfully:",
        "prefs_professions": "Professions",
        "prefs_countries": "Countries",
        "prefs_city": "City",
        "prefs_city_none": "Not specified",
        "prefs_frequency": "Frequency",
        "prefs_change_again": "Change again",

        "country_header": "üåç {country} ({n} {vac_short})"
    },

    "uk": {
        "app_name": "GlobalJobHunter",

        "digest_subject": "üéØ –ó–Ω–∞–π–¥–µ–Ω–æ {n} {vac_forms}",
        "digest_subject_1": "üéØ –ó–Ω–∞–π–¥–µ–Ω–∞ 1 –Ω–æ–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—è",
        "welcome_subject": "üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ GlobalJobHunter!",
        "prefs_subject": "‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ",

        "vacancy_forms": ("–Ω–æ–≤–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π", "–Ω–æ–≤—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó", "–Ω–æ–≤–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π"),
        "vacancy_forms_short": ("–≤–∞–∫–∞–Ω—Å—ñ–π", "–≤–∞–∫–∞–Ω—Å—ñ—ó", "–≤–∞–∫–∞–Ω—Å—ñ–π"),

        "digest_title": "–ó–Ω–∞–π–¥–µ–Ω–æ {n} {vac_short}",
        "digest_intro": "–í—ñ—Ç–∞—î–º–æ! –ú–∏ –∑–Ω–∞–π—à–ª–∏ –¥–ª—è –≤–∞—Å –Ω–æ–≤—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –∑–∞ –≤–∞—à–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏:",
        "pref_professions": "–ü—Ä–æ—Ñ–µ—Å—ñ—ó",
        "pref_countries": "–ö—Ä–∞—ó–Ω–∏",
        "pref_city": "–ú—ñ—Å—Ç–æ",
        "digest_all_jobs": "üéØ –£—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó:",

        "badge_refugee": "üè† –î–ª—è –±—ñ–∂–µ–Ω—Ü—ñ–≤",
        "badge_no_lang": "üîá –ë–µ–∑ –º–æ–≤–∏",
        "btn_apply": "–í—ñ–¥–≥—É–∫–Ω—É—Ç–∏—Å—è",

        "auto_notice": "–¶–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥ GlobalJobHunter",
        "manage": "‚öôÔ∏è –ö–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–æ—é",
        "unsubscribe": "–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è",
        "find_job_now": "üîç –ó–Ω–∞–π—Ç–∏ —Ä–æ–±–æ—Ç—É –∑–∞—Ä–∞–∑",
        "copyright": "¬© {year} GlobalJobHunter.",

        "welcome_title": "üåç –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ GlobalJobHunter!",
        "welcome_tagline": "–í–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ —É –ø–æ—à—É–∫—É —Ä–æ–±–æ—Ç–∏ —É –±—É–¥—å-—è–∫—ñ–π —Ç–æ—á—Ü—ñ —Å–≤—ñ—Ç—É",
        "welcome_thanks": "üéâ –î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É!",
        "welcome_you_will_get": "üìß –©–æ –Ω–∞ –≤–∞—Å —á–µ–∫–∞—î:",
        "welcome_bul_1": "–©–æ—Ç–∏–∂–Ω–µ–≤—ñ –¥–æ–±—ñ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π",
        "welcome_bul_2": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –≤–ø–æ–¥–æ–±–∞–Ω—å",
        "welcome_bul_3": "–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –±—ñ–∂–µ–Ω—Ü—ñ–≤",
        "welcome_bul_4": "–í–∞–∫–∞–Ω—Å—ñ—ó –±–µ–∑ –≤–∏–º–æ–≥ –¥–æ –º–æ–≤–∏",
        "welcome_manage": "‚öôÔ∏è –ö–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–æ—é",
        "welcome_find_now": "üîç –ó–Ω–∞–π—Ç–∏ —Ä–æ–±–æ—Ç—É –∑–∞—Ä–∞–∑",
        "welcome_box_title": "üõ†Ô∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–æ—é",
        "welcome_box_text_1": "–í–∏ –º–æ–∂–µ—Ç–µ –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å:",
        "welcome_box_list": [
            "–ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—ó —Ç–∞ –∫—Ä–∞—ó–Ω–∏ –ø–æ—à—É–∫—É",
            "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —á–∞—Å—Ç–æ—Ç—É —Å–ø–æ–≤—ñ—â–µ–Ω—å",
            "–î–æ–¥–∞—Ç–∏ –∞–±–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–∞",
            "–ü–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è"
        ],
        "welcome_box_text_2": "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ö–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–æ—é¬ª –≤–∏—â–µ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —É –ª–∏—Å—Ç–∞—Ö.",
        "welcome_email": "–í–∞—à email",
        "welcome_freq": "–ß–∞—Å—Ç–æ—Ç–∞",
        "welcome_weekly": "—â–æ—Ç–∏–∂–Ω—è",
        "nav_manage": "–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–æ—é",
        "nav_unsub": "–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è",
        "nav_find": "–ó–Ω–∞–π—Ç–∏ —Ä–æ–±–æ—Ç—É",

        "prefs_title": "‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!",
        "prefs_intro": "–í–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É –≤–∞–∫–∞–Ω—Å—ñ–π —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ:",
        "prefs_professions": "–ü—Ä–æ—Ñ–µ—Å—ñ—ó",
        "prefs_countries": "–ö—Ä–∞—ó–Ω–∏",
        "prefs_city": "–ú—ñ—Å—Ç–æ",
        "prefs_city_none": "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
        "prefs_frequency": "–ß–∞—Å—Ç–æ—Ç–∞",
        "prefs_change_again": "–ó–º—ñ–Ω–∏—Ç–∏ –∑–Ω–æ–≤—É",

        "country_header": "üåç {country} ({n} {vac_short})"
    }
}


def _get_lang(subscriber, fallback='ru'):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–∏—Å—å–º–∞: –ø–æ–ª–µ subscriber.lang -> cookie/lang –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ, –∏–Ω–∞—á–µ RU."""
    try:
        lang = (subscriber.lang or "").lower().strip()
        return lang if lang in I18N else fallback
    except Exception:
        return fallback


def _pf_ru(n):
    # —Ñ–æ—Ä–º—ã 1, few(2-4), many(5+)
    n = abs(int(n))
    if n % 10 == 1 and n % 100 != 11:
        return 1
    if 2 <= (n % 10) <= 4 and not (12 <= (n % 100) <= 14):
        return 2
    return 0  # many


def _pf_uk(n):
    # –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ
    n = abs(int(n))
    if n % 10 == 1 and n % 100 != 11:
        return 1
    if 2 <= (n % 10) <= 4 and not (12 <= (n % 100) <= 14):
        return 2
    return 0


def _pf_en(n):
    # –∞–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Äì —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–¥–Ω–∞ —Ñ–æ—Ä–º–∞
    return 0


def _plural_form_index(lang, n):
    if lang == 'ru':
        return _pf_ru(n)
    if lang == 'uk':
        return _pf_uk(n)
    return _pf_en(n)


def _tr(lang, key, **kwargs):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏."""
    d = I18N.get(lang, I18N['ru'])
    s = d.get(key, I18N['ru'].get(key, key))
    try:
        return s.format(**kwargs)
    except Exception:
        return s


def _vacancy_forms(lang, n, long=True):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º–æ–π —Å–ª–æ–≤–∞ '–≤–∞–∫–∞–Ω—Å–∏—è'."""
    idx = _plural_form_index(lang, n)
    arr = I18N[lang]['vacancy_forms' if long else 'vacancy_forms_short']
    return arr[idx]

# --- Remote-only sources gating for e-mail ---
REMOTE_OK_CATS = {
    'üíª IT –ò –¢–ï–•–ù–û–õ–û–ì–ò–ò',
    'üëî –û–§–ò–° –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï',
    'üîç –î–†–£–ì–û–ï',
}
REMOTE_OK_TITLES = {
    '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ',
    '–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó',
}

def _remote_allowed_email(preferences: dict, specific_jobs_map: dict) -> bool:
    selected = set(preferences.get('selected_jobs') or [])
    if not selected:
        return False
    sj = specific_jobs_map or {}
    for cat, ru_map in sj.items():
        if isinstance(ru_map, dict) and cat in REMOTE_OK_CATS:
            if any(ru in ru_map for ru in selected):
                return True
    if any(t in selected for t in REMOTE_OK_TITLES):
        return True
    return False

# -----------------------------------------------------------------------------
# –ü–æ–∏—Å–∫/–∞–≥—Ä–µ–≥–∞—Ü–∏—è (–≤–∞—à –∫–æ–¥ ‚Äî —Ç–æ–ª—å–∫–æ —Å–ª–µ–≥–∫–∞ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω –ø–æ–¥ lang)
# -----------------------------------------------------------------------------

def _search_all_sources(main_aggregator, additional_aggregators, preferences):
    """
    –ü–æ–∏—Å–∫ –ø–æ –í–°–ï–ú –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è.
    """
    print(f"   üîç –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —á–µ—Ä–µ–∑ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
    all_found_jobs = []

    # 1) –û—Å–Ω–æ–≤–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä (Adzuna)
    if main_aggregator:
        try:
            adzuna_jobs = main_aggregator.search_specific_jobs(preferences)
            all_found_jobs.extend(adzuna_jobs)
            print(f"   ‚úÖ Adzuna: –Ω–∞–π–¥–µ–Ω–æ {len(adzuna_jobs)} –≤–∞–∫–∞–Ω—Å–∏–π")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Adzuna –æ—à–∏–±–∫–∞: {e}")

    # 2) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã
    use_remote = _remote_allowed_email(preferences, getattr(main_aggregator, 'specific_jobs', {}))
    for source_name, aggregator in additional_aggregators.items():
        # –°–∫–∏–ø–∞–µ–º remote-only –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–∏ –Ω–µ-—É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö
        if source_name in ('remotive', 'jobicy') and not use_remote:
            print(f"   ‚õî –ü—Ä–æ–ø—É—Å–∫ {source_name}: –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç —É–¥–∞–ª—ë–Ω–∫—É")
            continue
        try:
            additional_jobs = aggregator.search_jobs(preferences)
            all_found_jobs.extend(additional_jobs)
            print(f"   ‚úÖ {source_name.title()}: –Ω–∞–π–¥–µ–Ω–æ {len(additional_jobs)} –≤–∞–∫–∞–Ω—Å–∏–π")
        except Exception as e:
            print(f"   ‚ö†Ô∏è {source_name.title()} –æ—à–∏–±–∫–∞: {e}")


    # 3) –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ apply_url
    seen_urls = set()
    final_jobs = []
    for job in all_found_jobs:
        if hasattr(job, 'apply_url') and job.apply_url and job.apply_url not in seen_urls:
            seen_urls.add(job.apply_url)
            final_jobs.append(job)

    print(f"   üìä –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {len(final_jobs)}")
    return final_jobs


# -----------------------------------------------------------------------------
# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
# -----------------------------------------------------------------------------

def _send_notification_for_subscriber(app, subscriber, main_aggregator, additional_aggregators):
    """
    –ò—â–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –û–î–ù–û–ì–û –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.
    """
    try:
        preferences = {
            'is_refugee': subscriber.is_refugee,
            'selected_jobs': subscriber.get_selected_jobs(),
            'countries': subscriber.get_countries(),
            'cities': [subscriber.city] if subscriber.city else []
        }

        if not preferences['selected_jobs'] or not preferences['countries']:
            print(f"   ‚ö†Ô∏è –£ {subscriber.email} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False

        final_jobs = _search_all_sources(main_aggregator, additional_aggregators, preferences)
        if not final_jobs:
            print(f"   ‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {subscriber.email} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
            return False

        lang = _get_lang(subscriber)

        print(f"   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email ({lang}) —Å {len(final_jobs)} –≤–∞–∫–∞–Ω—Å–∏—è–º–∏...")
        success = send_job_email(app, subscriber, final_jobs[:20], preferences, lang=lang)  # –ª–∏–º–∏—Ç 20

        if success:
            subject = _digest_subject(lang, len(final_jobs))
            log = EmailLog(
                subscriber_id=subscriber.id,
                email=subscriber.email,
                subject=subject,
                jobs_count=len(final_jobs),
                status='sent',
                sent_at=datetime.now()
            )
            db.session.add(log)
            subscriber.last_sent = datetime.now()
            print(f"   ‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {subscriber.email}")
            return True
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –Ω–∞ {subscriber.email}")
            return False

    except Exception as e:
        print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¥–ª—è {subscriber.email}: {e}")
        import traceback
        traceback.print_exc()
        return False


mail = Mail()


def send_async_email(app, msg):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    with app.app_context():
        try:
            print(f"üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –Ω–∞ {msg.recipients[0]}...")
            mail.send(msg)
            print(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {msg.recipients[0]}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ {msg.recipients[0]}: {e}")
            return False


# -----------------------------------------------------------------------------
# –ü–∞–∫–µ—Ç–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ / –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)
# -----------------------------------------------------------------------------

def send_job_notifications(app, main_aggregator, additional_aggregators={}):
    """
    –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (–∏–∑ –∞–¥–º–∏–Ω–∫–∏).
    """
    with app.app_context():
        print("=" * 60)
        print("üìß –ù–ê–ß–ò–ù–ê–ï–ú –†–£–ß–ù–£–Æ –û–¢–ü–†–ê–í–ö–£ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô...")
        print("=" * 60)

        subscribers = Subscriber.query.filter_by(is_active=True).all()
        print(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(subscribers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")

        if not subscribers:
            return 0

        sent_count = 0
        for i, subscriber in enumerate(subscribers, 1):
            print(f"\nüîÑ ({i}/{len(subscribers)}) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {subscriber.email}...")
            if _send_notification_for_subscriber(app, subscriber, main_aggregator, additional_aggregators):
                sent_count += 1
            time.sleep(3)  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

        db.session.commit()
        print("=" * 60)
        print(f"üéâ –†–£–ß–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: {sent_count}/{len(subscribers)} –ø–∏—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print("=" * 60)
        return sent_count


def run_scheduled_notifications(app, main_aggregator, additional_aggregators):
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    """
    with app.app_context():
        print("="*60)
        print(f"üìÖ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ {datetime.now().strftime('%H:%M:%S')}")
        print("="*60)

        subscribers_to_notify = []
        all_active_subscribers = Subscriber.query.filter_by(is_active=True).all()

        for sub in all_active_subscribers:
            if should_send_notification(sub):
                subscribers_to_notify.append(sub)

        if not subscribers_to_notify:
            print("‚ÑπÔ∏è –ü–õ–ê–ù–ò–†–û–í–©–ò–ö: –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
            return

        print(f"üì¨ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö: –ù–∞–π–¥–µ–Ω–æ {len(subscribers_to_notify)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

        sent_count = 0
        for i, subscriber in enumerate(subscribers_to_notify, 1):
            print(f"\nüîÑ ({i}/{len(subscribers_to_notify)}) –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è {subscriber.email}...")
            if _send_notification_for_subscriber(app, subscriber, main_aggregator, additional_aggregators):
                sent_count += 1
            time.sleep(5)

        db.session.commit()
        print("=" * 60)
        print(f"üéâ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–í–ï–†–®–ï–ù: {sent_count}/{len(subscribers_to_notify)} –ø–∏—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print("=" * 60)


# -----------------------------------------------------------------------------
# Fallback-–≤–∞–∫–∞–Ω—Å–∏–∏ (–æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ —É –≤–∞—Å; –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
# -----------------------------------------------------------------------------

def create_fallback_jobs(preferences):
    """–°–æ–∑–¥–∞–Ω–∏–µ fallback –≤–∞–∫–∞–Ω—Å–∏–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
    fallback_jobs = []

    for i, job_title in enumerate(preferences['selected_jobs'][:2]):
        for j, country_code in enumerate(preferences['countries'][:2]):
            country_names = {'de': '–ì–µ—Ä–º–∞–Ω–∏—è', 'pl': '–ü–æ–ª—å—à–∞', 'gb': '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', 'us': '–°–®–ê', 'ca': '–ö–∞–Ω–∞–¥–∞'}
            country_name = country_names.get(country_code, country_code.upper())

            fake_job = type('FallbackJob', (), {
                'id': f'fallback_{i}_{j}',
                'title': f"{job_title}",
                'company': f'–ö–æ–º–ø–∞–Ω–∏—è #{i+j+1}',
                'location': f"{country_name}",
                'country': country_name,
                'salary': '‚Ç¨2500-3500' if country_code in ['de'] else '$3000-4500',
                'description': f'–í–∞–∫–∞–Ω—Å–∏—è {job_title} –≤ {country_name}. –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –£–∫—Ä–∞–∏–Ω—ã.',
                'apply_url': f'https://jobs-example.com/apply/{i}{j}',
                'source': 'fallback',
                'posted_date': datetime.now().strftime('%Y-%m-%d'),
                'job_type': 'full_time',
                'refugee_friendly': preferences.get('is_refugee', True),
                'language_requirement': 'no_language_required' if preferences.get('is_refugee') else 'basic'
            })()

            fallback_jobs.append(fake_job)

    print(f"üß™ –°–æ–∑–¥–∞–Ω–æ {len(fallback_jobs)} fallback –≤–∞–∫–∞–Ω—Å–∏–π")
    return fallback_jobs


# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# -----------------------------------------------------------------------------

def should_send_notification(subscriber):
    """–ù—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç–æ—Ç–µ."""
    if not subscriber.last_sent:
        return True

    now = datetime.utcnow()
    if subscriber.frequency == 'daily':
        return now - subscriber.last_sent > timedelta(days=1)
    elif subscriber.frequency == 'weekly':
        return now - subscriber.last_sent > timedelta(days=7)
    elif subscriber.frequency == 'monthly':
        return now - subscriber.last_sent > timedelta(days=30)
    return False


def _digest_subject(lang, total_count):
    """–õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π subject –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
    if total_count == 1:
        return _tr(lang, "digest_subject_1")
    vac_forms = _vacancy_forms(lang, total_count, long=True)
    return _tr(lang, "digest_subject", n=total_count, vac_forms=vac_forms)


# -----------------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
# -----------------------------------------------------------------------------

def send_job_email(app, subscriber, jobs, preferences, lang=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–æ)."""
    try:
        lang = lang or _get_lang(subscriber)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –Ω–∞ {subscriber.email} ({lang}) —Å {len(jobs)} –≤–∞–∫–∞–Ω—Å–∏—è–º–∏")

        html_content = generate_email_html(subscriber, jobs, preferences, lang=lang)
        subject = _digest_subject(lang, len(jobs))

        msg = Message(
            subject=subject,
            sender=os.getenv('MAIL_DEFAULT_SENDER'),
            recipients=[subscriber.email],
            html=html_content
        )

        with app.app_context():
            mail.send(msg)
            print(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {subscriber.email}")
            return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ {subscriber.email}: {e}")
        return False


def generate_email_html(subscriber, jobs, preferences, lang='ru'):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–æ)."""
    total_jobs = len(jobs)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    jobs_by_country = {}
    for job in jobs:
        country = getattr(job, 'country', getattr(job, 'location', '')) or ''
        jobs_by_country.setdefault(country, []).append(job)

    vac_short = _vacancy_forms(lang, total_jobs, long=False)
    jobs_title = _tr(lang, "digest_title", n=total_jobs, vac_short=vac_short)

    base_url = os.getenv('BASE_URL', 'http://localhost:5000')
    manage_url = f"{base_url}/subscription/manage?email={subscriber.email}"
    unsub_url = f"{base_url}/unsubscribe?email={subscriber.email}"


    # --- –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –°–ü–ò–°–ö–ê –ü–†–û–§–ï–°–°–ò–ô –í –®–ê–ü–ö–ï –î–ê–ô–î–ñ–ï–°–¢–ê ---
    jobs_src = (preferences.get('selected_jobs') or [])
    jobs_disp = ', '.join(_front_tr(lang, j) for j in jobs_src[:3])
    li_prof  = f"<li><strong>{_tr(lang, 'pref_professions')}:</strong> {jobs_disp}{'...' if len(jobs_src) > 3 else ''}</li>"
    # ------------------------------------------------------

    # HTML
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>{I18N[lang]['app_name']}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f8f9fa; }}
            .container {{ max-width: 680px; margin: 0 auto; background: white; border-radius: 12px; overflow: hidden; }}
            .header {{ background: #0057B7; color: white; padding: 28px 20px; text-align: center; }}
            .content {{ padding: 20px; }}
            .job-card {{ border: 1px solid #e5e7eb; border-radius: 10px; padding: 14px; margin: 14px 0; }}
            .job-title {{ font-weight: bold; color: #0d47a1; font-size: 16px; }}
            .job-company {{ color: #6b7280; margin: 5px 0; }}
            .job-location {{ color: #1b5e20; font-size: 14px; }}
            .country-header {{ background: #eff6ff; padding: 12px 14px; margin: 20px 0 8px 0; border-radius: 8px; font-weight: bold; }}
            .footer {{ background: #f8f9fa; padding: 18px; text-align: center; font-size: 12px; color: #6b7280; }}
            .btn {{ background: #0057B7; color: white !important; padding: 10px 18px; text-decoration: none; border-radius: 6px; display: inline-block; }}
            .badge {{ display:inline-block; margin-right:6px; padding:2px 8px; border-radius:10px; font-size:11px; color:#fff; }}
            .bg-green {{ background:#28a745; }}
            .bg-cyan {{ background:#17a2b8; }}
            ul.inline li {{ margin-bottom: 4px; }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üåç {I18N[lang]['app_name']}</h1>
                <p>üìç {jobs_title}</p>
            </div>

            <div class="content">
                <p>{_tr(lang, "digest_intro")}</p>
                <ul class="inline">
                    {li_prof}
                    <li><strong>{_tr(lang, "pref_countries")}:</strong> {', '.join(preferences['countries'])}</li>
                    {f"<li><strong>{_tr(lang, 'pref_city')}:</strong> {preferences['cities'][0]}</li>" if preferences.get('cities') else ''}
                </ul>


                <h3>{_tr(lang, "digest_all_jobs")}</h3>
    """

    # –°—Ç—Ä–∞–Ω—ã
    for country, country_jobs in jobs_by_country.items():
        vac_short_c = _vacancy_forms(lang, len(country_jobs), long=False)
        country_disp = country  # –∏–ª–∏ _front_tr(lang, country), –µ—Å–ª–∏ —Å–¥–µ–ª–∞–µ—à—å —Å–ª–æ–≤–∞—Ä—å —Å—Ç—Ä–∞–Ω
        html += f'<div class="country-header">{country_disp} ({len(country_jobs)} {vac_short_c})</div>'


        for job in country_jobs:
            title = getattr(job, 'title', '')
            company = getattr(job, 'company', '')
            location = getattr(job, 'location', '')
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º/–ª–æ–∫–∞–ª–∏–∑—É–µ–º "–£–¥–∞–ª–µ–Ω–Ω–æ"
            if location and ('–£–¥–∞–ª–µ–Ω–Ω–æ' in location or location.strip().lower().startswith('remote')):
                location = f"Remote ({_front_tr(lang, '–£–¥–∞–ª–µ–Ω–Ω–æ')})"

            apply_url = getattr(job, 'apply_url', '')
            salary = getattr(job, 'salary', None)
            refugee = getattr(job, 'refugee_friendly', False)
            no_lang = getattr(job, 'language_requirement', '') == 'no_language_required'

            salary_html = f"<br><strong>üí∞ {salary}</strong>" if salary else ""
            badges = ""
            if refugee:
                badges += f'<span class="badge bg-green">{_tr(lang, "badge_refugee")}</span>'
            if no_lang:
                badges += f'<span class="badge bg-cyan">{_tr(lang, "badge_no_lang")}</span>'

            html += f"""
            <div class="job-card">
                <div class="job-title">{title}</div>
                <div class="job-company">üè¢ {company}</div>
                <div class="job-location">üìç {location}</div>
                {salary_html}
                <div style="margin: 10px 0;">{badges}</div>
                <a href="{apply_url}" class="btn" target="_blank" style="color: white !important; text-decoration: none;">{_tr(lang, "btn_apply")}</a>
            </div>
            """

    year = datetime.now().year
    html += f"""
            </div>

            <div class="footer">
                <p>{_tr(lang, "auto_notice")}</p>
                <p>
                    <a href="{manage_url}">{_tr(lang, "manage")}</a> |
                    <a href="{unsub_url}">{_tr(lang, "unsubscribe")}</a>
                </p>
                <p>{_tr(lang, "copyright", year=year)}</p>
            </div>
        </div>
    </body>
    </html>
    """
    return html


def send_welcome_email(app, email, lang=None, *_, **__):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ email.
    –°–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –æ–±–æ–∏–º–∏ —Å—Ç–∏–ª—è–º–∏ –≤—ã–∑–æ–≤–∞:
      - send_welcome_email(app, email)
      - send_welcome_email(app, email, lang='en')
    –ï—Å–ª–∏ lang –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω ‚Äî –±–µ—Ä—ë–º –∏–∑ Subscriber.lang, –∏–Ω–∞—á–µ 'ru'.
    """
    try:
        # –ú–æ–∂–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å subscriber –¥–∞–ª—å—à–µ (–ª–æ–≥ —É—Å–ø–µ—Ö–∞ —Å id)
        subscriber = Subscriber.query.filter_by(email=email).first()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        SUPPORTED_LANGS = {'ru', 'uk', 'en'}
        if lang is None:
            lang = _get_lang(subscriber) if subscriber else 'ru'
        else:
            lang = (lang or 'ru').lower()
            if lang not in SUPPORTED_LANGS:
                lang = 'ru'

        print(f"üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º welcome email –¥–ª—è {email} (lang={lang})...")

        base_url = os.getenv('BASE_URL', 'http://localhost:5000')
        manage_url = f"{base_url}/subscription/manage?email={email}"
        unsubscribe_url = f"{base_url}/unsubscribe?email={email}"

        # HTML —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
        list_items = "".join(
            f"<li>{_tr(lang,'welcome_box_list')[i]}</li>"
            for i in range(len(_tr(lang,'welcome_box_list')))
        )

        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f8f9fa; }}
                .container {{ max-width: 680px; margin: 0 auto; background: white; border-radius: 15px; overflow: hidden; box-shadow: 0 4px 20px rgba(0,0,0,0.08); }}
                .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 36px 24px; text-align: center; }}
                .content {{ padding: 28px; }}
                .button {{ display: inline-block; background: #667eea; color: #ffffff !important;text-decoration: none; padding: 12px 20px; border-radius: 24px; font-weight: bold; margin: 8px 6px; }}
                .footer {{ background: #f8f9fa; padding: 18px; text-align: center; font-size: 12px; color: #666; }}
                .info-box {{ background: #e3f2fd; border-left: 4px solid #2196f3; padding: 14px; margin: 16px 0; border-radius: 6px; }}
                ul {{ margin: 10px 0 0 18px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>{_tr(lang, "welcome_title")}</h1>
                    <p>{_tr(lang, "welcome_tagline")}</p>
                </div>
                <div class="content">
                    <h2>{_tr(lang, "welcome_thanks")}</h2>
                    <p>{_tr(lang, "welcome_you_will_get")}</p>

                    <div class="info-box">
                        <ul>
                            <li>{_tr(lang, "welcome_bul_1")}</li>
                            <li>{_tr(lang, "welcome_bul_2")}</li>
                            <li>{_tr(lang, "welcome_bul_3")}</li>
                            <li>{_tr(lang, "welcome_bul_4")}</li>
                        </ul>
                    </div>

                    <div style="text-align:center; margin: 24px 0;">
                        <a href="{manage_url}" class="button">{_tr(lang, "welcome_manage")}</a>
                        <a href="{base_url}" class="button" style="background:#28a745;">{_tr(lang, "welcome_find_now")}</a>
                    </div>

                    <div style="background:#fff3cd; border:1px solid #ffeaa7; border-radius:8px; padding:14px; margin:18px 0;">
                        <h4 style="margin:0 0 6px 0; color:#856404;">{_tr(lang, "welcome_box_title")}</h4>
                        <p style="margin: 6px 0; color:#856404; font-size:14px;">
                            <strong>{_tr(lang, "welcome_box_text_1")}</strong><br>
                            <ul style="margin-top:8px;">{list_items}</ul>
                        </p>
                        <p style="margin: 6px 0; color:#856404; font-size:14px;">
                            {_tr(lang, "welcome_box_text_2")}
                        </p>
                    </div>

                    <p><small>{_tr(lang, "welcome_email")}: {email}</small></p>
                    <p><small>{_tr(lang, "welcome_freq")}: {_tr(lang, "welcome_weekly")}</small></p>
                    <p><small>{datetime.now().strftime('%d.%m.%Y %H:%M')}</small></p>
                </div>
                <div class="footer">
                    <p><a href="{manage_url}">{_tr(lang, "nav_manage")}</a> | <a href="{unsubscribe_url}">{_tr(lang, "nav_unsub")}</a> | <a href="{base_url}">{_tr(lang, "nav_find")}</a></p>
                    <p>{_tr(lang, "copyright", year=datetime.now().year)}</p>
                </div>
            </div>
        </body>
        </html>
        """

        msg = Message(
            subject=_tr(lang, "welcome_subject"),
            sender=os.getenv('MAIL_DEFAULT_SENDER'),
            recipients=[email],
            html=html_content
        )

        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º welcome email...")
        with app.app_context():
            mail.send(msg)
            print(f"‚úÖ Welcome email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            if subscriber:
                log = EmailLog(
                    subscriber_id=subscriber.id,
                    email=email,
                    subject=_tr(lang, "welcome_subject"),
                    jobs_count=0,
                    status='sent',
                    sent_at=datetime.now()
                )
                db.session.add(log)
                db.session.commit()
                print("üìù –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É")
            return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ welcome email –Ω–∞ {email}: {str(e)}")
        # –õ–æ–≥ –æ—à–∏–±–∫–∏ (–±–µ–∑ subscriber_id)
        try:
            with app.app_context():
                log = EmailLog(
                    email=email,
                    subject="welcome_failed",
                    jobs_count=0,
                    status='failed',
                    error_message=str(e),
                    sent_at=datetime.now()
                )
                db.session.add(log)
                db.session.commit()
        except Exception as log_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {log_error}")
        return False



def send_preferences_update_email(app, subscriber):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–æ)."""
    print(f"üìß send_preferences_update_email -> {subscriber.email}")

    try:
        lang = _get_lang(subscriber)
        base_url = os.getenv('BASE_URL', 'http://localhost:5000')
        manage_url = f"{base_url}/subscription/manage?email={subscriber.email}"

        # --- –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è —à–∞–ø–∫–∏ –ø–∏—Å—å–º–∞ ---
        profs = subscriber.get_selected_jobs() or []
        profs_disp = ', '.join(_front_tr(lang, p) for p in profs[:3])


        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f8f9fa; }}
                .container {{ max-width: 560px; margin: 0 auto; background: white; border-radius: 10px; overflow: hidden; }}
                .header {{ background: #28a745; color: white; padding: 20px; text-align: center; }}
                .content {{ padding: 20px; }}
                .muted {{ color:#6b7280; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h2>{_tr(lang, "prefs_title")}</h2>
                </div>
                <div class="content">
                    <p>{_tr(lang, "prefs_intro")}</p>
                    <ul>
                        {f'<li><strong>{_tr(lang,"pref_professions")}:</strong> {profs_disp}{"..." if len(profs) > 3 else ""}</li>'}

                        <li><strong>{_tr(lang,"prefs_countries")}:</strong> {', '.join(subscriber.get_countries())}</li>
                        <li><strong>{_tr(lang,"prefs_city")}:</strong> {subscriber.city or _tr(lang,"prefs_city_none")}</li>
                        <li><strong>{_tr(lang,"prefs_frequency")}:</strong> {subscriber.frequency}</li>
                    </ul>
                    <p><a href="{manage_url}">{_tr(lang, "prefs_change_again")}</a></p>
                </div>
            </div>
        </body>
        </html>
        """

        msg = Message(
            subject=_tr(lang, "prefs_subject"),
            sender=os.getenv('MAIL_DEFAULT_SENDER'),
            recipients=[subscriber.email],
            html=html_content
        )

        with app.app_context():
            mail.send(msg)
            log = EmailLog(
                subscriber_id=subscriber.id,
                email=subscriber.email,
                subject=_tr(lang, "prefs_subject"),
                jobs_count=0,
                status='sent',
                sent_at=datetime.now()
            )
            db.session.add(log)
            db.session.commit()
            return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False
